WEBVTT

00:00.150 --> 00:03.690
Veamos los patrones de diseño, empezando por el Observador.

00:03.720 --> 00:11.100
Ahora, mientras que los principios de diseño se sientan muy alto en la teoría, los patrones de diseño comienzan un poco más a ser

00:11.100 --> 00:14.370
anclados en la informática y en soluciones específicas.

00:14.400 --> 00:16.450
Aún así, son agnósticos al lenguaje.

00:16.470 --> 00:22.080
Puedes aplicar estos mismos patrones a una variedad de lenguajes de programación y plataformas diferentes.

00:22.080 --> 00:28.050
Puedes pensar en un patrón de diseño como un tipo de solución reutilizable para un problema de diseño.

00:28.080 --> 00:32.550
Ahora, puedes imaginar que en tu proyecto, hay un montón de cosas que estás haciendo que son exclusivas de la

00:32.550 --> 00:38.580
necesidades de su juego, pero muchos de los diferentes problemas que se plantean y cómo tendrá que organizar.

00:38.580 --> 00:41.160
Las cosas se han hecho antes en software.

00:42.090 --> 00:45.750
Algunos beneficios de usar patrones de diseño es que están probados.

00:46.260 --> 00:51.450
Muchos de estos retos se han resuelto antes y bastante bien, así que ¿por qué no aprender de ellos?

00:51.450 --> 00:56.530
Y pueden conducir a un desarrollo mucho más rápido, así como a un mantenimiento más sencillo.

00:56.550 --> 00:59.970
Aquí vemos una lista de algunos de los patrones de diseño más populares.

01:00.150 --> 01:04.620
Seguro que hay muchos más, e incluso puedes definir tus propios patrones de diseño.

01:04.620 --> 01:10.380
Pero estar familiarizado con unos 20 de ellos aquí te da una buena biblioteca para empezar a pensar en tu

01:10.380 --> 01:11.220
proyectos.

01:11.220 --> 01:15.270
Hay tres tipos principales Los patrones de creación crean cosas nuevas.

01:15.270 --> 01:22.950
Los patrones estructurales organizan cómo se establecen esas cosas y los patrones de comportamiento definen cómo estos sistemas

01:22.950 --> 01:24.270
se comportan entre sí.

01:24.450 --> 01:30.540
Examinaremos detenidamente sólo algunos de ellos, ya que están directamente relacionados con las arquitecturas que examinaremos.

01:30.540 --> 01:31.290
más tarde.

01:31.290 --> 01:37.290
Uno tremendamente popular, uno que probablemente ya estés usando, especialmente como desarrollador unitario,

01:37.290 --> 01:39.030
es el patrón observador.

01:39.030 --> 01:44.040
El patrón observador define cómo uno o más objetos pueden comunicarse entre sí.

01:44.040 --> 01:49.290
Ahora sabemos que una clase puede obtener una referencia a una segunda clase y llamar a un método directamente sobre ella.

01:49.290 --> 01:53.480
Necesita tener esa referencia y necesita saber exactamente a qué método llamar.

01:53.490 --> 01:58.200
Ese es un ejemplo de relaciones estrechamente conectadas o estrechamente acopladas.

01:58.200 --> 02:01.980
La ventaja del observador es que no está tan estrechamente conectado.

02:01.980 --> 02:08.760
Mientras que una clase necesita una referencia a ese emisor, es capaz de intercambiar datos más fácilmente y aislar

02:08.760 --> 02:12.360
los problemas que vienen de cambiar uno sin cambiar el otro.

02:12.360 --> 02:18.840
También le permite tener múltiples observadores y fácilmente añadir y quitar a medida que avanzamos a través de este patrón

02:18.840 --> 02:24.210
y otros, echa un vistazo al diagrama y aplica lo que hemos aprendido sobre UML para entender un poco

02:24.210 --> 02:24.870
un poco más.

02:24.870 --> 02:29.730
Y con cada uno de estos patrones, hay una excelente oportunidad para hacer alguna investigación adicional.

02:29.940 --> 02:32.520
He aquí un ejemplo de observador para la unidad.

02:32.520 --> 02:38.190
Ahora, hay varias maneras de resolver esto en la unidad, pero una solución de primera parte que estoy seguro de que eres

02:38.190 --> 02:41.490
familiarizado con Unity es el evento Unity.

02:41.790 --> 02:48.510
Hay tres partes principales para llamar aquí la creación del evento, escuchar el evento y la invocación de la

02:48.510 --> 02:49.230
evento.

02:49.260 --> 02:50.630
Todo se muestra aquí.

02:50.640 --> 02:58.320
Ahora, típicamente haríamos esto a través de dos o más clases, pero por brevedad, estoy mostrando una clase

02:58.320 --> 03:00.540
escuchándose a sí misma, por así decirlo.

03:00.540 --> 03:06.030
Ahora, mientras que el último ejemplo fue construido en la unidad, aquí es una clase personalizada que verá más adelante cuando

03:06.030 --> 03:07.230
entramos en el código.

03:07.230 --> 03:13.020
Tomé algunos de los mismos conceptos del evento de Unity y los puse dentro de la clase observable.

03:13.020 --> 03:13.440
Aquí.

03:13.440 --> 03:21.240
En este ejemplo del observable, soy capaz de crear un observable escuchar a un observable e invocar

03:21.240 --> 03:22.380
ese observable.

03:23.320 --> 03:30.430
Es un patrón muy común, especialmente cuando separas los datos del resto de la lógica del juego.

03:30.430 --> 03:33.770
a uno al que suscribirte cuando los datos cambian.

03:33.790 --> 03:39.420
Esta clase observable es una manera muy fácil de conseguir el patrón observador atado.

03:39.430 --> 03:41.560
Cualquier valor de tiempo cambia.

03:41.560 --> 03:43.510
Usted puede ver que sucede en el código aquí.

03:43.510 --> 03:45.230
Y como en el último ejemplo.

03:45.250 --> 03:51.640
Típicamente usaríamos dos o más clases como una demostración completa, pero por brevedad, lo pongo en una sola clase

03:51.640 --> 03:52.210
archivo.

03:52.540 --> 04:00.100
El patrón observador es tan fundamental y beneficioso si usted encuentra que usted ha estado usando lo suficiente

04:00.100 --> 04:03.790
pero sin entenderlo realmente o sentir que lo estás aprovechando.

04:03.910 --> 04:06.180
Definitivamente, ve a comprobarlo más.

04:06.190 --> 04:09.610
Lo veremos en algunos de los ejemplos que haremos en nuestras muestras más tarde.

04:09.610 --> 04:16.570
Pero también se puede ver a través de diferentes APIs y SDKs conectados con sus proyectos de Unity.

04:16.570 --> 04:22.360
Es tremendamente simple y poderoso empezar a separar las diferentes áreas de tu código, que

04:22.360 --> 04:23.580
traerá algunos beneficios.

04:23.590 --> 04:24.340
Gracias.
