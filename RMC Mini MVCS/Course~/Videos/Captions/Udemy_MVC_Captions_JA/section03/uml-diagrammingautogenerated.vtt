WEBVTT

00:00.400 --> 00:04.360
A continuación, vamos a hablar de UML o lenguaje de modelado unificado.

00:04.720 --> 00:11.530
Usamos UML para entender y comunicar patrones de diseño y soluciones de software.

00:11.950 --> 00:17.290
Lo menciono en este curso porque quiero discutir algunos patrones de diseño en la siguiente sección,

00:17.290 --> 00:24.190
y estos diagramas nos dan una forma de comunicar estos conceptos más rápida y visualmente.

00:24.190 --> 00:29.920
Algunos beneficios de usar UML son Permite una planificación más rápida y una comunicación más clara con tu equipo

00:29.920 --> 00:34.210
y durante el desarrollo te ayuda a centrarte en la solución dada.

00:34.210 --> 00:40.310
Hay muchos tipos diferentes de diagramas e incluso dentro de Usmle hay muchos tipos de diagramas usmle.

00:40.330 --> 00:47.740
La mayor parte de lo que estoy mostrando aquí serán diagramas de clase, la forma en que las clases interactúan desde una muy alta

00:47.740 --> 00:48.460
nivel.

00:48.490 --> 00:55.120
No estoy deletreando los métodos y variables individuales como a veces hacemos en estos diagramas.

00:55.120 --> 01:01.630
En su lugar, es una relación de alto nivel entre las clases de tal manera que una clase extiende a otra

01:01.630 --> 01:05.470
utilizando la herencia o compone otra clase?

01:05.470 --> 01:05.740
¿Aquí?

01:05.740 --> 01:10.960
En esta imagen, vemos el ejemplo de la flecha blanca que indica herencia.

01:10.960 --> 01:16.480
Así que dentro de la unidad, por ejemplo, si usted tiene una clase que extiende el comportamiento mono, este sería el apropiado

01:16.480 --> 01:17.590
diagrama a utilizar.

01:17.590 --> 01:20.500
Así que vemos aquí algunos ejemplos más.

01:20.680 --> 01:26.620
Entender lo básico de esto es todo lo que necesitamos para avanzar en la comprensión de otros diagramas.

01:26.620 --> 01:29.080
La flecha blanca indica herencia.

01:29.080 --> 01:34.990
La línea de puntos con la flecha blanca significa que estamos implementando una interfaz y el diamante negro y

01:34.990 --> 01:39.040
flecha negra indican composición y referencia.

01:39.040 --> 01:41.380
Vamos a divertirnos con un ejemplo tonto.

01:41.380 --> 01:45.820
Un coche Toyota es un tipo de coche, así que tiene sentido.

01:45.820 --> 01:51.070
Para utilizar la herencia si estás familiarizado con las interfaces, ya sabes, a menudo comenzamos el nombre del tipo

01:51.070 --> 01:55.660
con un ojo y describimos qué tipo de comportamiento es posible.

01:55.660 --> 02:02.350
Así que podríamos decir que la rueda aquí es una clase que implementa el ojo Rotatable composición de la interfaz

02:02.350 --> 02:04.300
y referencia son bastante similares.

02:04.300 --> 02:08.470
Ambas son una clase que usa otra clase de alguna manera.

02:08.500 --> 02:13.600
La diferencia clave aquí es que la composición indica que tienen el mismo ciclo de vida.

02:13.600 --> 02:18.300
En este caso, si el coche Toyota desapareciera, las ruedas desaparecerían con él.

02:18.310 --> 02:22.540
Entendemos que las ruedas forman parte de él, conectadas en un ciclo de vida compartido.

02:22.540 --> 02:27.010
Sin embargo, ese coche Toyota también puede usar un sistema que utiliza el satélite GPS.

02:27.010 --> 02:28.600
Así que también utiliza esto.

02:28.600 --> 02:34.000
Pero entendemos que si el coche desapareciera, el satélite GPS probablemente seguiría existiendo.

02:34.000 --> 02:40.480
Y con sólo estos cuatro tipos de líneas, podemos crear muchas soluciones de software y explicar claramente

02:40.480 --> 02:40.810
claramente.

02:40.810 --> 02:45.160
A lo largo de mi carrera, he visto diagramas hechos de diversas maneras.

02:45.160 --> 02:52.390
Los que están familiarizados con UML y se apoyan mucho en él pueden hacer bocetos en papel o utilizar herramientas en línea

02:52.390 --> 02:55.030
que te ayuden a conectar estas líneas y diagramarlas.

02:55.030 --> 03:00.430
Las personas que no estén familiarizadas con esta forma oficial de diagramar pueden coger un trozo de papel

03:00.430 --> 03:03.850
o el reverso de una servilleta y esbozar sus ideas libremente.

03:03.850 --> 03:09.880
Pero cuantos más seamos los que acordemos algún tipo de sistema para el lenguaje, más fácilmente podremos comunicarnos.

03:09.880 --> 03:12.520
UML es un estándar bastante popular.

03:12.520 --> 03:16.750
Existe desde hace mucho tiempo en informática y merece la pena echarle un vistazo.

03:16.750 --> 03:23.380
Ya sea que elijas aprender de UML aquí y diagramarte a ti mismo o que sólo aprendas lo suficiente para seguirlo

03:23.380 --> 03:25.180
en el curso, me parece bien.

03:25.300 --> 03:30.130
Veremos un poco más sobre cómo UML se aplica a algunos patrones de diseño.

03:30.130 --> 03:30.850
Siguiente.

03:30.850 --> 03:31.660
Gracias.
