WEBVTT

00:00.240 --> 00:02.490
ソフトウェア設計の概要。

00:02.670 --> 00:06.000
まずは設計原理の理論から。

00:06.180 --> 00:10.710
ベテランの開発者はそれを簡単に見せることができますが、きれいなコードは偶然に書けるものではありません。

00:10.740 --> 00:17.430
良いプロジェクトを作るには、健全な原則、良いワークフロー、生産的なパターンを使うことです。

00:17.430 --> 00:18.670
を使うことである。

00:18.690 --> 00:21.440
まず、デザインの原則について説明しよう。

00:21.450 --> 00:25.040
これらは生産的なソフトウェア開発につながる哲学です。

00:25.050 --> 00:32.490
より迅速なプランニング、明確なコミュニケーション、開発中の集中力といったメリットがあります。

00:32.700 --> 00:37.350
コンピュータサイエンスの歴史は、このような設計原則に満ちています。

00:37.470 --> 00:39.850
最もポピュラーなものをいくつか紹介しましょう。

00:39.870 --> 00:46.410
この機会に、あなた自身で調べてみてください。

00:46.410 --> 00:49.370
00:49.370 --> 00:49.380 --> 00:49.380 --> 00:49.380

00:49.380 --> 00:56.220
まずはソリッド原則から。ソリッドの各文字はデザイン原則に対応しています。

00:56.490 --> 01:04.530
単一責任の原則とは、各クラスや構造体に対して次のような一般的な要望を持つことです。

01:04.530 --> 01:06.050
というものです。

01:06.060 --> 01:14.010
01:06.060→01:14.010「オープン・クローズの原則」とは、各クラスは拡張に対してはオープンであるが、変更に対してはクローズであるべきということである。

01:14.010 --> 01:19.290
オブジェクト指向プログラミングでは、継承とインターフェースがあります。

01:19.290 --> 01:27.840
代入の原則では，どのようなサブタイプも親としてキャストすることができるようにする必要があります。

01:27.870 --> 01:29.220
型とインターフェイスを持つ

01:29.220 --> 01:36.030
棲み分けとは，与えられた型に必要以上のインターフェイスを適用しないことである。

01:36.030 --> 01:41.970
そして最後に、依存関係の逆転とは、ハイ・コードとロー・コードを扱うときに

01:41.970 --> 01:49.280
そして最後に，依存関係の逆転とは，システムの中で上位のコードと下位のコードを扱う場合，上位のコードは下位のコードの具体的な実装に依存すべきではないということです。

01:49.290 --> 01:55.140
その代わり，インターフェイスのようなものを使って抽象化する必要がある。

01:55.140 --> 01:56.520
同じことを繰り返すな

01:56.520 --> 02:02.940
これは開発者としての注意事項であり、もしあなたがコピーやペースト、リテラルコードを使用しているのであれば

02:02.940 --> 02:08.910
もし、あなたがコードをコピーしたり、貼り付けたりしているのであれば、そのコードをより効率的に再利用するための体系的なアプローチがあるかもしれません。

02:08.940 --> 02:15.540
シンプルに保つことは、解決策を複雑にし過ぎないことを思い出させてくれる。

02:15.540 --> 02:19.500
明日の解決策を今日作らないことを思い出させてくれる。

02:20.310 --> 02:21.870
繰り返しの開発

02:21.870 --> 02:28.080
私たちは今、目の前にある課題を健全な原理原則で解決したいのであって、何かをエンジニアリングしたいわけではありません。

02:28.080 --> 02:30.180
(勿論、そのようなことはあり得ない。)

02:30.210 --> 02:36.630
私たちはしばしば未来がどうなるか分からないし、明日のために設計することは不必要な複雑さだ。

02:36.630 --> 02:42.870
ここでの原則を実践し、プロジェクトに適用するだけで、あなたは自動的に

02:42.870 --> 02:49.150
スケーラビリティ、メンテナンス性、そして開発者としてのクオリティ・オブ・ライフが向上する。

02:49.170 --> 02:54.900
この特別なセクションでこれらのソフトウェア設計原則を考えるとき、私たちは高いところから出発します。

02:54.900 --> 03:00.720
理論的なレベルでは、異なるプログラミング・プラットフォーム間でより普遍的なものとなり得ます。

03:00.720 --> 03:06.450
そして、特にunityの中でどのように適用されるのか、より肝心な部分に踏み込んでいきます。

03:06.600 --> 03:13.890
しかし、私たちがハイレベルな話をしているところと、ローレベルで具体的な話をしているところでは、このような違いがあることにお気づきでしょう。

03:13.890 --> 03:19.890
これらの原則のどれが日々の仕事に影響を与えるか、自分なりのスタイルを確立することができる。

03:19.890 --> 03:21.020
他よりも。

03:21.030 --> 03:27.180
また、これらの原則のいくつかは、私たちが使用しているアーキテクチャー全体を通して認識されるようになり、最終的には

03:27.180 --> 03:30.030
そして最終的には、コーディングのセクションで一緒に行うコードを通して、これらの原則のいくつかを認識するようになるだろう。

03:30.150 --> 03:31.260
以上です。

03:31.260 --> 03:31.980
ありがとうございました。
