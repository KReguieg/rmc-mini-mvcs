WEBVTT

00:00.880 --> 00:01.390
よし

00:01.390 --> 00:02.830
おかえりなさい

00:04.350 --> 00:04.860
ここだ

00:04.860 --> 00:13.140
今回はミニMVCを使ったデモを見てみましょう。

00:13.140 --> 00:15.540
UI toolkitと一緒に。

00:18.380 --> 00:24.890
これはunityのための有料MVCアーキテクチャのコースの一部です。

00:24.920 --> 00:28.170
モデル・ビュー・コントローラーをカバーしています。

00:28.190 --> 00:30.410
コースの詳細はこちらです。

00:30.440 --> 00:31.820
自分に合うかどうかを確認します。

00:31.850 --> 00:33.860
予告編もご覧ください。

00:33.890 --> 00:39.080
この体験の上にさらに追加されるコンテンツについてお話します。

00:39.080 --> 00:45.020
コアコースではユニティソフトウェアのデザインについて学びます。

00:45.020 --> 00:51.170
Unity Mini MVCは、私が推奨するフレームワークのひとつで、さまざまなサンプルもあります。

00:51.170 --> 00:52.550
プロジェクトもあります。

00:53.030 --> 00:57.590
さらにデモを追加しました。

00:57.590 --> 01:03.680
このコースは最近、生徒数が6、7000人に達した。

01:03.680 --> 01:05.360
を追加しました。

01:05.360 --> 01:09.940
そして、UI toolkitを使ったデモをひとつ。

01:09.950 --> 01:17.210
UI toolkitは、Unity 2022以降に搭載された最新のものです。

01:17.240 --> 01:22.830
デフォルトのUIはパッケージではなく、ビルトインされています。

01:22.830 --> 01:25.140
そして、それはまだ最もポピュラーなものではない。

01:25.170 --> 01:27.690
Unity UIはかなり人気がある。

01:27.690 --> 01:34.770


01:34.770 --> 01:35.550
01:34.770 --> 01:35.550

01:35.580 --> 01:42.930
ここでは、ミニMVCプロジェクトでUIツールキットを使う例を見てみましょう。

01:44.870 --> 01:46.370
では、ここを見てみましょう。

01:46.370 --> 01:55.040
ここはプロジェクトの中です。Gitで公開されているmini MVCsのフリーレポです。

01:55.070 --> 01:58.190
下のチャットリンクにリンクがあるので、見てみてください。

01:58.190 --> 02:03.820
その中で、サンプルをクリックして、ここにあるサンプルをインポートして、それに従ってプレーすることができます。

02:03.830 --> 02:07.250
このデモのために、すでにここで行われています。

02:07.250 --> 02:12.650
そしてmoreフォルダには様々なものが入っています、

02:12.650 --> 02:20.990
このシリーズで取り上げる第10弾は、UIツールキットを搭載したMini Mini Incorporatedです。

02:21.900 --> 02:25.800
このように、様々なものをご紹介しています。

02:25.830 --> 02:29.010
resourcesフォルダの中にいろいろ入っています。

02:29.040 --> 02:32.900
シーンが完成しました。すぐに実行し、ソースコードも完成します。

02:32.910 --> 02:35.640
ベストプラクティスのソースコードに注目してください。

02:35.640 --> 02:42.090
多くの場合、コントローラ・モデル・サービス・ビューに分かれています。

02:42.450 --> 02:45.120
それではミニを走らせてみましょう。

02:47.420 --> 02:51.860
ロードして、このサンプルを再生してみましょう。

02:52.310 --> 02:55.100
UIはこんな感じです。

02:55.130 --> 03:01.610
UIツールキットに馴染みのない人は、ああ、これは普通にunityを使って作ったものなんだ、と思うかもしれません。

03:01.640 --> 03:04.090
UIがどのような構造になっているか見てみましょう。

03:04.100 --> 03:10.580
これらの要素はそれぞれボタンであり、マウスオーバーが一貫していることに注目してください。

03:12.200 --> 03:12.920
実に素晴らしい。

03:12.920 --> 03:16.160
ウサギのボタンをクリックすると髪型が変わります。

03:18.560 --> 03:19.820
顔ボタンをクリックします。

03:21.890 --> 03:23.540
シャツのボタン

03:24.080 --> 03:26.450
グラフィックが切り替わります。

03:27.770 --> 03:29.590
体そのものが変化します。

03:29.600 --> 03:31.310
ランダム化できます。

03:32.130 --> 03:33.900
元に戻すこともできる

03:34.500 --> 03:41.160
このUIはすべてUI toolkitで作られています。

03:41.160 --> 03:45.060
それからミニエクスペリエンスに焦点を当てます。

03:46.710 --> 03:48.810
シーンの構成を見てみましょう。

03:49.110 --> 03:52.470
ここで、この世界を閉じてみましょう。

03:56.820 --> 03:57.150
そうだ

03:57.480 --> 04:01.860
メインカメラとライトだけです。

04:01.890 --> 04:03.210
特に盛り上がりはない

04:03.210 --> 04:05.700
空っぽのワールドオブジェクトの中に入れてみました。

04:05.730 --> 04:09.390
UIツールキットのビューです。

04:09.420 --> 04:10.740
これはUIツールキットのビューです。

04:10.740 --> 04:14.220
ミニの例です。

04:14.220 --> 04:17.670
このビデオには2つのパートがあります。

04:17.700 --> 04:21.060
UIツールキットの部分とミニの部分です。

04:21.090 --> 04:28.500
ミニをよくご存知の方なら、特に目新しいことはないでしょう。

04:28.500 --> 04:29.430
ということだ。

04:29.430 --> 04:30.900


04:30.900 --> 04:36.300
しかし、多くのunityユーザーにとって興味深いのは、UIがどのように設定されているかということだ。

04:36.300 --> 04:36.750
ということです。

04:36.780 --> 04:46.320
UIドキュメントはunityのコアクラスです。

04:47.580 --> 04:49.140
ちょっとこっちに来てみよう。

04:49.170 --> 04:56.380
unity UIはUI toolkitのコアクラスで、ビジュアルツリーアセットを使用します。

04:56.500 --> 04:58.930
プロジェクトを見てみましょう。

05:02.550 --> 05:05.340
どこをクリックすればいいのかわからなくなってしまいました。

05:05.340 --> 05:08.790
クリック、クリック。

05:09.720 --> 05:10.290
いくぞ

05:10.500 --> 05:18.250
このUI toolkitのミニデモでは、UI toolkitフォルダがあり、その中にいくつかの設定があります。

05:18.270 --> 05:22.470
カスケーディングスタイルシートがあります。

05:22.500 --> 05:25.080
UIツールキットのレイアウト。

05:25.110 --> 05:28.260
このレイアウトによって、画面に何が表示されるかが決まります。

05:28.290 --> 05:34.410
UIツールキットがどのように機能するのか、どのように、そしてなぜUIツールキットが必要なのかについては、以下のリンクからご覧いただけます。

05:34.410 --> 05:39.870
CSS、HTML、JavaScriptといったウェブ標準をベースにしている。

05:39.870 --> 05:42.690
でも、これを開いてざっと見てみましょう。

05:43.540 --> 05:44.920
全画面表示にします。

05:44.920 --> 05:46.320
これをクリックします。

05:46.330 --> 05:47.140
ほらね。

05:47.740 --> 05:51.580
どっちについたらいいんだろう？

05:51.580 --> 05:58.030
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私のパートナーとi約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

05:58.030 --> 05:58.600
05:58.030 --> 05:58.600

05:58.600 --> 06:05.080
UIツールキットシステムとUIビルダーがあるからです。

06:05.080 --> 06:07.980
ウィンドウにはたくさんの情報があります。

06:07.990 --> 06:11.440
左側には様々なスタイルが表示されています。

06:11.470 --> 06:16.780
ここでは、ビューの階層構造を表しています。

06:16.810 --> 06:19.390
全ての項目をクリックすることができます。

06:20.430 --> 06:20.970
メンバーです。

06:20.970 --> 06:25.600
プレビューをクリックすると、マウスオーバーの状態が表示されます。

06:25.620 --> 06:30.380
私たちを利用するメリットのひとつをちょっと覗いてみましょう。

06:30.420 --> 06:37.380
マウスオーバーで大きくなったり、青くなったりするのを変えたい場合はどうすればいいのだろう。

06:37.380 --> 06:39.210
小さくして緑にする？

06:39.300 --> 06:44.010
任意の例ですが、ボタンがホバーしたときのスタイルをここに用意しました。

06:47.270 --> 06:53.600
色を緑に変更します。

06:53.840 --> 06:59.540
そしてトランスフォームで0.98と0.98に変更します。

06:59.540 --> 07:02.560
これで緑が小さくなった。

07:02.570 --> 07:05.270
もう一度プレビューしてマウスオーバーしてみましょう。

07:05.270 --> 07:10.190
見てください、これらのすべてが一貫してオーバーの状態を変えています。

07:10.220 --> 07:16.850
伝統的なunityのUIシステムで同じことをするのはとても可能だが、これまで一度もなかった。

07:16.850 --> 07:24.320
マウスのホバーの擬似的な状態をテンプレート化されたエフェクトで表現するのはもっと簡単です。

07:24.320 --> 07:24.860
選択されました。

07:24.860 --> 07:25.610
ETなど。

07:25.640 --> 07:26.180
ビルトイン

07:26.180 --> 07:27.380
とても素晴らしい

07:27.380 --> 07:32.930
このシステムが超クールだということがポイントなのだが、それについて深く掘り下げるつもりはない。

07:32.930 --> 07:36.350
さて、ここでもう一度見てみよう。

07:39.200 --> 07:41.510
ここで戻る

07:43.230 --> 07:48.810
ミニのセットアップを説明します。

07:49.020 --> 07:54.390
このシーンでは、ミニに関するいくつかの事項を作成します。

07:54.390 --> 07:58.530
コンテキスト、モデル、サービス、コントローラーを作成します。

07:58.560 --> 08:03.990
このコースの他の多くのデモで見てきたように、またYouTubeで様々なビデオを見ることができます。

08:03.990 --> 08:08.820
コントローラーはすべてをまとめる接着剤なのだ。

08:08.820 --> 08:10.620
では、その仕組みを見てみよう。

08:11.750 --> 08:20.720
つまり、初期化して、「モデル、インデックスを表すintを保持してくれ」と言うわけだ。

08:20.720 --> 08:26.720
を表すintを保持する。

08:26.720 --> 08:29.180
顔、シャツ、体。

08:29.180 --> 08:32.960
このように、様々な要素がモデルに保存されており、それをここで聞くことができる。

08:32.960 --> 08:40.880
そして、モデルが「ユーザーがどのボディを使うか進めた」と言うたびに、次のボディを取得する。

08:40.880 --> 08:43.160
スプライトへの参照を取得し、それを使用する。

08:43.670 --> 08:48.080
そして、ビューが変わるたびに、この下にある

08:48.080 --> 08:52.040
髪のボタンをクリックしたら、それを処理します。

08:52.040 --> 08:53.470
ヘアボタンがクリックされました。

08:53.480 --> 08:56.990
顔ボタンがクリックされたら、いつでもここで処理します。

08:56.990 --> 09:03.530
つまり、ビューのレンダリングに影響を与えるような変化を処理し、また、その変化をリスニングしているのだ。

09:03.530 --> 09:04.490
この下

09:04.490 --> 09:06.470
どうなるか見てみよう。

09:06.470 --> 09:16.920
どのボタンをクリックしても、この下に移動し、異なる値を変更することができます。

09:16.920 --> 09:18.960
データモデルに格納されている。

09:18.960 --> 09:24.390
次のヘアをクリックすると、モデル内の値が更新されます。

09:24.940 --> 09:25.450
わかりました。

09:25.450 --> 09:26.210
以上です。

09:26.260 --> 09:31.390
一つ気になることがあります。

09:31.390 --> 09:32.890
ビューです。

09:34.280 --> 09:36.290
ここで作るな

09:36.290 --> 09:37.450
そうだな

09:37.730 --> 09:38.480
お前もな

09:40.970 --> 09:48.320
UIの各ボタンにpublicプロパティを設定しました。

09:48.350 --> 09:54.520
一般的には、Unity UIの各ボタンのフィールドをシリアライズします。

09:54.530 --> 09:59.270
しかし、ここではUI toolkitを使用しているため、独自に異なることを行います。

09:59.420 --> 10:08.390
UI Toolkitにはクエリー言語があり、Qと入力すると任意の名前の要素を取得することができます。

10:08.390 --> 10:13.790
を強くタイプすれば、Qボタンで好きな名前をつけることができる。

10:13.820 --> 10:19.270
つまり、この構文でヘア・ボタンにたどり着くことができる。

10:19.280 --> 10:23.720
では、レイアウトのどこに名前が付けられているのか、再確認してみよう。

10:23.720 --> 10:26.150
大きなウィンドウを表示させると

10:27.080 --> 10:29.150
どのようにデザインされているのか

10:29.180 --> 10:34.160
そして、自分のカスタムネームを付ける。

10:34.190 --> 10:38.540
ヘアボタンみたいな名前もありますね。

10:38.540 --> 10:42.890
ウェブ世界のウェブスタンダードから拝借。

10:42.890 --> 10:51.860
しかし、私はこのように好きなユニティネーミングを使い続けている。

10:51.860 --> 10:52.580
10:51.860 --> 10:52.580

10:52.610 --> 10:53.780
もう一度このシーンを再生してみましょう。

10:54.950 --> 10:55.590
ほらね。

10:55.610 --> 11:04.460
ここをクリックし、顔、首、シャツをクリックし、体を入れ、リセットボタンをクリックします。

11:04.460 --> 11:04.950
そこで

11:05.000 --> 11:08.900
ちょっとカクカクしてたけど、いい感じだね。

11:08.900 --> 11:11.720
ご視聴ありがとうございました。

11:11.720 --> 11:12.680
以上です。
