WEBVTT

00:00.080 --> 00:01.490
こんにちは。

00:01.490 --> 00:05.940
今日はさらに内容を充実させるために時間を費やしました。

00:05.960 --> 00:06.620
素晴らしい。

00:06.650 --> 00:13.520
今回は、私が作成した高度なトピックと高度なデモについて説明したいと思います。

00:14.090 --> 00:17.150
では、一つずつ見ていきましょう。

00:17.150 --> 00:24.140
unityを2、3年フルタイムで使っていれば、たとえプロダクションのプロジェクトであっても、次のことがわかるでしょう。

00:24.140 --> 00:30.500
最高の頭脳が集まり、ベストプラクティスをもたらすプロジェクトに取り組んでも、それはまだ

00:30.500 --> 00:37.160
(そのようなプロジェクトは)規模を拡大し、テスト可能で、保守可能な方法でプロジェクトを組織化することが課題となる。

00:37.160 --> 00:42.380
MVCの概念を初めて知った人でも、パターンが見えてくるはずです。

00:42.380 --> 00:44.840
それぞれの例を見ていくと

00:44.840 --> 00:48.890
UI Toolkit ゲーム内チュートリアルの作り方。

00:48.890 --> 00:53.840
プレイヤーに最初の5分間を案内して、キーを覚えさせる、

00:53.840 --> 00:59.480
etc...それをどうやってゲームに組み込むか。

00:59.480 --> 01:04.890
MVCアーキテクチャーコンセプトに慣れれば、通常、そのうちのひとつを

01:04.890 --> 01:06.300
プロジェクト全体に

01:06.300 --> 01:10.590
しかし、実際にプロジェクトを壊して複数のミニを持ちたいとしたらどうでしょう。

01:11.700 --> 01:13.710
データバインディングについてもお話します。

01:13.710 --> 01:19.740
UIにテキストフィールドを置きたい場合、そのテキストフィールドをデータの保存先とマッピングすることができます。

01:19.740 --> 01:26.910
ユーザがテキストを更新すると、自動的にデータモデルが更新されます。

01:26.910 --> 01:29.880
データモデルが更新されればUIも更新される。

01:30.060 --> 01:33.990
データバインディングを見ると、unityはネイティブではそれをサポートしていない。

01:33.990 --> 01:40.680
しかし、UI toolkit for editorではそれが可能です。

01:40.680 --> 01:43.500
ランタイムのUnityにも搭載されます。

01:43.500 --> 01:44.910
とても楽しみです。

01:44.910 --> 01:48.810
これはデータバインディングを行うカスタムアプローチです。

01:48.930 --> 01:55.260
次に、このバウンシーボールゲームというシンプルなゲームを見てみましょう。

01:55.260 --> 01:56.130
計算機

01:56.130 --> 01:59.790
そして、このカウントアップの例は非常に入門的な方法です。

01:59.790 --> 02:03.450
まずは電卓から。

02:03.450 --> 02:05.130
では、ここからユニティーに飛び込んでみましょう。
