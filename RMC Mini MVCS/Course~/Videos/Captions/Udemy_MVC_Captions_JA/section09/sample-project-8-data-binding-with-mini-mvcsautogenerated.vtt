WEBVTT

00:00.200 --> 00:00.620
De acuerdo.

00:00.650 --> 00:06.410
A continuación, vamos a echar un vistazo a la vinculación de datos dentro de Unity con una arquitectura personalizada.

00:09.280 --> 00:13.990
Así que esta es la demo de vinculación de datos a un lado.

00:14.590 --> 00:22.750
Así que en la demostración de vinculación de datos, vamos a ver cómo en un proyecto que tiene MVC como añadido, ¿cómo se

00:22.750 --> 00:24.280
usted tiene la vinculación de datos?

00:24.280 --> 00:33.700
Ahora, la vinculación de datos está destinada a tener un patrón fácil de reutilizar para sincronizar valores a través de diferentes dominios.

00:33.700 --> 00:41.560
Así que si tienes dos clases y ambas tienen un valor de texto de mensaje y quieres que si uno de ellos cambia

00:41.560 --> 00:46.720
el valor para que la otra lo escuche, y si la primera lo escucha, entonces lo cambia, entonces

00:46.720 --> 00:47.650
la segunda lo oye.

00:47.650 --> 00:49.210
Así que teniendo dos vías de enlace.

00:49.210 --> 00:50.800
Veamos un ejemplo.

00:50.800 --> 00:52.780
Puedes imaginar lo útil que sería.

00:53.470 --> 00:59.830
Ahora bien, esta demostración es parte de la arquitectura MVC para Unity curso, que se puede encontrar el enlace de abajo.

00:59.830 --> 01:07.000
Es un curso de pago y está en descuento ahora porque estamos celebrando tener más de 6000 estudiantes ya.

01:07.420 --> 01:10.790
Esperemos que cuando veas esto, veas aún más estudiantes allí.

01:13.270 --> 01:20.200
El curso en sí cubre todo tipo de temas diferentes unidad, software, diseño, mini nvqs también.

01:20.200 --> 01:27.220
Y en el contenido extra hemos añadido diez demos más a lo que ya había.

01:27.220 --> 01:28.660
Y vamos a repasar una aquí.

01:29.080 --> 01:31.260
Vamos a ver el enlace de datos aquí.

01:31.270 --> 01:35.830
Así que vamos a seguir adelante y echar un vistazo a la vinculación de datos saltando en la unidad.

01:36.370 --> 01:38.800
Así que aquí dentro de Unity está el proyecto.

01:38.800 --> 01:44.980
Si usted sigue desde el git, el enlace git libre que tiene todo el código fuente, puede traer en el

01:44.980 --> 01:50.190
paquete con las instrucciones allí y luego sólo tienes que ir a las muestras y haga clic en importar.

01:50.300 --> 01:53.140
Ya he hecho eso aquí por el bien de este curso.

01:54.340 --> 01:58.760
Vayamos a la carpeta more y veamos el ejemplo de vinculación de datos.

01:58.780 --> 02:03.070
Así que tomemos un momento y miremos los datos, la estructura de las carpetas aquí.

02:03.070 --> 02:10.330
Así que dentro de la vinculación de datos, tengo una carpeta para con Mini porque algunas de las demos anteriores tengo una versión

02:10.330 --> 02:11.380
sin mini.

02:11.410 --> 02:17.360
Si quieres ver una aproximación tradicional en unity y luego con Mini esta solo la tengo hecha con

02:17.360 --> 02:19.100
Mini, que es lo que estamos viendo aquí.

02:19.220 --> 02:26.690
Luego, en la carpeta de recursos, tengo un par de prefabricados aquí para las dos vistas diferentes que van a ir

02:26.690 --> 02:27.770
en la aplicación.

02:28.670 --> 02:32.230
Tengo la escena, que ejecutaré en un segundo y luego tengo el código fuente.

02:32.240 --> 02:40.580
Ahora, como es común con estas demos y las mejores prácticas para muchos MVCs, cada vez que se ejecuta una demo en

02:41.120 --> 02:46.600
Unity, querrás estructurarla de forma que los archivos fuente para el controlador, el modelo, la vista y el servicio.

02:46.610 --> 02:48.920
tengan su propia carpeta dedicada.

02:48.920 --> 02:53.960
De esa manera usted puede ver fácilmente las diferentes separaciones de las preocupaciones.

02:54.790 --> 02:55.330
Genial.

02:55.930 --> 02:57.250
Así que vamos a ejecutar la demo aquí.

02:57.250 --> 02:58.450
La haré grande y bonita.

03:00.280 --> 03:01.810
Ahora, echemos un vistazo a esto.

03:01.810 --> 03:04.150
Aquí tenemos dos vistas diferentes.

03:04.150 --> 03:07.930
Podrías pensar que esto es parte de un diseño, pero en realidad hay dos prefabricados.

03:07.930 --> 03:16.450
Así que los ponemos ahí y queremos ser capaces de editar este de aquí y decir Hola mundo desde la izquierda.

03:16.450 --> 03:20.500
Y observa que ambos campos de texto se actualizan en tiempo real.

03:20.980 --> 03:25.030
Vayamos aquí y digamos que estoy a la derecha.

03:25.570 --> 03:28.270
Y puedes ver que ambos se actualizan.

03:28.270 --> 03:31.050
Así que tenemos dos vías de unión en el MVC.

03:31.060 --> 03:32.580
Veamos cómo se hace.

03:32.590 --> 03:40.270
Ahora, como pude haber mencionado en una parte anterior de esta serie de videos, Unity históricamente no hizo

03:40.270 --> 03:41.920
soporta ningún tipo de enlace bidireccional.

03:42.680 --> 03:49.370
Luego lo han añadido en el editor de herramientas de edición, y en el futuro llegará al tiempo de ejecución,

03:49.520 --> 03:52.520
especialmente como parte del conjunto de herramientas de interfaz de usuario.

03:52.520 --> 03:58.790
Así que no estoy usando el kit de herramientas de interfaz de usuario aquí, y esa característica para la vinculación bidireccional en tiempo de ejecución por Unity no es todavía

03:58.790 --> 04:04.010
disponible en el momento de esta grabación, así que he hecho una solución personalizada aquí, así que echemos un vistazo

04:04.010 --> 04:04.520
a eso.

04:07.820 --> 04:13.550
Así que aquí en la escena, tengo el mundo, que es un objeto de juego que sólo tiene la cámara y la iluminación

04:13.550 --> 04:14.120
en él.

04:14.330 --> 04:19.850
Luego tengo la vista izquierda, que si muevo la izquierda.

04:23.090 --> 04:23.930
No puedo ni de eso.

04:25.330 --> 04:25.810
De acuerdo.

04:25.810 --> 04:27.700
Y también tenemos la vista derecha.

04:27.730 --> 04:29.860
Y luego tenemos el ejemplo de vinculación de datos.

04:29.860 --> 04:33.620
Ahora el enlace de datos toma una referencia de las vistas izquierda y derecha.

04:33.640 --> 04:36.760
Así que vamos a empezar nuestro viaje de código aquí.

04:37.690 --> 04:39.400
Así que aquí está el mono-comportamiento.

04:39.400 --> 04:42.500
Este es un ejemplo ejecutando toda la escena.

04:42.520 --> 04:44.530
Tengo los dos campos serializados.

04:44.530 --> 04:47.790
Acabamos de ver la vista izquierda y la vista derecha.

04:47.800 --> 04:52.150
Y luego aquí en el inicio, voy a crear un nuevo contexto.

04:52.180 --> 04:59.080
Ahora, no hemos visto esto en demos anteriores y en el corazón del curso, no mostramos esta exacta

04:59.080 --> 05:02.470
flujo de trabajo, pero aquí estoy creando.

05:08.140 --> 05:08.620
Aquí.

05:08.620 --> 05:14.650
Estoy creando el contexto fuera del Mini y lo estoy pasando aquí.

05:15.010 --> 05:18.520
Y luego tengo la vista izquierda y la vista derecha.

05:19.120 --> 05:25.120
Así que he creado fuera y pasar el mismo valor en cada uno de los.

05:26.060 --> 05:27.050
Preocupaciones.

05:27.210 --> 05:33.200
Oh, en realidad, ahora que lo pienso, hay una demo diferente donde tenemos múltiples minis en

05:33.200 --> 05:35.960
el mismo proyecto y esto es prestado de eso.

05:35.960 --> 05:40.850
Así que crear el contexto fuera del mini no es explícitamente necesario.

05:40.850 --> 05:46.460
Aquí está para la otra demo llamada Minis Múltiples, a la que puedes echar un vistazo en la serie.

05:46.460 --> 05:50.020
Así que este comentario no es necesariamente necesario aquí.

05:50.030 --> 05:51.980
Ahora veamos el Mini.

05:53.020 --> 06:01.150
Así que aquí lo que hago es que tengo la vinculación de datos configurado en su propio mini, y el Mini aquí va a

06:01.150 --> 06:04.600
tomar referencias para la vista izquierda y la vista derecha y almacenarlas.

06:05.960 --> 06:10.010
Luego aquí abajo en el it's esta es la inicialización del Mini.

06:10.950 --> 06:12.660
Voy a configurar el modelo.

06:12.840 --> 06:15.840
Voy a configurar el modelo The View.

06:15.870 --> 06:16.860
Hay dos vistas.

06:16.890 --> 06:18.060
Una a la izquierda y otra a la derecha.

06:18.060 --> 06:24.730
Así que de nuevo, observe que son interfaces de usuario distintas y separadas y luego tendré el controlador aquí.

06:24.750 --> 06:31.320
Ahora, el controlador va a tomar una referencia al modelo y ambas vistas y como con todos los minis,

06:31.320 --> 06:33.840
el controlador es la más inteligente de las preocupaciones.

06:33.840 --> 06:38.490
Así que toma una referencia a las diferentes partes y es el controlador el que va a ser capaz de tener

06:38.490 --> 06:40.290
trabajando juntos.

06:41.160 --> 06:42.660
Así que aquí está el controlador.

06:43.230 --> 06:46.560
Creo que esta es la única preocupación que veremos en esta demo.

06:46.830 --> 06:49.920
Tomo la izquierda y la derecha, las guardo aquí.

06:49.920 --> 06:51.210
Almaceno el modelo.

06:51.480 --> 06:53.370
Luego aquí abajo.

06:54.400 --> 06:55.270
Ooh.

06:55.750 --> 06:58.100
Esperaba que hubiera más lógica aquí.

06:58.120 --> 06:59.560
Déjame pensarlo un segundo.

07:01.690 --> 07:03.040
Sí, supongo que la hay.

07:03.190 --> 07:04.840
Creé esto hace un rato.

07:05.800 --> 07:10.210
A menudo, ya sabes, lo que voy a mostrar en las vistas es cómo hacen la sincronización.

07:10.210 --> 07:15.550
Pero usted podría hacer el hundimiento de los dos valores para el campo de texto a la izquierda y el campo de texto en

07:15.550 --> 07:16.990
de la derecha en el controlador.

07:16.990 --> 07:18.940
Así que esperaba verlo aquí.

07:18.940 --> 07:21.220
Pero echemos un vistazo a las otras preocupaciones.

07:21.220 --> 07:22.510
Aquí está el modelo.

07:24.060 --> 07:26.430
Y el modelo en MVC.

07:28.290 --> 07:30.450
Es la más tonta de las preocupaciones.

07:30.450 --> 07:35.670
Así que si el controlador es el más inteligente, el más consciente, que tiene el contexto de la clase de todo el

07:35.670 --> 07:38.790
los modelos de situación están en el extremo más tonto de las cosas.

07:38.790 --> 07:41.130
Sólo almacena datos y ya está.

07:41.130 --> 07:44.040
Así que aquí va a almacenar una cadena de mensajes.

07:45.160 --> 07:47.950
Y va a empezar con ese valor inicial.

07:47.980 --> 07:50.110
Vimos que dice, edita este texto.

07:50.110 --> 07:53.080
Vamos a ejecutar la demo una vez más para que puedas ver que se establece.

07:54.460 --> 07:56.790
Luego veamos la vista izquierda y derecha.

07:56.800 --> 07:58.600
Aquí está la vista izquierda.

07:58.630 --> 08:05.820
Vamos a utilizar el comportamiento mono como a menudo queremos hacer para las cuestiones relacionadas con la interfaz de usuario.

08:05.830 --> 08:10.060
Es opcional extender el comportamiento mono en Mini, pero aquí queremos hacerlo.

08:10.940 --> 08:13.820
Y luego aquí abajo, aquí es donde va a estar el enlace.

08:13.820 --> 08:16.310
Así que déjame asegurarme de que esto está en la pantalla en un buen lugar.

08:16.310 --> 08:18.650
De nuevo, estamos en inicializar.

08:18.980 --> 08:22.970
Sólo quiero ser capaz de hacer un montón de espacio aquí para hablar de ello.

08:22.970 --> 08:23.410
De acuerdo.

08:23.420 --> 08:25.790
Lo primero que hago es preparar esto.

08:25.790 --> 08:33.560
Así que lo que hago es que tengo una referencia al modelo ahora en MVC.

08:33.800 --> 08:38.330
El controlador siempre puede acceder a las otras preocupaciones.

08:38.600 --> 08:45.410
Pero como una mejor práctica, desea limitar el acceso de otro modelo.

08:45.410 --> 08:48.440
Por ejemplo, a la vista y la vista al modelo.

08:48.440 --> 08:50.360
Tienes que ser muy consciente de ello.

08:50.360 --> 08:56.270
Aquí, estoy haciendo una elección consciente para que la vista, que es la clase en la que estamos, obtenga un

08:56.270 --> 08:57.380
referencia al modelo.

08:57.380 --> 09:03.590
Y la forma en que puedes hacerlo es preguntando al contexto que está implícitamente disponible para ti y

09:03.590 --> 09:08.630
decir, Hey, localizador de modelos, ve a buscarme una referencia al modelo que está en el juego.

09:08.660 --> 09:15.480
Se parece un poco a la inyección de dependencia, esta línea en particular aquí, pero no es exactamente eso

09:15.480 --> 09:17.100
solución universal.

09:17.130 --> 09:22.860
El contexto tiene localizadores sólo para los modelos para que cualquiera pueda obtenerlos si lo necesitamos.

09:22.890 --> 09:25.650
Así que aquí en la vista, obtenemos una referencia a ese modelo.

09:25.800 --> 09:30.030
Recuerde, ese modelo es sólo la celebración de la cadena de lo que los mensajes en pantalla.

09:30.880 --> 09:33.870
Entonces vamos a hacer la vinculación aquí.

09:33.880 --> 09:43.440
Así que si el modelo de datos para el mensaje cambia, entonces vamos a escuchar de nuevo a que a continuación.

09:43.450 --> 09:47.500
Así que cada vez que el modelo de datos cambie, lo escucharemos.

09:47.620 --> 09:51.940
Y cada vez que cambie la vista, lo escucharemos.

09:51.940 --> 09:54.430
Así que más abajo veremos el método para cada uno de ellos.

09:54.430 --> 09:55.420
Pero recuerda, estamos escuchando.

09:55.420 --> 09:58.810
Si el modelo cambia o si la vista cambia.

09:59.230 --> 10:02.800
Así que aquí abajo, veamos esto primero.

10:03.530 --> 10:10.100
Si el modelo de datos cambia, entonces actualizaremos la vista.

10:11.800 --> 10:18.160
Y aquí abajo, si la vista cambia, entonces actualizaremos el modelo.

10:18.160 --> 10:24.490
Así que cada uno de estos dos acaba de hacer el extremo opuesto de este vínculo de dos vías y eso es todo.

10:24.760 --> 10:30.340
Así que las tuercas y tornillos de este flujo en particular no son exclusivos de Mini.

10:30.370 --> 10:36.070
Podrías hacerlo fuera de Mini, pero las clases que ayudan a que todo suceda están incluidas aquí.

10:36.070 --> 10:43.540
Y es especialmente un tema interesante cuando hablamos de mini MVC porque la vinculación de datos es una de las principales

10:43.540 --> 10:44.850
más.

10:44.860 --> 10:50.440
Si usted tiene la vinculación de datos, a continuación, utilizando algo como mini MVC es aún más rápido y más fácil de configurar.

10:52.190 --> 10:54.020
Vamos a ejecutar la demo una vez más.

10:57.940 --> 10:59.470
Creo que he descomentado algo.

10:59.470 --> 11:00.880
Por eso estamos recompilando ahí.

11:00.910 --> 11:02.740
Así que aquí de nuevo, estamos corriendo.

11:02.740 --> 11:06.780
Cargamos desde el servicio, la edición de este texto en realidad que fue codificado.

11:06.790 --> 11:11.290
Tenemos el valor hardcoded y si escribo en el lado izquierdo, obtenemos eso.

11:11.290 --> 11:14.260
Y si digo hola en el lado derecho, se sincroniza.

11:14.260 --> 11:15.040
Así que ya está.

11:15.040 --> 11:19.900
Eso es vinculación de datos dentro de esta demo Unity MVC.
