WEBVTT

00:00.200 --> 00:00.620
よし

00:00.650 --> 00:06.410
次に、Unity内部のデータバインディングをカスタムアーキテクチャで見てみましょう。

00:09.280 --> 00:13.990
これがデータバインディングのデモです。

00:14.590 --> 00:22.750
データバインディングのデモでは、MVCを追加したプロジェクトで、どのようにデータバインディングを行うかを見ていきます。

00:22.750 --> 00:24.280
データバインディングがあるのか？

00:24.280 --> 00:33.700
データバインディングとは、異なるドメイン間で値を同期させるための、再利用しやすいパターンを意味します。

00:33.700 --> 00:41.560
つまり、2つのクラスがあり、どちらもメッセージテキストの値を持っていて、どちらかが変更された場合

00:41.560 --> 00:46.720
もし最初のクラスがそれを聞いて、それを変更したら

00:46.720 --> 00:47.650
2番目のものがそれを聞く。

00:47.650 --> 00:49.210
つまり双方向のバインディングがあるわけだ。

00:49.210 --> 00:50.800
では、例を見てみましょう。

00:50.800 --> 00:52.780
どれだけ便利か想像がつくだろう。

00:53.470 --> 00:59.830
このデモはUnityのためのMVCアーキテクチャコースの一部です。

00:59.830 --> 01:07.000
このコースは有料ですが、受講生が6000人を超えたため、現在割引中です。

01:07.420 --> 01:10.790
これをご覧になる頃には、さらに多くの受講生が集まっていることを期待しています。

01:13.270 --> 01:20.200
コース自体はユニティ、ソフト、デザイン、ミニNVQなど様々なトピックをカバーしています。

01:20.200 --> 01:27.220
また、追加コンテンツとして10個のデモを追加しました。

01:27.220 --> 01:28.660
そのうちのひとつを紹介しよう。

01:29.080 --> 01:31.260
データバインディングを見ていきます。

01:31.270 --> 01:35.830
それでは、unityに飛び込んでデータバインディングを見てみましょう。

01:36.370 --> 01:38.800
Unity内のプロジェクトです。

01:38.800 --> 01:44.980
git（ソースコード全体があるフリーのgitリンク）からたどると

01:44.980 --> 01:50.190
パッケージのインストラクションを参照し、samplesからimportをクリックします。

01:50.300 --> 01:53.140
このコースのために、すでにここでやっておいた。

01:54.340 --> 01:58.760
moreフォルダに移動して、データバインディングの例を見てみましょう。

01:58.780 --> 02:03.070
このフォルダの構造を見てみましょう。

02:03.070 --> 02:10.330
データバインディングの中にwith Miniというフォルダがあります。

02:10.330 --> 02:11.380
ミニなし

02:11.410 --> 02:17.360
unityでの伝統的なアプローチとMiniでのアプローチを見たいのであれば、私はこれしか持っていません。

02:17.360 --> 02:19.100
Miniはここで見ているものです。

02:19.220 --> 02:26.690
resourcesフォルダに、2つの異なるビュー用のプレハブがあります。

02:26.690 --> 02:27.770
を作成しました。

02:28.670 --> 02:32.230
このシーンはすぐに実行されますし、ソースコードもあります。

02:32.240 --> 02:40.580
このようなデモやMVCのベストプラクティスにありがちなことですが、1つのデモを実行するたびに

02:41.120 --> 02:46.600
Unityでは、コントローラ、モデル、ビュー、サービスのソースファイルを構造化します。

02:46.610 --> 02:48.920
もしあれば、それぞれ専用のフォルダを用意します。

02:48.920 --> 02:53.960
そうすることで、懸念事項の区切りがわかりやすくなります。

02:54.790 --> 02:55.330
かっこいい。

02:55.930 --> 02:57.250
それではデモを実行してみましょう。

02:57.250 --> 02:58.450
大きくしてみる

03:00.280 --> 03:01.810
では、これを見てみましょう。

03:01.810 --> 03:04.150
ここで2つの異なる景色を見ることができます。

03:04.150 --> 03:07.930
これは1つのレイアウトの一部だと思うかもしれませんが、実際には2つのプレハブがあります。

03:07.930 --> 03:16.450
そして、このプレハブを編集して、左からHello worldと表示できるようにしたいのです。

03:16.450 --> 03:20.500
そして、両方のテキストフィールドがリアルタイムで更新されることに注目してほしい。

03:20.980 --> 03:25.030
右から見てみましょう。

03:25.570 --> 03:28.270
両方が更新されるのがわかるだろう。

03:28.270 --> 03:31.050
つまり、MVCでは双方向のバインディングが可能なのです。

03:31.060 --> 03:32.580
では、その方法を見てみましょう。

03:32.590 --> 03:40.270
さて、このビデオシリーズの以前のパートでお話したかもしれませんが、Unityは歴史的に

03:40.270 --> 03:41.920
をサポートしていませんでした。

03:42.680 --> 03:49.370
しかし、Unityはそのようなことはなく、編集ツールのエディタに追加され、将来的にはランタイムにも対応する予定です、

03:49.520 --> 03:52.520
特にUIツールキットの一部としてね。

03:52.520 --> 03:58.790
だからここではUIツールキットは使っていないし、Unityによるランタイム双方向バインディングの機能もまだない。

03:58.790 --> 04:04.010
というわけで、カスタムソリューションを使ってみました。

04:04.010 --> 04:04.520
を見てみましょう。

04:07.820 --> 04:13.550
このシーンには、カメラとライティングを持つゲームオブジェクトであるThe Worldがあります。

04:13.550 --> 04:14.120
となっている。

04:14.330 --> 04:19.850
そして、左側のビューがあります。

04:23.090 --> 04:23.930
それすらできない

04:25.330 --> 04:25.810
よし

04:25.810 --> 04:27.700
そして右の景色も。

04:27.730 --> 04:29.860
データバインディングの例です。

04:29.860 --> 04:33.620
データバインディングは左と右のビューから参照を取ります。

04:33.640 --> 04:36.760
では、ここからコードの旅を始めましょう。

04:37.690 --> 04:39.400
これがモノビヘイバーです。

04:39.400 --> 04:42.500
これはシーン全体を動かす例です。

04:42.520 --> 04:44.530
2つのフィールドがシリアライズされています。

04:44.530 --> 04:47.790
左のビューと右のビューを見ました。

04:47.800 --> 04:52.150
そして、最初に新しいコンテキストを作成します。

04:52.180 --> 04:59.080
さて、これは以前のデモでは見られなかったもので、コースの中心部では、このような正確なものは表示されません。

04:59.080 --> 05:02.470
というワークフローがありますが、ここでは私が作成しています。

05:08.140 --> 05:08.620
ここで

05:08.620 --> 05:14.650
ミニの外でコンテキストを作成し、それをここに渡しています。

05:15.010 --> 05:18.520
そして、左のビューと右のビューがあります。

05:19.120 --> 05:25.120
それぞれ同じ値を渡します。

05:26.060 --> 05:27.050
気になるところ。

05:27.210 --> 05:33.200
そういえば、別のデモで複数のミニを

05:35.960 --> 05:40.850
そのため、ミニの外でコンテキストを作成することは明示的には必要ありません。

05:40.850 --> 05:46.460
これはMultiple Minisと呼ばれる他のデモのもので、シリーズで見ることができる。

05:46.460 --> 05:50.020
ですから、このコメントは必ずしもここでは必要ではありません。

05:50.030 --> 05:51.980
それではミニを見てみましょう。

05:53.020 --> 06:01.150
ここではデータバインディングをミニにセットアップしています。

06:01.150 --> 06:04.600
左のビューと右のビューの参照を取って保存します。

06:05.960 --> 06:10.010
そして、ミニの初期化です。

06:10.950 --> 06:12.660
モデルをセットアップします。

06:12.840 --> 06:15.840
モデルを1つ設定します。

06:15.870 --> 06:16.860
ビューは2つ

06:16.890 --> 06:18.060
左と右だ

06:18.060 --> 06:24.730
そしてコントローラーがここにある。

06:24.750 --> 06:31.320
コントローラーはモデルと両方のビューを参照します、

06:31.320 --> 06:33.840
コントローラーが一番賢い。

06:33.840 --> 06:38.490
そのため、様々なパーツを参照し、コントローラーに

06:41.160 --> 06:42.660
これがコントローラーだ

06:43.230 --> 06:46.560
このデモでは、この部分しか見ていません。

06:46.830 --> 06:49.920
左と右をここに保存します。

06:49.920 --> 06:51.210
モデルを保存します。

06:51.480 --> 06:53.370
そしてこの下。

06:54.400 --> 06:55.270
おおっ

06:55.750 --> 06:58.100
もっとロジックがあると思ったんだけどな。

06:58.120 --> 06:59.560
ちょっと考えさせてくれ。

07:01.690 --> 07:03.040
そうだね。

07:03.190 --> 07:04.840
ちょっと前に作ったものです。

07:05.800 --> 07:10.210
よくあることだが、これから紹介するのは同期を取る方法だ。

07:10.210 --> 07:15.550
しかし、左のテキストフィールドと右のテキストフィールドの2つの値をシンクすることができます。

07:15.550 --> 07:16.990
右側のテキストフィールドの2つの値をコントローラの中でシンクすることができます。

07:16.990 --> 07:18.940
というわけで、ここで見ることをちょっと期待していました。

07:18.940 --> 07:21.220
しかし、他の懸念事項を見てみよう。

07:21.220 --> 07:22.510
これがそのモデルだ。

07:24.060 --> 07:26.430
そしてMVCにおけるモデルです。

07:28.290 --> 07:30.450
ってのが一番気になる。

07:30.450 --> 07:35.670
だから、コントローラが一番賢くて、全体のコンテキストを把握している。

07:35.670 --> 07:38.790
状況モデルは愚かな方だ。

07:38.790 --> 07:41.130
ただデータを保存するだけだ。

07:41.130 --> 07:44.040
ここではメッセージの文字列を保存するんだ。

07:45.160 --> 07:47.950
この初期値からスタートします。

07:47.980 --> 07:50.110
このテキストを編集します。

07:50.110 --> 07:53.080
もう一回デモを実行して、設定されているのを確認してください。

07:54.460 --> 07:56.790
次に左右の表示を見てみましょう。

07:56.800 --> 07:58.600
左から見てみましょう。

07:58.630 --> 08:05.820
UI関連でよくやりがちなmonoビヘイビアを使用します。

08:05.830 --> 08:10.060
Miniでmonoビヘイビアを拡張するのはオプションですが、ここでは拡張したいと思います。

08:10.940 --> 08:13.820
そして、この下にバインディングがあります。

08:13.820 --> 08:16.310
だから、これが画面上のいい場所にあることを確認しておこう。

08:16.310 --> 08:18.650
もう一度、初期化します。

08:18.980 --> 08:22.970
ここで余裕を持って話せるようにしたいんだ。

08:22.970 --> 08:23.410
オーケー

08:23.420 --> 08:25.790
まず、これをセットアップします。

08:25.790 --> 08:33.560
MVCでモデルを参照するようにします。

08:33.800 --> 08:38.330
コントローラーは常に他の関心事にアクセスできる。

08:38.600 --> 08:45.410
しかし、ベストプラクティスとして、他のモデルからのアクセスを制限したい。

08:45.410 --> 08:48.440
例えば、ビューやビューからモデルへのアクセス。

08:48.440 --> 08:50.360
そのあたりはよく理解しておきたい。

08:50.360 --> 08:56.270
ここでは、今いるクラスであるビューに、意識的に

08:56.270 --> 08:57.380
モデルへの参照。

08:57.380 --> 09:03.590
そのためには、暗黙のうちに用意されているコンテキストに問い合わせて

09:03.590 --> 09:08.630
モデルロケーター、ゲーム内のモデルへのリファレンスを取ってきてくれ。

09:08.660 --> 09:15.480
この行は依存性注入のように見えますが、そうではありません。

09:15.480 --> 09:17.100
普遍的な解決策ではない。

09:17.130 --> 09:22.860
このコンテクストにはモデルのロケーターがあるので、必要であれば誰でも取得することができます。

09:22.890 --> 09:25.650
ビューでは、そのモデルへの参照を取得するだけです。

09:25.800 --> 09:30.030
このモデルは、画面上のメッセージの文字列を保持しているだけです。

09:30.880 --> 09:33.870
そして、バインディングを行います。

09:33.880 --> 09:43.440
メッセージのデータモデルが変更された場合は、その内容を以下でリッスンします。

09:43.450 --> 09:47.500
つまり、データモデルが変更されれば、いつでもそれを聞くことができる。

09:47.620 --> 09:51.940
そして、ビューが変更されたら、それを聞くことになります。

09:51.940 --> 09:54.430
それでは、それぞれのメソッドを見ていきましょう。

09:54.430 --> 09:55.420
しかし、私たちが聞いていることを忘れないでください。

09:55.420 --> 09:58.810
モデルが変更されたり、ビューが変更された場合。

09:59.230 --> 10:02.800
では、まずこの下を見てみましょう。

10:03.530 --> 10:10.100
データモデルが変更されたら、ビューを更新します。

10:11.800 --> 10:18.160
そしてこの下で、ビューが変更されたらモデルを更新します。

10:18.160 --> 10:24.490
つまり、この2つはそれぞれ、双方向バインディングの反対側を行うだけです。

10:24.760 --> 10:30.340
つまり、この特殊な流れはミニに限ったことではないのだ。

10:30.370 --> 10:36.070
ミニ以外でもできることですが、それを実現するためのクラスがここに含まれています。

10:36.070 --> 10:43.540
データバインディングは、ミニMVCについて話すときに特に興味深いトピックです。

10:43.540 --> 10:44.850
さらに

10:44.860 --> 10:50.440
データ・バインディングがあれば、ミニMVCのようなものを使えば、さらに素早く簡単にセットアップができます。

10:52.190 --> 10:54.020
では、もう一度デモを実行してみましょう。

10:57.940 --> 10:59.470
何かコメントを外してしまったようだ。

10:59.470 --> 11:00.880
だから再コンパイルしてるんだ

11:00.910 --> 11:02.740
ここでもう一度、実行します。

11:02.740 --> 11:06.780
このテキストはハードコードされています。

11:06.790 --> 11:11.290
ハードコードされた値を左側に入力すると、このようになります。

11:11.290 --> 11:14.260
右側で「こんにちは」と言えば同期される。

11:14.260 --> 11:15.040
これで完了です。

11:15.040 --> 11:19.900
これがこのUnity MVCデモ内でのデータバインディングです。
