WEBVTT

00:00.080 --> 00:09.410
ミニMVCシステムのデモと、同じプロジェクトに複数のミニを持つ方法を見てみましょう。

00:09.440 --> 00:11.750
さて、なぜそんなことをする必要があるのでしょうか？

00:14.180 --> 00:15.380
いい質問ですね。

00:15.380 --> 00:17.760
そのことを考えるために水を飲む必要があったんだ。

00:17.780 --> 00:27.650
一般的にプロジェクトで、MVCのような既成のアーキテクチャを導入する理由は、特に次のようなものです。

00:27.650 --> 00:35.600
のような既成のアーキテクチャを導入するのは、プロジェクトをより保守しやすくするためです。

00:35.600 --> 00:38.960
プロジェクトが大きくなるにつれて、よりスケーラブルになる。

00:39.700 --> 00:46.810
さて、最初にすることは、ミニ構造体を作成し、その中にモデルビューを作成することです。

00:46.810 --> 00:48.660
コントローラとサービスです。

00:48.670 --> 00:53.230
私たちのデモプロジェクトのほとんどは、このレベルの複雑さを持っています。

00:53.590 --> 01:00.130
機能セットが大きくなるにつれて、プロジェクトにもう少し複雑さを加えたい場合は、次のようにすることもできます。

01:00.130 --> 01:05.350
別のモデル、別のビュー、別のコントローラ、別のサービスを追加すればいいんだろ？

01:05.350 --> 01:12.430
つまり、同じミニの中に、好きなだけ多くの関心事を持つことができる。

01:12.430 --> 01:18.910
01:12.430→01:18.910また、複数のミニを同じプロジェクトに参加させることもできる。

01:18.910 --> 01:24.970
例えば、パックマンをプレイするゲームのループを想像してみてください、

01:24.970 --> 01:31.480
動き回り、パワーペレットを掴み、敵の目を奪う......そんなコアなゲームロジックがすべて

01:31.480 --> 01:34.810
01:31.480→01:34.810→01:34.810→01:34.810

01:34.810 --> 01:38.770
そして、今度は全体をメタループさせる必要がある。

01:38.770 --> 01:44.600
(´・ω・｀)複数の世界、ソーシャル機能、マルチプレイが必要なんだ、

01:44.600 --> 01:50.570
01:44.600 --> 01:50.570 ハイスコア表が必要だ。

01:50.570 --> 01:56.120
を追加することもできるし、メタゲームであるミニゲームを別に作って、それを

01:56.120 --> 02:02.030
(勿論、"play "と "mixi "は別物です。)

02:02.030 --> 02:09.260
ミニMVCを導入すれば、プロジェクトの規模を拡大する方法はいくらでもある。

02:09.260 --> 02:10.340
をプロジェクトに組み込むことができるのです。

02:10.340 --> 02:15.530
それでは、1つのデモプロジェクトに複数のミニを組み込んだデモを見てみましょう。

02:15.530 --> 02:21.230
これはUnityコースのMVCアーキテクチャの一部です。

02:21.230 --> 02:23.960
MVCとはモデル・ビュー・コントローラの略です。

02:23.990 --> 02:27.410
ハイレベルな内容がさらに深くここにあります。

02:27.410 --> 02:33.650
コースの内容を見ると、さまざまなサンプルプロジェクトがあることがわかります。

02:33.650 --> 02:40.910
このコースでは、シンプルな時計の作り方、ログインの作り方、ローラーボールのユニティデモの作り方を説明します。

02:40.940 --> 02:46.400


02:46.400 --> 02:47.030
点

02:47.030 --> 02:48.830
unityの定番プロジェクトです。

02:48.830 --> 02:55.100
このコースでは、ミニMVCであなたのために行われ、カスタムサンプルプロジェクトもあります。

02:55.100 --> 02:58.340
このようなデモが追加されました。

02:58.340 --> 03:03.380
その上に10種類ほどありますが、ここで注目するのはマルチです。

03:03.410 --> 03:04.040
ミニ

03:04.040 --> 03:06.200
それでは、Unityの内部を見てみましょう。

03:06.860 --> 03:08.840
ここがUnityの内部です。

03:08.840 --> 03:14.930
コースに参加し、コースに従えば、ダウンロードできます。

03:14.930 --> 03:22.820
もしGitHubから無料のコードをダウンロードしているのであれば、ミニMVCはあなたの手元にあるはずです。

03:22.820 --> 03:28.550
パッケージマネージャーからサンプルに移動し、サンプルをインポートして

03:28.550 --> 03:30.260
そうすれば、これから見ることができるようになります。

03:30.260 --> 03:32.000
そして、それはすでに私のためにここで行われているのです。

03:32.000 --> 03:35.390
さらにフォルダを見ると

03:37.260 --> 03:40.350
ここには複数のミニがありますよね？

03:40.350 --> 03:42.060
これが設定したものです。

03:44.070 --> 03:49.350
複数のミニで、まずはシーンを動かしてみましょう。

03:51.320 --> 03:59.300
左側のミニは画面の左側にあるビューモデルコントローラーで

03:59.300 --> 04:01.870
右のミニは完全に独立したミニです。

04:01.880 --> 04:08.960
もし、このコースの以前のビデオや、このトピックの以前のビデオを見ているのであれば

04:08.960 --> 04:14.960
をご覧になっている方ならお分かりになると思いますが、通常、各デモではミニを1つずつ使用します。

04:14.960 --> 04:21.140
しかし、どのように規模を拡大できるかという話や、数分前に述べたようなオプションの話については、またの機会に、

04:21.140 --> 04:25.820
このデモは2つのミニを映している。

04:26.210 --> 04:32.240
左側は画面の50%程度、右側は50%程度です。

04:32.240 --> 04:35.180
レイアウトとかも似てるしね。

04:35.180 --> 04:39.620
(´・ш・)そうなんだ..........................

04:39.620 --> 04:45.740
しかし、必ずしも論理的、意味的に似ている必要はない。

04:45.740 --> 04:46.940
一つでもいい

04:46.940 --> 04:51.450
繰り返しますが、それはあくまでゲームの核となるロジックであり、その周りのメタであるものです。

04:51.480 --> 04:57.210
このように、ゲーム体験の10％を占めるものと、90％を占めるものがあります。

04:57.210 --> 04:58.920
2つ以上あってもいい。

04:58.950 --> 05:01.860
ミニを3つも4つも5つも作ればいい。

05:01.890 --> 05:05.340
ミニのユニティパッケージを作ることも可能です。

05:07.260 --> 05:08.460
配布する際に。

05:08.460 --> 05:14.670
そして、ミニベースのプロジェクトやミニベースでないプロジェクトを持っている人は、そのパッケージを持ち込むことができる。

05:14.670 --> 05:15.750
そしてすべてが機能する。

05:15.750 --> 05:20.310
だから、ミニは自分たちの小さな世界だと思っていいし、どう統合するかは自由自在なんだ。

05:20.400 --> 05:22.200
では、どうするか。

05:22.850 --> 05:26.150
左側のカウンターを増やすボタンをクリックします。

05:27.020 --> 05:30.290
右のミニカウンターが更新されます。

05:30.560 --> 05:32.720
このように、いろいろな構成が考えられます。

05:32.750 --> 05:38.600
ここではやや恣意的な分割例だが、左のデモのために、次のようになる。

05:38.600 --> 05:41.710
入力され、右側ではビューにレンダリングされる。

05:41.720 --> 05:43.670
では、このシーンがどのようにセットアップされているのか見てみよう。

05:44.860 --> 05:50.560
ここではカメラとライトを隠すだけの世界にしています。

05:50.560 --> 05:51.550
05:51.550 --> 05:51.550

05:51.850 --> 05:59.740
そして、左側が先ほどの部分、右側がその部分です。

05:59.740 --> 06:01.150
06:01.150 --> 06:01.180 --> 06:01.180

06:01.180 --> 06:03.760
それぞれ統一されたキャンバスです。

06:03.760 --> 06:04.690
気になるなら

06:04.780 --> 06:10.180
そしてこの下にマルチミニの例があります。

06:10.180 --> 06:11.740
これはモノビヘイバーですね。

06:11.740 --> 06:18.550
左側のビューへの参照と、右側のビューへの参照を渡すだけです。

06:18.550 --> 06:24.760
への参照を渡すだけだ。そうすれば、デモはそれらを必要な方法でリンクさせることができる。

06:25.060 --> 06:27.850
まずはミニの例を見てみよう。

06:29.080 --> 06:30.360
少しズームアウト。

06:31.910 --> 06:33.380
ザマァって感じですね。

06:33.920 --> 06:35.600
シリアライズされたフィールドを取る。

06:37.520 --> 06:38.900
左右の

06:40.620 --> 06:42.180
そして

06:42.210 --> 06:46.020
このデモではかなり基本的で重要なことです。

06:46.740 --> 06:56.100
ミニの外側にコンテキストを作成し、同じコンテキストを左のミニに渡す。

06:56.100 --> 06:57.000
右のミニ

06:57.090 --> 06:58.740
それがなぜ重要なのか？

06:58.860 --> 07:05.610
文脈は、人生における典型的な言葉の文脈と同じように、決定的な意味を持つ。

07:05.640 --> 07:12.630
文脈によって、どのような選択肢や可能性が提示されるかが決まるのだ。

07:12.660 --> 07:18.580
つまり、同じコンテクストを左と右に渡せば、お互いに意思疎通ができるわけだ。

07:18.600 --> 07:24.630
例えば、お互いにコマンドを送ったり、モデルへの参照を取得したりすることができる。

07:24.660 --> 07:26.790
基本的に一つの世界で生きている

07:26.820 --> 07:28.980
もしそうなら

07:29.990 --> 07:36.140
コンテクスト1とコンテクスト2があり、1を左に、2を右に渡した。

07:36.170 --> 07:39.530
そうすると、左と右は会話できない。

07:39.770 --> 07:46.310
これはオブジェクト指向プログラミングのカプセル化の一部であり、次のように強化されている。

07:46.340 --> 07:47.330
07:47.330 --> 07:47.330

07:47.330 --> 07:53.150
しかし、通信ができるようにしたいのであれば、両方に全く同じ1つの参照を渡すことになる。

07:53.600 --> 07:54.080
なるほど。

07:54.080 --> 07:59.630
では、左側の例を見てみましょう。左側のビューで、先ほどのコンテキストを取り込みます。

07:59.630 --> 08:00.470
で議論した。

08:03.770 --> 08:06.800
そして初期化を行います。

08:06.800 --> 08:09.060
では、初期化の様子を見てみましょう。

08:09.080 --> 08:15.560
ここでは、コメントにあるような様々なオプションがあります。

08:15.560 --> 08:17.720
いろいろなことができる

08:17.720 --> 08:21.320
しかし、私がここでやっているのは、この中にモデルを作ることです。

08:21.440 --> 08:29.690
その普遍的なコンテキストをモデルに渡して、そのコンテキストをビューに渡して、それから

08:29.690 --> 08:30.620
左のコントローラー

08:30.620 --> 08:32.480
それでは、左のコントローラを見てみましょう。

08:32.480 --> 08:35.000
モデルとビューを参照します。

08:35.030 --> 08:42.500
モデルはデータストレージであり、ビューはユーザーへのレンダリングである。

08:42.500 --> 08:43.160
ユーザー

08:44.030 --> 08:51.500
そしてこの下にあるのは、「左のビュー、ユーザーがクリックするたびにインクリメントされます。

08:51.500 --> 08:53.390
ボタンが押されたら、それを教えてくれ。

08:54.140 --> 08:59.300
そして、この下にある、ボタンがクリックされ、そのことを知るたびに、私は

08:59.300 --> 09:00.960
ビューを更新します。

09:00.980 --> 09:01.530
すみません。

09:01.550 --> 09:02.660
モデルを更新します。

09:02.720 --> 09:05.330
その値を追加することで

09:06.020 --> 09:08.330
右側を見てみましょう。

09:11.730 --> 09:13.410
レイ・ミニへのコメント

09:13.650 --> 09:15.240
これで、私はここにいる。

09:15.240 --> 09:16.140
戻ってきた

09:16.140 --> 09:20.160
左側は、クリックするとモデルが更新されます。

09:20.400 --> 09:22.050
次に右を見てみましょう。

09:22.050 --> 09:26.160
先ほどと同じように、右側のビューをコンテキストに保存します。

09:26.190 --> 09:28.320
今度は少し違うことをします。

09:28.500 --> 09:35.940
独自のモデルを作成するのではなく、「おい、コンテキスト、すでにモデルを持っているのか？

09:35.940 --> 09:37.560
と言うのです。

09:37.560 --> 09:40.530
左が作成したところなので、あることは分かっています。

09:40.530 --> 09:46.770
そして、ここで、「右側のビュー、これがあなたのコンテキストです。

09:46.770 --> 09:48.510
普遍的な共有コンテキストです。

09:48.510 --> 09:50.550
そして、適切なコントローラを作成します。

09:50.670 --> 09:51.810
それを見てみましょう。

09:52.710 --> 09:57.120
右のコントローラーは

09:58.880 --> 10:04.550
左のコントローラーは、「ユーザーがボタンをクリックしましたか？

10:04.640 --> 10:08.300
こちらは、ヘイ、モデル、モデルが変わったか？

10:08.690 --> 10:13.550
そしてこの下は、モデルが変更されたらコマンドを送信します。

10:14.530 --> 10:23.560
このように、コマンドの有用性やモデルと直接会話する方法について、さまざまな例を紹介しました。

10:24.160 --> 10:29.920
これらのデモを見ていると、しばしば異なるオプションがあることに気づくだろう。

10:29.920 --> 10:31.180
を伝えている。

10:33.720 --> 10:37.500
このデモでやっているのはコマンドの実行だ。

10:37.530 --> 10:46.380
さて、このシリーズでコマンドについて見てみると、コマンドとは再利用可能な命令の集合だと考えることができる。

10:46.380 --> 10:48.870
コンテクストを通して送られる

10:48.870 --> 10:54.350
そして、そのコマンドが発生するたびに、「おい、そのコマンドを聞きたいんだけど」と、どんな関係者でも言うことができるのだ。

10:54.360 --> 10:58.140
この場合は、カウンターが変更されたコマンドを呼び出している。

10:58.140 --> 11:01.500
もしコンテキストの誰かがそれを聞きたければ、聞くことができる。

11:02.010 --> 11:03.500
今回のデモはここまで。

11:03.510 --> 11:05.550
もう一回、走りだけを見てみましょう。

11:06.990 --> 11:10.080
ここでも左側が入力を受けている。

11:10.080 --> 11:15.240
インクリメント・ボタンを1、2、3とクリックすると、右側に出力が表示されます。

11:15.240 --> 11:19.170
右側にモデルの値が表示されますね。

11:20.230 --> 11:20.950
以上だ。
