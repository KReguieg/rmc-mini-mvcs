WEBVTT

00:00.170 --> 00:00.500
De acuerdo.

00:00.500 --> 00:03.080
Aquí, echemos un vistazo a la demo de la pelota saltarina.

00:03.110 --> 00:05.900
Estoy un poco delante de la palabra demo, pero ahí está.

00:05.900 --> 00:09.580
Así que esto es parte del curso de mini mvc.

00:09.590 --> 00:14.330
Este es un curso de arquitectura unity que está disponible para su compra.

00:14.330 --> 00:19.970
Y todo el código que estamos mostrando aquí, incluyendo el código completo para el curso, está disponible gratuitamente en

00:19.970 --> 00:20.510
GitHub.

00:20.510 --> 00:21.950
Así que puedes echarle un vistazo.

00:21.950 --> 00:30.620
El enlace de abajo de este curso se trata de que hacer la arquitectura dentro de Unity, la vista del modelo y el controlador

00:30.620 --> 00:31.160
en él.

00:31.160 --> 00:36.560
Vamos a cubrir la introducción del curso, vamos a hablar de la unidad, vamos a ver el diseño de software.

00:36.560 --> 00:42.740
Echemos un vistazo a la siguiente diapositiva para profundizar aún más en el diseño de software, veremos los principios de diseño.

00:42.740 --> 00:44.780
Nos fijamos en los patrones de diseño.

00:44.780 --> 00:46.160
¿Qué son esas cosas?

00:46.160 --> 00:49.310
Buscamos formas de diagramar nuestros diseños.

00:49.310 --> 00:56.090
Con UML, miramos todas las diferentes opciones arquitectónicas para la unidad, y luego aterrizamos en mini MVCs,

00:56.120 --> 01:01.170
que es una arquitectura libre de encargo como la solución principal.

01:01.850 --> 01:05.150
Luego hay cuatro proyectos de ejemplo diferentes incluidos en el curso.

01:05.150 --> 01:07.790
Pero hoy vamos a repasar aún más demos.

01:07.790 --> 01:09.920
Además de esas, creo que he añadido diez más.

01:09.950 --> 01:13.040
Vamos a repasar la demo de la pelota saltarina.

01:13.040 --> 01:14.450
Echémosle un vistazo.

01:14.870 --> 01:17.240
Aquí estoy en el proyecto de ejemplo.

01:17.240 --> 01:23.540
Si usted ha conseguido el proyecto de ejemplo aquí, el mini MVC, y siguió las instrucciones de la Git

01:23.540 --> 01:28.430
repo, a continuación, entrar en las muestras aquí y sólo importar las muestras.

01:28.430 --> 01:30.350
Ahora ya he hecho eso para nosotros aquí.

01:30.380 --> 01:37.640
Podemos ver las muestras y podemos ver aquí, en la carpeta more, la mini pelota saltarina.

01:37.640 --> 01:39.380
Vamos a verlas.

01:40.520 --> 01:41.810
Y aquí está la demo.

01:41.810 --> 01:44.120
Vamos a ejecutar la demo para empezar.

01:46.100 --> 01:47.690
Se está reproduciendo un poco de audio.

01:47.690 --> 01:49.160
No estoy seguro de que puedas oírlo.

01:49.950 --> 01:59.220
Pero todo lo que está haciendo es utilizar la física de Unity para hacer rebotar una pelota en una superficie y luego actualiza la interfaz de usuario.

01:59.250 --> 02:02.060
Ahora, no hay interactividad en esta demo.

02:02.070 --> 02:04.500
De hecho, creo que puedo pulsar la barra espaciadora si me acuerdo.

02:05.320 --> 02:05.530
Ahora

02:06.610 --> 02:08.410
Ahora no hay interactividad.

02:08.980 --> 02:14.140
Así que todo lo que hace aquí es correr por su cuenta y usar algo de física.

02:14.140 --> 02:18.400
Así que puedes echar un vistazo a cómo interactúa la física y puedes ver que la interfaz de usuario se actualiza

02:18.400 --> 02:18.690
allí.

02:18.700 --> 02:20.530
Así que echemos un vistazo a cómo está estructurado.

02:22.980 --> 02:28.410
Así que aquí en la escena, tenemos un objeto de juego mundo que sólo oculta la cámara y la luz, que son

02:28.410 --> 02:29.490
no muy interesantes.

02:29.520 --> 02:36.630
Luego tenemos la vista de la pelota saltarina, que tiene todos los gráficos que vemos allí y también la interfaz de usuario.

02:36.660 --> 02:38.760
Veamos los elementos de la interfaz de usuario.

02:38.790 --> 02:42.090
Tiene el título y el estado.

02:42.090 --> 02:47.550
Así que esta es la vista contiene todo lo que vemos visualmente y La Vista también reproduce el audio.

02:47.580 --> 02:52.770
Ahora no estoy seguro de si en la grabación se oye el audio, pero va rebotando, rebotando,

02:52.770 --> 02:54.760
rebota y hace un poco de ruido.

02:54.780 --> 02:56.760
Eso es todo.

02:57.420 --> 03:00.540
Ahora echemos un vistazo al ejemplo.

03:00.540 --> 03:04.050
Este es un mono-comportamiento llamado el mini ejemplo de la pelota saltarina.

03:04.050 --> 03:09.810
Y todo lo que hago es arrastrar la vista como la única referencia que necesita tomar aquí.

03:09.810 --> 03:12.540
Y entonces esto está apagado y listo para funcionar.

03:12.540 --> 03:14.190
Veamos el código fuente.

03:16.110 --> 03:17.810
Aleja un poco el zoom aquí.

03:17.820 --> 03:19.950
Aquí está el ejemplo.

03:20.040 --> 03:23.970
El ejemplo va a tomar la vista como un campo serializado.

03:24.150 --> 03:27.840
A continuación, sólo va a empezar en el inicio aquí.

03:27.840 --> 03:31.920
Va a crear una nueva mini pelota saltarina y pasar en la vista.

03:31.920 --> 03:37.290
Así que Mini aquí en esta terminología es la envoltura para toda la aplicación.

03:37.290 --> 03:41.940
Así que cada vez que veas Mini en el código fuente, se supone que es la estructura más padre.

03:41.940 --> 03:45.420
Y dentro de ella, tiene varios elementos, incluyendo La Vista.

03:45.870 --> 03:47.460
Veámoslo a continuación.

03:50.920 --> 03:54.250
Así que abriendo La vista.

03:56.600 --> 03:58.280
La vista se va a extender.

03:58.310 --> 03:58.860
Lo siento.

03:58.880 --> 04:00.890
Voy a abrir el Mini para empezar.

04:01.370 --> 04:04.580
Así que en el Mini cojo el elemento vista.

04:04.610 --> 04:07.040
También tiene un controlador de audio allí.

04:07.040 --> 04:11.180
Y esto es lo que hacemos dentro de la inicialización del mini.

04:11.210 --> 04:19.700
Vamos a crear un contexto, un servicio de controlador de modelo, y va a conectarlos todos juntos

04:19.700 --> 04:21.400
aquí en esta línea.

04:21.410 --> 04:28.040
Así que cada vez que veas que el controlador se inicializa en el mini mundo, el controlador es el más,

04:28.430 --> 04:32.750
digamos, la preocupación más informada de todo el sistema.

04:32.750 --> 04:36.020
El mini tiene cuatro partes en su interior.

04:36.020 --> 04:40.670
Una de esas partes es el controlador, y el controlador es la parte más informada.

04:40.670 --> 04:46.550
Así que toma una referencia a las otras tres preocupaciones y es lo que va a decir, Hey, modelo de datos, lo que es

04:46.550 --> 04:47.450
tu valor?

04:47.480 --> 04:50.060
Hey vista, ¿alguien ha interactuado contigo?

04:50.090 --> 04:52.430
Hey servicio, ¿puedes cargar algo por mí?

04:52.430 --> 04:54.830
Es el controlador el que va a unir todo eso.

04:55.520 --> 04:57.780
Echemos un vistazo rápido al modelo.

04:58.170 --> 05:04.650
El modelo va a mantener valores para ¿cuántas veces hemos contado y cuál es el máximo?

05:04.650 --> 05:07.560
Así que va a decir uno de tres, dos de tres.

05:07.560 --> 05:12.510
Y cuando llegue a tres de tres, se reiniciará uno de tres, dos de tres.

05:12.510 --> 05:14.580
Así es como funcionan esos dos valores.

05:14.610 --> 05:17.460
Aquí, observa que ambos están en cero.

05:17.460 --> 05:21.360
Así que vamos a echar un vistazo a lo que establece el máximo de tres en un momento.

05:22.020 --> 05:23.700
Ahora veamos el servicio.

05:23.700 --> 05:27.960
Así que la capa de servicio es lo que está destinado a llamar a cualquier dato externo.

05:27.960 --> 05:34.620
Si tu juego no necesita ningún dato externo desde el principio o nunca, puedes omitir este paso.

05:34.620 --> 05:36.150
No necesitas tener un servicio.

05:36.150 --> 05:43.080
Pero normalmente los juegos de hoy en día llaman a servicios back-end, archivos locales que son externos al propio juego,

05:43.080 --> 05:49.140
como vemos aquí, y este concepto de servicio es ideal para eso.

05:49.140 --> 05:56.850
Así que aquí todo lo que va a hacer es cargar un archivo de texto local y luego parsear ese valor en

05:56.850 --> 05:58.830
el recuento de rebotes.

05:58.860 --> 06:01.530
Max Veamos este archivo de texto.

06:01.710 --> 06:04.200
Está aquí en textos de recursos.

06:04.380 --> 06:07.440
Si lo abro, empieza con el valor tres.

06:07.440 --> 06:11.280
Así que parece un poco tonto aquí que tendría un valor.

06:11.310 --> 06:14.010
¿Por qué no simplemente codificar tres en Do sostenido?

06:14.040 --> 06:17.580
Esto es sólo una demostración arbitraria.

06:17.580 --> 06:21.330
Pongamos algunos datos fuera de la aplicación y carguémoslos.

06:21.330 --> 06:24.830
También podría haber cargado esto desde el back end, por ejemplo.

06:24.840 --> 06:26.190
Así que eso es todo para el servicio.

06:26.220 --> 06:29.700
Sólo va a ir a cargar ese valor tres y pasarlo de nuevo al controlador.

06:30.430 --> 06:31.780
Ahora veamos el controlador.

06:31.810 --> 06:36.010
Esto es lo último que tenemos que mirar en el controlador.

06:36.740 --> 06:40.820
Heredamos del controlador base, como dice el comentario aquí.

06:41.060 --> 06:44.570
Por cierto, siempre base es opcional a extender.

06:44.570 --> 06:48.950
Sólo te va a dar un poco de funcionalidad libre, pero se puede empezar a ver a través de estos ejemplos

06:48.950 --> 06:53.590
las pocas líneas de código que hay para configurar esta arquitectura.

06:53.600 --> 06:59.210
Bueno, yo digo que también alguien mirando este ejemplo podría decir, Hey, yo podría hacer rebotar una pelota con

06:59.210 --> 07:02.690
un mono-comportamiento ¿por qué necesito estas otras clases?

07:02.690 --> 07:08.060
Pero de nuevo, el ejemplo aquí es que estabas aprendiendo fundamentos en un caso de uso muy simple.

07:08.060 --> 07:14.540
Ahora imagina hacer crecer tu proyecto hasta el tamaño de Fortnite gestionando el metajuego multijugador.

07:14.540 --> 07:18.380
Cada uno de los jugadores, todas las cosas que puedes hacer con tu jugador.

07:18.380 --> 07:23.270
Tendríamos miles de clases y decenas de miles de líneas de código.

07:23.300 --> 07:29.930
Tener estas mejores prácticas divididas en modelo vista controlador y servicio realmente paga dividendos en tu

07:29.930 --> 07:30.800
proyectos.

07:30.800 --> 07:32.510
Es por eso que estamos empezando tan simple.

07:32.510 --> 07:38.060
Así que es una preocupación común cuando la gente está entrando en las arquitecturas de aprendizaje, se siente como, Hey,

07:38.060 --> 07:42.310
que es un montón de clases o un montón de líneas de código para hacer cosas simples.

07:42.320 --> 07:48.350
Es cierto, pero ahora estás invirtiendo tiempo en aprender estos fundamentos.

07:48.350 --> 07:55.610
Así que a medida que tu proyecto escala su conjunto a la derecha, es una cosa maravillosa que tres meses en un proyecto en solitario

07:55.610 --> 08:02.000
o dos semanas en un proyecto de cinco personas, no hay una pregunta de donde la siguiente característica debe ir

08:02.000 --> 08:07.850
porque todos ustedes están trabajando juntos en el mismo patrón arquitectónico y usted sabe, hey, un botón

08:07.850 --> 08:12.530
clic bien, que va a empezar en la vista y que va a ir al controlador y luego

08:12.530 --> 08:13.400
ir al modelo.

08:13.430 --> 08:14.810
Estás hablando el mismo idioma.

08:14.810 --> 08:21.560
Así que el curso Udemy habla de los beneficios y el análisis coste-beneficio de la incorporación de nuevas tecnologías como

08:21.560 --> 08:23.120
esta cantidad de MVCs.

08:23.120 --> 08:24.800
Volvamos al controlador.

08:24.800 --> 08:29.120
Lo que hacemos es inicializar la vista con algunos campos de texto.

08:29.120 --> 08:31.820
Vamos a escuchar a ese servicio aquí.

08:32.680 --> 08:36.430
Y luego, cada vez que el servicio se carga, tomamos ese valor.

08:36.460 --> 08:39.670
que cargamos del campo de texto y lo pasamos al modelo.

08:39.790 --> 08:42.520
Luego escuchamos a la vista y decimos, Hey, vista.

08:42.520 --> 08:49.630
Cada vez que la física detecta que la pelota ha rebotado, entonces vamos a capturar aquí y vamos a actualizar que

08:49.630 --> 08:53.490
escuchando cada vez que la cuenta de rebotes haya cambiado aquí.

08:53.500 --> 08:55.630
Así que hay un poco más que mirar aquí.

08:55.630 --> 08:56.610
Puedes profundizar.

08:56.620 --> 09:02.170
También tenemos un poco del patrón de comandos que veremos en un futuro ejemplo.

09:02.170 --> 09:04.060
Así que vamos a ejecutar la demo una vez más.

09:08.740 --> 09:11.680
Sí, puedo ver que el micrófono está captando el rebote.

09:13.350 --> 09:14.130
Así que va.

09:14.130 --> 09:14.820
Uno, dos, tres.

09:14.820 --> 09:15.510
Uno, dos, tres.

09:15.510 --> 09:16.290
Uno, dos, tres.

09:16.740 --> 09:18.420
Eso es todo para la demostración de conteo.
