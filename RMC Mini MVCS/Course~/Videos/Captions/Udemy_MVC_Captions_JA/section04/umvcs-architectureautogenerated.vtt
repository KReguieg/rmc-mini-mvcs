WEBVTT

00:00.520 --> 00:03.490
El framework Unity MVC.

00:03.490 --> 00:10.750
Creé el framework Unity UMBC hace varios años basándome en mis aprendizajes de entonces y en mi arquitectura

00:10.750 --> 00:11.460
arquitectónicos.

00:11.470 --> 00:17.140
Las ventajas de utilizar este marco en particular son que está probado y basado en muchas de las

00:17.140 --> 00:20.310
principios y patrones que hemos visto antes en el curso.

00:20.320 --> 00:26.080
Mientras que la versión existe sólo para la unidad, en teoría, los patrones que hay son agnósticos idioma, por lo que

00:26.080 --> 00:28.920
puedes llevarlo a diferentes plataformas si lo deseas.

00:28.930 --> 00:35.740
Aporta un entorno más comprobable a la unidad porque cada área de tu código está separada y desacoplada.

00:35.740 --> 00:39.940
Y como muchas de las arquitecturas establecidas, hemos echado un vistazo a unity.

00:39.940 --> 00:45.010
Y esto permite un desarrollo más rápido y un mantenimiento mucho más eficiente en sus proyectos.

00:45.010 --> 00:50.860
En el momento de la creación, tenía un flujo mono centrado en el comportamiento de cómo estaba desarrollando en la unidad.

00:50.920 --> 00:53.860
Así que construí este sistema para trabajar de la misma manera.

00:53.860 --> 00:58.300
Así que una de las características clave aquí es que utiliza en gran medida los comportamientos mono.

00:58.300 --> 01:01.780
Cada una de las cuatro preocupaciones extiende el comportamiento mono.

01:01.780 --> 01:07.060
Esto significa que puedes colgar cada una de estas preocupaciones en un objeto del juego, lo que es genial usando todos los

01:07.060 --> 01:12.550
flujos de trabajo familiares que tenemos en la unidad de objetos de juego y componentes, incluyendo la serialización de campos en

01:12.550 --> 01:13.570
cualquiera de las preocupaciones.

01:13.570 --> 01:17.890
Por ejemplo, en la captura de pantalla aquí se puede ver uno de los modelos.

01:17.890 --> 01:23.920
El modelo es un comportamiento mono, por lo que puede tener campos serializados y sentarse muy bien en su inspector de la unidad

01:23.920 --> 01:24.250
ver.

01:24.250 --> 01:27.550
¿Cuál es tu estructura de alto nivel y la de los VCs?

01:27.550 --> 01:34.090
Bueno, tenemos la familiar m v de los patrones que hemos visto antes, donde cada uno de esos cuatro

01:34.090 --> 01:36.130
preocupaciones se extiende el comportamiento mono.

01:36.130 --> 01:42.700
A continuación, dentro de mi código de juego, me gustaría crear un concepto de aplicación, que es también cantidad de comportamiento.

01:42.700 --> 01:48.430
Esa es la única cosa en mi escena bajo la cual todo esto se sienta de nuevo, algunos beneficios de la mono comportamiento

01:48.430 --> 01:50.740
ya que se siente muy nativo a la unidad.

01:50.740 --> 01:55.360
Las cosas se sientan en la escena en los objetos del juego y se pueden separar, como me gusta.

01:55.360 --> 01:58.270
Ahora en este capítulo, sólo estamos haciendo una visión general de esto.

01:58.270 --> 02:01.000
Eventualmente vamos a pasar a un marco diferente.

02:01.000 --> 02:04.480
Aquí hay un fragmento de cómo funciona el sistema UMBC.

02:04.480 --> 02:08.680
Hay algunos aspectos de este antiguo sistema que todavía me gustan mucho.

02:08.680 --> 02:13.480
En primer lugar, en muchas de las preocupaciones, como el controlador de base que vemos aquí, yo uso genéricos.

02:13.480 --> 02:19.450
Los genéricos son una manera fantástica en C-sharp para crear algunas clases de plantilla reutilizables.

02:19.450 --> 02:25.840
En segundo lugar, el flujo de trabajo que tengo aquí permite la tipificación fuerte, que es grande en los casos específicos

02:25.840 --> 02:27.100
de cómo fluye mi juego.

02:27.100 --> 02:32.770
Soy capaz de obtener el autocompletado, que me muestra las propiedades y métodos que tienen sentido para

02:32.770 --> 02:37.630
el contexto y el framework introduce los conceptos que hemos aprendido de los patrones de diseño.

02:37.630 --> 02:45.070
Tenemos tanto el gestor de comandos para el alto nivel de comunicación FA de una manera más desacoplada y la unidad

02:45.070 --> 02:48.670
para el nivel local, la comunicación de bajo nivel.

02:48.670 --> 02:53.350
La diferencia clave aquí, como discutimos cuando hablamos de estos patrones antes, es que el comando

02:53.350 --> 02:58.750
no necesita que el emisor y el receptor tengan referencias entre sí, mientras que

02:58.750 --> 03:04.420
el concepto de evento de Unity requiere que el observador tenga una referencia al emisor.

03:04.420 --> 03:09.550
Esto da el marco de dos niveles de cómo se puede comunicar entre las principales preocupaciones.

03:09.550 --> 03:15.490
Así que en el momento en que creé este marco en particular, abarcaba los principios en la forma en que me acerqué a

03:15.490 --> 03:16.690
los proyectos Unity.

03:16.690 --> 03:20.410
Como he mencionado, era un enfoque muy centrado en el mono comportamiento.

03:20.410 --> 03:23.020
El proyecto sigue vivo y puede ser utilizado.

03:23.020 --> 03:27.130
Por el bien de este curso, voy a recomendar que elijamos un framework diferente del que hablaré

03:27.130 --> 03:27.880
a continuación.

03:27.880 --> 03:34.690
Pero estoy mencionando este proyecto como un ejemplo válido en mi cartera de arquitectura en un lugar desde el que

03:34.690 --> 03:38.440
Aprendí mucho en general en esta sección, hablamos de arquitecturas.

03:38.440 --> 03:42.610
Vimos los pros y los contras de utilizar cualquier arquitectura establecida.

03:42.610 --> 03:47.440
Hablamos de algunas de las diferencias entre las principales arquitecturas establecidas entre las que podemos elegir.

03:47.440 --> 03:50.710
Vimos los inconvenientes de utilizar el enfoque de no arquitectura.

03:50.710 --> 03:55.960
Aunque parece muy natural, sobre todo para un principiante, al final no resulta rentable.

03:55.960 --> 04:01.840
Y vimos una lista de algunos de los frameworks centrados en unity que podemos elegir para hacer arquitectura en el juego,

04:01.840 --> 04:05.740
incluyendo el tuyo y el proyecto de VC que creé hace varios años.

04:05.740 --> 04:11.770
A continuación, vamos a discutir un marco diferente, el marco de Mini y VC, que he creado más recientemente.

04:11.770 --> 04:17.260
Esta es la culminación de todas las lecciones que tenemos aquí durante todo el curso los principios de diseño,

04:17.260 --> 04:21.400
los patrones de diseño, lo aprendido de otras arquitecturas, incluyendo la mía.

04:21.400 --> 04:26.710
Veremos una visión general del sistema, los pros y los contras de su uso y cómo empezar.

04:26.710 --> 04:32.230
Esta sección sobre arquitecturas era especialmente completa y tenía mucha información.

04:32.230 --> 04:38.710
Siéntete libre de volver a ver algunas secciones para tener esos conceptos un poco más arraigados y nosotros

04:38.710 --> 04:40.540
pasaremos juntos a la siguiente sección.

04:40.540 --> 04:41.290
Gracias a todos.
