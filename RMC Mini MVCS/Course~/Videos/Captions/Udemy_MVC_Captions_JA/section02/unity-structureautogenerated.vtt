WEBVTT

00:00.720 --> 00:02.340
ユニティ構造

00:02.340 --> 00:05.260
このコースは様々なコースに分かれています。

00:05.280 --> 00:10.770
理論編では、ソフトウェアとゲームデザインの基礎について学びます。

00:10.770 --> 00:17.070
EDについては、UnityというEDツールそのものについて見ていきます。

00:19.170 --> 00:24.450
そしてコードセクションではC-sharpプログラミング言語とそれがunityゲームにどのように適用されるかを見ていきます。

00:24.450 --> 00:25.230
開発への応用についてです。

00:25.290 --> 00:26.910
まずは理論から。

00:26.910 --> 00:34.200
ソフトウェア開発のライフサイクルには多くの段階があり、アイデアから完成品に至るまでが含まれる。

00:34.200 --> 00:40.470
その中には、要求事項、分析、プロジェクトの計画、コンセプトの設計などが含まれます。

00:40.470 --> 00:43.710
開発、テスト、配備まで。

00:43.710 --> 00:51.180
unityはこれらの多くの段階にわたって強力なツールですが、私たちは開発でunityを使用することに重点を置いています、

00:51.180 --> 00:53.370
テストとデプロイの段階です。

00:53.370 --> 00:55.350
unityの世界

00:55.350 --> 01:02.970
コンセプトは以下のように構成されています。 プロジェクト内では、各シーンの中に1つ以上のシーンがあります。

01:02.970 --> 01:06.570
コンポーネントを持つゲームオブジェクトがあります。

01:06.570 --> 01:14.100
そのコンポーネントはメッシュレンダラーやコライダー、オーディオ、物理演算の剛体などを扱います、

01:14.100 --> 01:17.520
パーティクルシステム，そしてもちろんカスタムスクリプトなどです。

01:17.520 --> 01:21.960
ゲームオブジェクトはunityのパズルの基本です。

01:21.960 --> 01:28.950
ゲームオブジェクトはunityの基本的なパズルのピースです。

01:28.950 --> 01:30.520
コンポーネントが組み込まれています。

01:30.540 --> 01:33.750
ゲームプレイのスクリーンショットを例に見てみましょう。

01:34.440 --> 01:39.870
ゲームシーンがいくつかのプレハブに分割されています。

01:39.870 --> 01:46.070
プレハブとは、1つまたは複数のコンポーネントを持つゲームオブジェクトのことで、再利用できるように保存されていると考えることができます。

01:46.080 --> 01:51.540
例えば、ここに複数のコインがありますが、それぞれ固有の位置と回転を持っています。

01:51.540 --> 01:59.070
しかし、このコインにはいくつかの共通点がある。

01:59.070 --> 02:06.180
レンダリング方法などです。それらの共通機能はプレハブで保持されます。

02:06.180 --> 02:07.290
構造について

02:08.080 --> 02:14.100
チームはしばしばシーンとプレハブのどちらかを選択し、ハイレベルな編成を行う。

02:14.110 --> 02:17.830
ゲームオブジェクトはシーンの基本概念です。

02:17.830 --> 02:23.470
ゲームオブジェクトには様々なコンポーネントが存在しますが、トランスフォームのコンポーネントは常に

02:23.470 --> 02:30.250
そのオブジェクトが世界の中でどのように位置するかを記憶し、操作する。

02:30.250 --> 02:34.750
グラフィックがあろうとなかろうと、オブジェクトにはトランスフォームオブジェクトがある。

02:34.750 --> 02:38.710
我々が使用するコードは、ソフトウェアの命令言語である。

02:38.710 --> 02:43.480
Unityの歴史的なルーツはmonoプロジェクトに関係しています。

02:43.480 --> 02:47.140
DOTネットフレームワークのオープンソース版でした。

02:47.350 --> 02:53.860
monoという言葉は、monoビヘイビアを含め、UnityのAPIでも少し使われています。

02:53.860 --> 02:57.490
Unityにはいくつかのプログラミング言語があります。

02:57.490 --> 03:03.760
現在ではC-sharpが唯一の選択肢であり、UnityはC-sharpをサポートしていますが、C-sharpには依存していません。

03:03.760 --> 03:04.920
DOTネットフレームワーク

03:04.930 --> 03:12.370
UnityのC-sharpバージョンは非常に堅牢で、様々なデータ、概念、構造を備えています。

03:12.370 --> 03:18.550
Unity内部で使用する主な名前空間は、ランタイムコード用のUnityエンジンです。

03:18.550 --> 03:26.560
この名前空間には様々な機能が含まれています。

03:26.560 --> 03:32.290
特にunityとは関係ありませんが、数学、ライブラリなどかなり役に立ちます。

03:32.290 --> 03:36.610
unityで使うC-sharpのカスタムスクリプトの例です。

03:36.610 --> 03:39.280
上から順番にusing文を見ていきます。

03:39.280 --> 03:43.990
これらは、この特定のクラスファイルで使用する必要がある名前空間をもたらします。

03:44.590 --> 03:50.950
名前空間は、このコードがプロジェクトのどこに位置するかを宣言し、整理するのに役立ちます。

03:50.950 --> 03:55.810
次に、この型を定義するパブリッククラスやインターフェイスを宣言します。

03:55.810 --> 03:59.200
ここではモナークの振る舞いを継承していることに注目してください。

03:59.200 --> 04:04.630
さて、このスコープからモナークビヘイビアのすべての機能にアクセスすることができます。

04:04.630 --> 04:07.360
ユニティ特有の機能

04:07.360 --> 04:11.470
serializedフィールド属性を使ってフィールドをシリアライズする機能。

04:11.470 --> 04:18.310
これはpublicな値やprivateな値をunity inspectorにレンダリングすることができます。

04:18.310 --> 04:21.570
ゲームをプレイしている間、その設定を微調整することができます。

04:21.580 --> 04:24.730
プロトタイピングやゲームプレイのデザインに役立ちます。

04:24.730 --> 04:30.040
モニタービヘイビアには、メソッドの名前をつけることで利用できる多くのキーイベントが用意されています。

04:30.040 --> 04:30.670
覚醒

04:30.670 --> 04:36.460
そのオブジェクトが世界で最初に目覚めたときのイベントを捕捉する。

04:36.460 --> 04:39.160
その後、一度だけ起こる。

04:39.160 --> 04:40.930
ここでstartメソッドが呼ばれる。

04:40.930 --> 04:46.210
他のオブジェクトとの依存関係を設定し、updateメソッドが呼ばれる。

04:46.210 --> 04:47.500
フレームごとに呼び出される。

04:47.500 --> 04:52.210
ここは、入力やロジック、グラフィックの更新を行うのに最適な場所です。

04:52.930 --> 04:58.690
これらは、イベントやメソッドのオーバーライドのほんの一部です。

04:58.690 --> 05:00.970
は最も重要な感謝である。
