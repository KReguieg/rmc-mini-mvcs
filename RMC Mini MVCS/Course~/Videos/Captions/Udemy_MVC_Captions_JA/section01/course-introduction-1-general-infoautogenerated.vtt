WEBVTT

00:02.960 --> 00:06.650
UnityのMVCアーキテクチャへようこそ。

00:07.460 --> 00:08.350
こんにちは。

00:08.360 --> 00:09.290
サムです

00:09.320 --> 00:11.390
このコースを案内する

00:11.720 --> 00:16.280
20年以上の経験を持つunity認定デベロッパーです。

00:16.310 --> 00:21.020
unityの開発者であり、20年以上の経験を持つ。

00:21.050 --> 00:25.910
PCやモバイル向けにUnityのゲームタイトルを出荷してきました。

00:26.120 --> 00:28.820
このコースをお届けできることをとても嬉しく思っています。

00:28.820 --> 00:35.270
このコースは、中級・上級の開発者がスキルセットをレベルアップするための素晴らしい方法です。

00:35.270 --> 00:36.110
重要なことだ。

00:36.500 --> 00:39.140
アーキテクチャは非常に重要です。

00:39.530 --> 00:43.730
私のキャリアの中で、ユニティの中だけでも様々な経験をしてきました。

00:43.730 --> 00:49.970
大学で教えたり、このようなオンラインコースを作ったりと、教育にも携わってきました。

00:49.970 --> 00:57.860
unityツールの教材や、PC用携帯ゲーム機用のゲームタイトルの制作にも携わってきました。

00:57.860 --> 01:00.170
また、unityツールの教育用教材やunityゲーム開発会社にも携わっています。

01:00.530 --> 01:03.410
UnityのMVCアーキテクチャへようこそ。

01:03.560 --> 01:05.670
Unityは多機能なゲームエンジンです。

01:05.690 --> 01:09.830
もちろんゲームも含め、あらゆるプロジェクトに使えます。

01:10.010 --> 01:17.840
MVCアーキテクチャは、モデル、ビュー、コントローラの頭文字をとったもので、信頼性、組織性をもたらします。

01:17.840 --> 01:20.060
と拡張性をもたらします。

01:20.390 --> 01:26.900
このコースを修了することで、unityプロジェクトを設計・開発できるようになります。

01:26.900 --> 01:28.830
MVCアーキテクチャを使用することです。

01:28.850 --> 01:33.980
このコースの期間中、3つの学習トラックに焦点を当てます。

01:34.370 --> 01:40.100
設計の基礎、ユニティ・アーキテクチャの話、それとも

01:40.100 --> 01:41.530
Unityエンジンそのものについてです。

01:41.540 --> 01:45.860
01:40.100→01:45.830ユニティエンジンそのものについて説明します。

01:45.860 --> 01:52.220
C-shineのコースには前提条件があります。

01:52.220 --> 01:54.230
01:52.220 --> 01:54.230

01:54.230 --> 01:59.390
このコースに必要なソフトはすべて、このコースとリソースセクションにリンクされています。

01:59.390 --> 02:00.620
すべて自由に利用できます。

02:00.620 --> 02:05.990
そのため、お気に入りのウェブブラウザを使って、様々なリンクを検索することができます。

02:05.990 --> 02:10.970
また、Unityエディター（無料版）やお気に入りのC-sharpコードエディターを使うこともできます。

02:10.970 --> 02:14.210
unityのダウンロードに含まれている無料のものを使うことができます。

02:14.210 --> 02:17.930
必要な知識は初心者向けではありません。

02:17.930 --> 02:23.230
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私たち約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

02:23.300 --> 02:31.070
このページでは、クラス、インターフェイス、メソッド、プロパティ、イベントの使い方、一般的なパラダイムについて説明します。

02:31.070 --> 02:33.110
オブジェクト指向プログラミング

02:33.110 --> 02:39.140
もし、あなたがそのような特定の要素について強い知識を持っていないのであれば、それを身につけることをお勧めします。

02:39.140 --> 02:41.330
02:39.140 --> 02:41.330

02:42.280 --> 02:46.750
このコースでは、各セクションやチャプターを通して何をカバーするのか、その内容を見てみよう。

02:46.750 --> 02:47.240
ここで

02:47.260 --> 02:50.820
まずはコースのイントロダクションから。

02:50.830 --> 02:55.390
そして、ユニティについて簡単に説明し、ユニティを選ぶ理由を見ていきます。

02:55.390 --> 02:59.390
ゲームエンジンとunityの構造について説明します。

02:59.410 --> 03:05.560
このコースでは、MVCアーキテクチャを使用することに重点を置いていますが、基礎的なことにも時間を費やします。

03:05.560 --> 03:12.610
ここでは、ソフトウェア設計における設計原則、デザインパターン、UMLダイアグラムを取り上げます、

03:12.610 --> 03:15.760
また、unityに特化したアーキテクチャも紹介します。

03:15.850 --> 03:22.240
このセクションでは、アーキテクチャに引き継がれる概念を理解するための背景を説明します。

03:22.240 --> 03:27.100
unityと互換性のあるいくつかの異なるアーキテクチャに言及します。

03:27.130 --> 03:30.880
私が作ったフレームワークを使って進めていきます。

03:30.880 --> 03:33.790
ミニMVCフレームワークです。

03:33.970 --> 03:40.900
Unity用のミニMVCは、教育目的だけでなく、制作にも使える素晴らしいフレームワークです、

03:40.900 --> 03:43.630
このコースで取り上げるのはそのためです。

03:43.810 --> 03:50.170
このコースで学ぶ基礎は、どのフレームワークを選んでも、またどのフレームワークを選んでも、あなたの役に立つことでしょう。

03:50.170 --> 03:54.910
独自のMVCフレームワークを作る場合にも役立つだろう。

03:54.910 --> 04:00.910
なぜMVCが最適なのか？

04:00.910 --> 04:01.690
の例を見てみよう。

04:01.690 --> 04:07.450
このセクションでは、私が自分の画面を共有し、3つの異なるMVCの例を順を追って説明します。

04:07.450 --> 04:09.320
を紹介します。

04:09.340 --> 04:14.440
これらのプロジェクトはダウンロード可能で、コースに沿って進めることができます。

04:14.440 --> 04:15.850
そして、そのための課題も用意されている。

04:16.180 --> 04:24.130
ここでは、MVCで作成した時計、MVCを使った簡単なログイン、3Dローラーボールのサンプルゲームを見ていきます、

04:24.130 --> 04:26.450
そしてカスタムサンプルプロジェクトです。

04:26.470 --> 04:31.540
この最初の3つは、既存のプロジェクトをステップスルーして見ていきます。

04:31.540 --> 04:35.290
MVCなしで、そしてMVCフレームワークを使って。

04:35.290 --> 04:39.160
この2つのバージョンも閲覧可能です。

04:39.160 --> 04:40.360
4つ目のサンプル

04:40.360 --> 04:43.270
この部分だけは、私がコードを書きながら進めます。

04:43.270 --> 04:45.040
ライブコーディングのコーナーです。

04:45.040 --> 04:49.810
MVCフレームワークから始めて、全く新しいサンプルを作ります。

04:49.810 --> 04:54.280
その上で、ここまでに学んだコンセプトとプラクティスのすべてを

04:54.280 --> 04:57.850
コースで学んだすべての概念と実践が、1つのライブ・コーディング・セッションに集約されます。

04:57.850 --> 05:03.280
コースの中で、特に基礎的な部分において、このコースを採用する素晴らしい理由のひとつがわかるだろう。

05:03.280 --> 05:09.610
MVCのようなアーキテクチャを採用する素晴らしい理由のひとつは、コードを整理された領域に分けることができるということです。

05:09.610 --> 05:14.290
そして、その利点はユニットテストを採用できることだ。

05:14.290 --> 05:19.900
というわけで、今回はおまけとして、ユニットテストとテスト駆動開発の内容をいくつか取り上げます。
