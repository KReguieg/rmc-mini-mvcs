WEBVTT

00:00.510 --> 00:03.090
La visión general de la arquitectura MVC aquí.

00:03.090 --> 00:08.430
Continuando con la visión general del curso, vamos a ver lo que vamos a aprender de los fundamentos de MVC

00:08.430 --> 00:09.120
mismos.

00:09.120 --> 00:14.130
Cuando hablamos de arquitectura y diseño de software, hay muchos términos diferentes.

00:14.130 --> 00:20.100
Puede que ya estés familiarizado con algunos de estos términos y que tengas una idea clara de cuáles son

00:20.100 --> 00:22.080
que veas aquí son nuevos para ti.

00:22.110 --> 00:25.740
O quizá tengas alguna idea, pero no una definición completa.

00:25.740 --> 00:31.260
Verás términos como éstos a lo largo del curso, y cuando introduzca un nuevo término, lo haré

00:31.260 --> 00:33.660
explicaré qué es y le daré el contexto.

00:34.080 --> 00:37.740
Al final de este curso, tendrás un dominio más firme del vocabulario.

00:37.770 --> 00:41.440
Imagina una escalera de tu propio crecimiento profesional a lo largo de tu carrera.

00:41.520 --> 00:47.670
Algunos de estos principios aparecen antes en tu desarrollo y serían necesarios en los niveles junior e intermedio.

00:47.670 --> 00:48.510
puestos de trabajo.

00:48.510 --> 00:52.830
Entender las clases y la programación orientada a objetos es fundamental.

00:52.830 --> 00:59.940
Con el tiempo, los desarrolladores expertos trabajan en patrones de diseño, abstrayendo conceptos, haciendo su código más

00:59.940 --> 01:04.980
modular y reutilizable, así como en el aprendizaje, las pruebas y las arquitecturas.

01:04.980 --> 01:10.620
Este curso se centra en la arquitectura, y también vamos a golpear en un montón de estos conceptos diferentes, incluyendo

01:10.620 --> 01:12.900
probar la progresión a través de un juego.

01:12.900 --> 01:19.950
La carrera de desarrollador puede tener muchos títulos de trabajo diferentes dependiendo de la cultura del país de la compañía en la que estés.

01:19.950 --> 01:20.670
trabajes.

01:20.700 --> 01:22.440
Ese crecimiento puede ser muy diferente.

01:22.440 --> 01:27.780
Pero aquí tienes un ejemplo de algunos de los diferentes trabajos en los que puedes progresar a lo largo de tu carrera profesional

01:27.780 --> 01:28.710
en el desarrollo de juegos.

01:28.710 --> 01:34.590
Aunque tener experiencia en conceptos arquitectónicos siempre es importante en el desarrollo de software y juegos

01:34.590 --> 01:41.640
desarrollo, es especialmente crucial en el juego medio de avanzar hacia posiciones de desarrollo de alto nivel.

01:41.640 --> 01:47.520
Incluso se puede ver en este gráfico específico que hay puestos de arquitecto de software dedicados, así como un

01:47.520 --> 01:49.440
lugar para aportar tu experiencia.

01:49.440 --> 01:56.190
En última instancia, la arquitectura de un software es la organización fundamental de todas sus partes.

01:56.190 --> 02:02.610
Está construida sobre un conjunto de principios de diseño y patrones de diseño, los cuales discutiremos en el curso.

02:02.610 --> 02:09.060
Algunos de los beneficios de aplicar conscientemente una arquitectura a tu aplicación o juego es que es

02:09.060 --> 02:10.890
basada en conceptos probados.

02:10.890 --> 02:14.910
Será en la confianza, el rendimiento y la escalabilidad a sus proyectos.

02:14.910 --> 02:21.120
Las arquitecturas son típicamente agnósticas al lenguaje, lo que significa que los principios se sitúan más arriba y son más teóricos

02:21.120 --> 02:26.670
y pueden aplicarse a diferentes lenguajes de programación y plataformas de programación como Unity

02:26.670 --> 02:27.300
motor de juegos.

02:27.300 --> 02:33.060
Ahora bien, aunque existe una curva de aprendizaje, los equipos que adopten la arquitectura verán que el desarrollo se mueve

02:33.060 --> 02:37.860
más rápido y sobre todo el mantenimiento de los proyectos será mucho más rápido también.

02:37.860 --> 02:40.740
En el curso tocaremos diferentes tipos de arquitectura.

02:40.740 --> 02:43.740
Primero está el enfoque sin arquitectura.

02:43.740 --> 02:49.860
Esto es especialmente lo que los principiantes utilizan en proyectos o incluso los veteranos utilizan en prototipos de proyectos.

02:49.860 --> 02:56.580
Aquí, en aras de la velocidad y la flexibilidad, los equipos pueden no elegir ningún marco en particular y seguir adelante.

02:56.790 --> 03:01.860
A menudo en estos ejemplos te metes en problemas donde la escalabilidad y la adición de características al final

03:01.860 --> 03:02.940
se hace muy difícil.

03:02.940 --> 03:08.580
Los equipos veteranos pueden elegir arquitecturas personalizadas, tomando los diferentes principios y patrones que vamos a

03:08.580 --> 03:11.460
hablaremos en este curso y aplicarlos ellos mismos.

03:11.460 --> 03:14.340
Eso tiene sus ventajas, sobre todo la personalización.

03:14.340 --> 03:19.800
Hay arquitecturas establecidas, planos que podemos sacar de la estantería y llevar a nuestros

03:19.800 --> 03:20.640
proyecto.

03:20.640 --> 03:24.840
Estos incluyen MVC, Nvme y MVP.

03:24.870 --> 03:30.810
Este curso se centrará en el MVC o modelo vista controlador patrón, así que ¿por qué no proceder en nuestro

03:30.810 --> 03:34.950
proyectos con el enfoque de no arquitectura haciendo lo que se siente bien en el momento?

03:34.950 --> 03:40.800
Bueno, si bien puede ser más rápido inicialmente y un poco más libre y flexible en la forma de abordarlo, lo harás

03:40.800 --> 03:45.780
encontrarás que habrá más debate sobre cómo y dónde añadir cada característica, si eres una sola persona

03:45.780 --> 03:47.610
o en un equipo más grande.

03:47.610 --> 03:50.400
Cada desarrollador puede enfocar y resolver esto de forma diferente.

03:50.400 --> 03:56.190
Esa inconsistencia hará que tu código sea más difícil de leer tu proyecto, más difícil de mantener.

03:56.190 --> 04:01.170
Y cuando incorporas o desincorporas talento a tu proyecto, puede ser un reto traer gente nueva

04:01.170 --> 04:01.470
en.

04:01.470 --> 04:06.750
Hay más formación que hacer y cuando alguien abandona tu equipo, hay más información personalizada.

04:06.750 --> 04:10.080
a sus soluciones particulares que necesitas obtener antes de que se vayan.

04:10.080 --> 04:15.300
Para muchos desarrolladores, el enfoque sin arquitectura puede parecer la mejor solución, pero sin duda

04:15.300 --> 04:17.300
los errores y la complejidad aparecerán.

04:17.310 --> 04:20.400
Me acuerdo de esta cita y la parafrasearé.

04:20.730 --> 04:26.280
Cada decisión que tomamos mientras trabajamos en nuestros proyectos de software es una inversión, y cada inversión

04:26.280 --> 04:27.420
tiene un coste.

04:27.420 --> 04:33.180
Efectivamente, hay una curva de aprendizaje, pero afrontamos esa inversión confiando en que nos llevará

04:33.180 --> 04:34.560
beneficios a lo largo del camino.

04:34.560 --> 04:40.230
Así es como sugiero que veamos las arquitecturas con un coste, así como los beneficios a largo plazo.

04:40.230 --> 04:46.350
Muchas veces nosotros como desarrolladores sentimos que el desarrollo de software y el proceso de desarrollo de juegos se trata de

04:46.350 --> 04:48.660
añadir nuevas características y funcionalidades.

04:48.660 --> 04:51.170
Sin embargo, no es necesariamente así.

04:51.180 --> 04:57.960
Los estudios demuestran que, por lo general, sólo el 20% de nuestro esfuerzo de producción consiste en añadir nuevas características y funcionalidades.

04:57.960 --> 04:59.820
gastamos la mayor parte.

05:00.000 --> 05:06.090
nuestro tiempo y energía, manteniendo esas características, actualizando las diferentes herramientas y marcos que utilizamos,

05:06.390 --> 05:12.660
los comentarios de los usuarios, incluso reduciendo áreas de alcance y, por supuesto, solucionando errores.

05:12.660 --> 05:19.560
Crear código mantenible da sus frutos, estableciendo una estructura y arquitectura desde el principio

05:19.680 --> 05:26.640
con una forma coherente y a medida para añadir nuestra nueva funcionalidad ayudará en gran medida durante este 80% de la

05:26.640 --> 05:27.750
del software.

05:27.750 --> 05:31.800
Cuando estemos realizando el mantenimiento, corrigiendo errores y respondiendo a los comentarios.

05:31.800 --> 05:33.630
Tomemos los errores como ejemplo.

05:33.630 --> 05:39.060
El mismo error encontrado antes en el desarrollo es mucho, mucho más barato de resolver.

05:39.060 --> 05:41.850
Requiere menos tiempo del desarrollador y menos pruebas sobre el mismo.

05:41.850 --> 05:47.700
Es una buena práctica detectar estos bugs pronto y a menudo, así como corregirlos antes de añadir otros nuevos.

05:47.700 --> 05:48.360
características.

05:48.360 --> 05:53.640
Además de crear código mantenible que nos ayude a lograr estos objetivos, también podemos aumentar la

05:53.640 --> 05:55.260
la cantidad de automatización y pruebas.

05:55.260 --> 05:56.190
junto con el proyecto.

05:56.190 --> 06:00.030
Veremos cómo las arquitecturas nos permiten hacer pruebas más fácilmente.

06:00.030 --> 06:06.990
El aumento de la automatización y las pruebas también aporta confianza, robustez y estabilidad a nuestros proyectos.

06:06.990 --> 06:12.810
Entonces, ¿cómo exactamente un marco como la arquitectura modelo vista controlador nos ayuda con las pruebas?

06:12.810 --> 06:19.380
Bueno, en esencia, el uso de un marco como MVC nos invita a separar las diferentes áreas de interés

06:19.390 --> 06:27.150
de nuestros proyectos, teniendo estos aspectos separados, desacoplados en la forma en que se comunican, y también

06:27.150 --> 06:30.440
invitando a responsabilidades más pequeñas dentro de cada clase.

06:30.450 --> 06:36.000
Todas esas cualidades hacen que el código sea más comprobable dentro de las pruebas, especialmente cuando empleamos algo

06:36.000 --> 06:39.030
llamado desarrollo dirigido por pruebas, que cubriremos en el curso.

06:39.030 --> 06:42.870
Las pruebas se integrarán en la forma en que hacemos funcionar nuestras soluciones.

06:42.870 --> 06:49.560
Veremos que pensar en las pruebas por adelantado nos ayuda a crear proyectos con soluciones más sencillas.

06:49.560 --> 06:53.370
Ciertamente podemos crear un proyecto NVQ sin añadir pruebas.

06:53.520 --> 06:58.890
Y para aquellos de ustedes que han hecho pruebas, saben que la arquitectura MVC no es necesaria.

06:58.890 --> 07:01.350
Entonces, ¿por qué hablamos de que se unan?

07:01.350 --> 07:05.430
Porque la combinación de estos dos conceptos es increíblemente poderosa.

07:05.430 --> 07:10.920
En este curso, veremos cómo el uso de una arquitectura establecida como MVC traerá muchos beneficios para

07:10.920 --> 07:12.510
el desarrollo de nuestros proyectos Unity.

07:12.510 --> 07:17.910
En general, estoy muy emocionado de conseguir estos conceptos y prácticas en las manos de más desarrolladores.

07:17.910 --> 07:23.370
La audiencia de desarrollo de Unity abarca una increíble cantidad de diferentes tipos de desarrolladores.

07:23.370 --> 07:28.800
Tenemos aficionados que crean proyectos por diversión y desarrolladores profesionales de todos los niveles de habilidad.

07:28.800 --> 07:29.820
usando unity.

07:30.120 --> 07:34.910
Unity es muy flexible y esa es una de las grandes ventajas de usarlo.

07:34.920 --> 07:39.060
Sin embargo, a veces esa flexibilidad puede permitirnos crear malas soluciones.

07:39.060 --> 07:44.850
Aplicar las mejores prácticas que cubriremos aquí realmente te ayudará a pensar nuevas formas de abordar

07:44.850 --> 07:45.750
tus proyectos.

07:45.750 --> 07:51.990
Estoy seguro de que los temas que trataremos aquí os ayudarán a todos en el desarrollo de vuestros proyectos.

07:51.990 --> 07:56.760
En resumen, este curso se centrará en la arquitectura MVC para Unity.

07:56.790 --> 07:59.220
Cubrimos los contenidos del curso.

07:59.490 --> 08:05.460
Hemos visto un poco acerca de cómo la arquitectura puede ayudarnos a crear mejores proyectos, y también he insinuado

08:05.460 --> 08:11.130
que la poderosa combinación de las pruebas y la arquitectura pueden producir resultados interesantes.

08:11.130 --> 08:15.750
En la siguiente sección, hablaremos más sobre Unity como plataforma.

08:16.260 --> 08:22.260
Haremos una rápida recapitulación sobre por qué elegir Unity, cuáles son las diferentes características y servicios,

08:22.260 --> 08:25.200
y un breve resumen de sus partes principales.

08:25.380 --> 08:26.130
Gracias.
