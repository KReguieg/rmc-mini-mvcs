WEBVTT

00:00.510 --> 00:03.090
MVCアーキテクチャの概要

00:03.090 --> 00:08.430
コースの概要に引き続き、MVCの基礎から学ぶ内容を見てみましょう。

00:08.430 --> 00:09.120
を学びます。

00:09.120 --> 00:14.130
アーキテクチャやソフトウェア設計について語るとき、実に様々な用語がある。

00:14.130 --> 00:20.100
これらの用語の中には、すでに馴染みのあるものもあるでしょうし、どれがどのようなものかをしっかりと把握しているものもあるでしょう。

00:20.100 --> 00:22.080
をしっかり把握しているかもしれない。

00:22.110 --> 00:25.740
00:25.740 --> 00:25.740 --> 00:25.760

00:25.740 --> 00:31.260
コース全体を通して、このような用語が出てきます。

00:31.260 --> 00:33.660
を説明し、その背景を説明します。

00:34.080 --> 00:37.740
このコースが終わるころには、ボキャブラリーをよりしっかりと把握していることでしょう。

00:37.770 --> 00:41.440
自分のキャリアを通して、プロとして成長していく梯子を想像してみてください。

00:41.520 --> 00:47.670
これらの原則のいくつかは、あなたの成長の早い段階で身につき、ジュニアや中級の段階で必要とされるものです。

00:47.670 --> 00:48.510
00:48.510 --> 00:48.510

00:48.510 --> 00:52.830
クラスとオブジェクト指向プログラミングを理解することは基本です。

00:52.830 --> 00:59.940
そして開発者はデザインパターンに取り組み、概念を抽象化することで、コードをより洗練されたものにしていくのです。

00:59.940 --> 01:04.980
モジュール化し、再利用可能にする。

01:04.980 --> 01:10.620
このコースではアーキテクチャに焦点を当て、以下のような様々なコンセプトについても触れていきます。

01:10.620 --> 01:12.900
ゲーム進行のテスト

01:12.900 --> 01:19.950
デベロッパーのキャリアは、あなたがいる会社の国の文化によって様々な職種があります。

01:19.950 --> 01:20.670
で働く。

01:20.700 --> 01:22.440
その成長はかなり違うかもしれない。

01:22.440 --> 01:27.780
しかし、長いキャリアの中で昇進できるさまざまな仕事の緩やかな例は以下の通りだ。

01:27.780 --> 01:28.710
01:28.710 --> 01:28.710

01:28.710 --> 01:34.590
ソフトウェア開発やゲーム開発において、アーキテクチャの概念を経験することは常に重要である。

01:34.590 --> 01:41.640
(1)アーキテクチャー・コンセプトの経験は、ソフトウェア開発やゲーム開発において常に重要であるが、シニア開発ポジションを目指す中盤戦においては特に重要である。

01:41.640 --> 01:47.520
この図には、ソフトウェア・アーキテクトのポジションと

01:47.520 --> 01:49.440
あなたの専門性を発揮できる場所です。

01:49.440 --> 01:56.190
最終的に、ソフトウェアのアーキテクチャとは、そのすべてのパーツの基本的な構成である。

01:56.190 --> 02:02.610
このコースで説明する設計原則と設計パターンのセットに基づいて構築されます。

02:02.610 --> 02:09.060
アプリケーションやゲームに意識的にアーキテクチャを適用することの利点は、以下の通りです。

02:09.060 --> 02:10.890
実績のあるコンセプトに基づいていることです。

02:10.890 --> 02:14.910
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私たち約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

02:14.910 --> 02:21.120
アーキテクチャは一般的に言語にとらわれないものであり、原理はより高く、より理論的なものである。

02:21.120 --> 02:26.670
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私たち約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

02:26.670 --> 02:27.300
ゲームエンジン

02:27.300 --> 02:33.060
現在、学習曲線はあるものの、アーキテクチャを採用したチームは、開発を次のように進めることができる。

02:33.060 --> 02:37.860
特にプロジェクトのメンテナンスはより速くなるだろう。

02:37.860 --> 02:40.740
コースでは様々なタイプのアーキテクチャについて触れていきます。

02:40.740 --> 02:43.740
まず、アーキテクチャーなしというアプローチがあります。

02:43.740 --> 02:49.860
これは特に初心者がプロジェクトで使うものであり、ベテランであってもプロジェクトのプロトタイプで使うものである。

02:49.860 --> 02:56.580
ここでは、スピードと柔軟性のために、チームは特定のフレームワークを選択せず、前進することができる。

02:56.790 --> 03:01.860
このような例では、スケーラビリティや機能の追加を最後に行うという問題がしばしば発生する。

03:01.860 --> 03:02.940
が非常に難しくなる。

03:02.940 --> 03:08.580
ベテランのチームは、これから説明するような様々な原則やパターンを取り入れて、カスタムアーキテクチャを選択するかもしれない。

03:08.580 --> 03:11.460
このコースで説明するさまざまな原則やパターンを取り入れ、自分たちで応用することもできる。

03:11.460 --> 03:14.340
特にカスタマイズできる利点がある。

03:14.340 --> 03:19.800
確立されたアーキテクチャーや設計図がある。

03:19.800 --> 03:20.640
プロジェクトに持ち込むことができる。

03:20.640 --> 03:24.840
MVC、Nvme、MVPなどです。

03:24.870 --> 03:30.810
このコースでは、MVC（モデル・ビュー・コントローラー）パターンに焦点を当てます。

03:30.810 --> 03:34.950
このコースではMVC（モデル・ビュー・コントローラー）パターンに焦点を当てます。

03:34.950 --> 03:40.800
まあ、最初はその方が早いかもしれないし、少し自由で柔軟なアプローチができるかもしれないけれど、そのうちに

03:40.800 --> 03:45.780
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私たち約束、誰でも素早くはちょうど無視これらの一見正確にどのように{}人のことを忘れることができます。

03:45.780 --> 03:47.610
|にできるようにあなたがそれをすることができます本当に出くわすことあなたは、実際には私たち約束、誰でも素早くはちょうど無視することができます。

03:47.610 --> 03:50.400
開発者ごとにアプローチや解決方法は異なるかもしれません。

03:50.400 --> 03:56.190
このような矛盾はコードを読みづらくし、プロジェクトを維持することを難しくするでしょう。

03:56.190 --> 04:01.170
また、プロジェクトに才能のある人を参加させたり、参加させなかったりする場合、新しい人を連れてくるのは難しいことだ。

04:01.170 --> 04:01.470
である。

04:01.470 --> 04:06.750
トレーニングの回数も増えるし、誰かがチームを去る時には、より多くの情報が必要になる。

04:06.750 --> 04:10.080
|にできるようにあなたがそれをすることができます本当に出くわすこと。

04:10.080 --> 04:15.300
多くの開発者にとって、ノーアーキテクチャのアプローチは最良の解決策のように感じられるかもしれない。

04:15.300 --> 04:17.300
バグや複雑さがつきまといます。

04:17.310 --> 04:20.400
この言葉を思い出したので言い換えます。

04:20.730 --> 04:26.280
ソフトウェア・プロジェクトに取り組んでいる間のすべての決断は投資であり、それぞれの投資は

04:26.280 --> 04:27.420
にはコストがかかる。

04:27.420 --> 04:33.180
確かにここには学習曲線がある。しかし、私たちはその学習曲線が必ず役に立つと信じて投資に取り組んでいる。

04:33.180 --> 04:34.560
その過程で得られる利益を信じている。

04:34.560 --> 04:40.230
そうやって、長期的なメリットだけでなく、コスト面も考慮した上でアーキテクチャーを検討することを提案したい。

04:40.230 --> 04:46.350
私たち開発者は、ソフトウェア開発やゲーム開発のプロセスがすべてであるかのように感じることが多々あります。

04:46.350 --> 04:48.660
新機能の追加

04:48.660 --> 04:51.170
しかし、必ずしもそうではありません。

04:51.180 --> 04:57.960
調査によると、一般的に新機能を追加するための労力は、生産労力の20%程度に過ぎないそうです。

04:57.960 --> 04:59.820
の大半を費やしている。

05:00.000 --> 05:06.090
私たちの時間とエネルギーは、それらの機能を維持し、私たちが使用するさまざまなツールやフレームワークを更新することです、

05:06.390 --> 05:12.660
ユーザーからのフィードバックに対応し、範囲を縮小したり、もちろんバグにも対処しています。

05:12.660 --> 05:19.560
メンテナンス可能なコードを作成することで、最初から構造とアーキテクチャを確立することができます。

05:19.680 --> 05:26.640
新機能を追加するための一貫したオーダーメイドの方法は、この80％の作業で大いに役立つだろう。

05:26.640 --> 05:27.750
ソフトウエアの寿命の80%に相当する。

05:27.750 --> 05:31.800
バグを修正したり、フィードバックに対応したりするメンテナンスの時。

05:31.800 --> 05:33.630
バグを例に挙げてみましょう。

05:33.630 --> 05:39.060
開発初期に同じバグに遭遇しても、解決するのはずっとずっと安上がりだ。

05:39.060 --> 05:41.850
その方が開発者の時間もテストも少なくて済む。

05:41.850 --> 05:47.700
このようなバグを早期かつ頻繁に発見し、新しいバグを追加する前に修正することがベストプラクティスです。

05:47.700 --> 05:48.360
05:47.700 --> 05:48.360

05:48.360 --> 05:53.640
これらの目標を達成するために、保守性の高いコードを作成することに加え

05:53.640 --> 05:55.260
自動化とテストの量を増やすことができる。

05:55.260 --> 05:56.190
プロジェクトと共に。

05:56.190 --> 06:00.030
アーキテクチャによって、より簡単にテストを行えるようになることを確認する。

06:00.030 --> 06:06.990
自動化とテストの強化は、私たちのプロジェクトにも信頼性、堅牢性、安定性をもたらします。

06:06.990 --> 06:12.810
では、モデル・ビュー・コントローラー・アーキテクチャーのようなフレームワークは、具体的にどのようにテストに役立つのでしょうか？

06:12.810 --> 06:19.380
MVCのようなフレームワークを使うことで、異なる関心領域を分離することができます。

06:19.390 --> 06:27.150
を分離させることができる。

06:27.150 --> 06:30.440
それぞれのクラスでより小さな責任を担うようにする。

06:30.450 --> 06:36.000
これらの性質はすべて、テストの中でよりテストしやすいコードを作ることになる。

06:36.000 --> 06:39.030
テスト駆動開発と呼ばれるものだ。

06:39.030 --> 06:42.870
テストそのものが、私たちのソリューションをどのように機能させるかに組み込まれていくのです。

06:42.870 --> 06:49.560
テストについて前もって考えることで、よりシンプルなソリューションを持つプロジェクトを作ることができる。

06:49.560 --> 06:53.370
テストを加えなくても、NVQプロジェクトを作成することはできます。

06:53.520 --> 06:58.890
また、テストをやったことがある人なら、MVCアーキテクチャが必要ないことを知っているはずだ。

06:58.890 --> 07:01.350
では、なぜこの2つが一緒になっているのでしょうか？

07:01.350 --> 07:05.430
この2つのコンセプトを組み合わせることで、信じられないほどの力を発揮するからです。

07:05.430 --> 07:10.920
このコースでは、MVCのような確立されたアーキテクチャを使用することで、どのように多くの利点がもたらされるかを見ていきます。

07:10.920 --> 07:12.510
このコースでは、MVCのような確立されたアーキテクチャを使用することで、Unityのプロジェクト開発にどのような利点があるのかを説明します。

07:12.510 --> 07:17.910
このようなコンセプトとプラクティスがより多くの開発者の手に渡ることに、私はとても興奮しています。

07:17.910 --> 07:23.370
Unityの開発者層は驚くほど多岐にわたります。

07:23.370 --> 07:28.800
趣味でプロジェクトを作る人もいれば、プロの開発者もいます。

07:28.800 --> 07:29.820
unityを使っています。

07:30.120 --> 07:34.910
unityは非常に柔軟性があり、それがunityを使用することの非常にクールな利点の一つです。

07:34.920 --> 07:39.060
しかし、時にはその柔軟性が悪い解決策を生み出すこともある。

07:39.060 --> 07:44.850
ここで取り上げるベストプラクティスを実践することで、新しいアプローチ方法を考えることができるだろう。

07:44.850 --> 07:45.750
プロジェクト

07:45.750 --> 07:51.990
ここでお話しするトピックは、皆さんのプロジェクト開発に必ず役立つと確信しています。

07:51.990 --> 07:56.760
まとめると、このコースではUnityのMVCアーキテクチャに焦点を当てます。

07:56.790 --> 07:59.220
コース内容をカバーしました。

07:59.490 --> 08:05.460
アーキテクチャを学ぶことで、より良いプロジェクトを作ることができることを少し説明しました。

08:05.460 --> 08:11.130
また、テストとアーキテクチャーの強力な組み合わせがエキサイティングな結果を生み出すことも示唆した。

08:11.130 --> 08:15.750
次のセクションでは、プラットフォームとしてのUnityについて詳しく説明する。

08:16.260 --> 08:22.260
なぜUnityを選ぶのか、どのような特徴やサービスがあるのか、簡単にまとめます、

08:22.260 --> 08:25.200
そして、主なパーツの概要を簡単に説明します。

08:25.380 --> 08:26.130
ありがとうございました。
