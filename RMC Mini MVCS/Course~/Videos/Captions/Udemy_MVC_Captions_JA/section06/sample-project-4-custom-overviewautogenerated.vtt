WEBVTT

00:00.120 --> 00:03.570
ミニNBCのカスタムサンプルプロジェクト。

00:03.570 --> 00:05.010
おめでとうございます。

00:05.010 --> 00:09.180
あなたはこのコースの全ての理論を無事に修了しました。

00:09.180 --> 00:11.010
コースの紹介は終わりました。

00:11.010 --> 00:14.850
ユニティの構造など、ユニティの概要を見てきました。

00:14.850 --> 00:22.770
デザイン原則、デザインパターン、UMLダイアグラムなど、ソフトウェアデザインを高いレベルから見てきました、

00:24.840 --> 00:29.340
そしてUnityのMINIとVCのアーキテクチャについて深く掘り下げていきました。

00:29.340 --> 00:35.460
この理論を実践し、ゼロから新しいプロジェクトを作りましょう。

00:35.460 --> 00:41.190
さて、これまで取り上げてきた各サンプルプロジェクト、そしてこの新しいプロジェクトでも、私たちは一皮むけようとしている。

00:41.190 --> 00:46.770
MVCのコンセプトのレイヤーを増やし、それをどのように適用するかを批判的に考えていきます。

00:46.770 --> 00:48.600
次のセクションに進みます。

00:48.600 --> 00:55.170
建築とこのフレームワークのどの側面が最も心地よいと感じるか、自分なりに考えてみてほしい。

00:55.170 --> 00:55.410
を考えてみてください。

00:55.420 --> 01:00.150
アーキテクチャをプロジェクトに適用したとき、長期的なメリットを感じ始めていますか？

01:00.150 --> 01:02.660
フレームワークのどの部分をもっと探求したいですか？

01:02.670 --> 01:06.390
また、どの部分があなたのニーズに合わないかも考えてみてください。

01:06.390 --> 01:12.120
デザイン原則やパターンがあるプロジェクトで望む結果を得るためにはどうすればいいのか？

01:12.120 --> 01:14.580
曖昧なままである。

01:14.580 --> 01:19.440
さて、ここまでMVCのサンプルをいくつか見てきました。

01:19.440 --> 01:22.270
いずれの場合も、すでに存在するものを見直した。

01:22.290 --> 01:24.510
では、ゼロから新しいプロジェクトを作りましょう。

01:24.510 --> 01:26.550
これが私たちが一緒に行うハイレベルなプロセスです。

01:26.550 --> 01:29.370
では、コンセプトと機能要件は？

01:29.370 --> 01:30.690
何をする必要があるのか？

01:30.720 --> 01:32.490
ユーザーエクスペリエンスは？

01:32.490 --> 01:35.550
何を見るのか、どんな入力をするのか？

01:35.550 --> 01:38.620
どのようなアーキテクチャーが必要なのか？

01:38.640 --> 01:42.960
モデル・ビュー・コントローラー・サービス。

01:42.960 --> 01:47.730
どのような関心事にベースとなる機能を使い、どのような関心事にベースとなる機能が必要なのか？

01:47.730 --> 01:49.260
カスタム機能？

01:49.260 --> 01:54.690
では、MVCを多用したシンプルな計算アプリを作ってみよう。

01:54.690 --> 01:56.070
これが必要条件です。

01:56.340 --> 01:59.370
画面上に入力欄をいくつか用意します。

01:59.880 --> 02:06.750
ユーザーは2つの整数を入力し、加算ボタンをクリックして数学的に足し算をします。

02:06.750 --> 02:07.650
と表示される。

02:07.650 --> 02:09.930
では、これをどうやって懸念材料に分解するのか？

02:09.930 --> 02:11.430
モデルはデータを保存します。

02:11.430 --> 02:14.220
では、これを実現するためにはどのようなデータが必要なのでしょうか？

02:14.220 --> 02:19.590
まあ、ビューから始めて、そのようにデータについて考えてみると、いくつかのテキストがあることがわかる。

02:19.590 --> 02:22.620
フィールドがあるので、それを保存する必要がある。

02:22.620 --> 02:28.290
最初のテキストフィールドは整数値、2番目のテキストフィールドは整数値、3番目のテキストフィールドは整数値とします。

02:28.290 --> 02:28.860
の結果が得られます。

02:28.860 --> 02:35.400
ビューでは、A、B、そして結果をコントローラに表示するためのテキストを表示します、

02:35.400 --> 02:41.460
ロジックを処理するコントローラでは、追加操作と同様に

02:41.460 --> 02:43.290
をクリアするかリセットする必要がある。

02:43.290 --> 02:49.290
また、以前のサンプルではサービスレイヤーを使って外部データを読み込んでいましたが、今回はその必要はありません。

02:49.290 --> 02:51.480
この例ではその必要はないので、サービスは使わない。

02:51.480 --> 02:55.020
では、どの基本機能を使うのか？

02:55.020 --> 03:00.240
ここでは、どのような関心事に対して標準的な機能が必要なのか、またどのような関心事に対して標準的な機能が必要なのかを考えている。

03:00.240 --> 03:01.290
カスタム機能？

03:01.290 --> 03:05.400
まあ、一般的なモデルと同じように、基本的な機能が欲しい。

03:05.400 --> 03:08.610
基本モデルから外れる必要はない。

03:08.610 --> 03:11.580
ここでは、ビューのベースモデルを拡張します。

03:11.580 --> 03:16.230
アイビューのインターフェイスを実装し、monoのビヘイビアを拡張します。

03:16.230 --> 03:18.110
このパターンは以前にも見たことがありますね。

03:18.120 --> 03:20.400
UnityのUIを使いたい時はいつでも。

03:20.400 --> 03:23.340
UnityのUIはmonoビヘイビアと相性がいい。

03:23.340 --> 03:28.470
そこで、コントローラーのビューにmonoビヘイビアを使うことにします。

03:28.470 --> 03:32.970
コントローラにはベースとなるクラスが存在するが、それが必要な時に最適なのだ。

03:32.970 --> 03:38.340
モデル・ビュー・コントローラーとサービスのそれぞれは、ここではサービスが必要ないから。

03:38.340 --> 03:43.890
どのように進めるかいくつか選択肢がありますが、単純にAIコントローラを実装して

03:43.890 --> 03:46.560
サービスを使わないカスタム機能を作る。

03:46.560 --> 03:50.790
また、サービスレイヤーではサービスを使わないので、その部分は省略する。

03:50.790 --> 03:53.700
このアプリは外部データを呼び出さないからです。

03:53.700 --> 03:59.430
この段階では、UMLを使ったダイアグラムを考えるのに最適な場所です。

03:59.460 --> 04:05.430
これは、依存関係がどこにあるのか、どのインターフェイスを実装するのか、どのインターフェイスを実装するのかを考えるのに役立ちます。

04:05.430 --> 04:10.320
クラスが拡張されるのか、

04:10.320 --> 04:14.310
UMLはコミュニケーションをとり、開発に集中するための素晴らしい方法です。

04:14.310 --> 04:20.100
そのため、ここ数ステップで行ったブレインストーミングと同じように、視覚的に表現します。

04:20.100 --> 04:25.530
このような構造全体を表す電卓のミニクラスを用意します。

04:25.530 --> 04:30.060
電卓モデル、電卓コントローラ、電卓ビューがあります。

04:30.060 --> 04:33.270
コース全体を通して、コーディングの課題がいくつか出されています。

04:33.270 --> 04:38.070
このような場合、「next.next.next.next.next.next.next.

04:38.070 --> 04:43.950
このセクションで話した情報だけを使って、ゼロからコーディングを始めましょう。

04:43.950 --> 04:49.110
また、もしこの課題に行き詰まったら、このセクションに戻り、私たちがどのように解決したかを見ることができます。

04:49.110 --> 04:49.650
をご覧下さい。

04:49.650 --> 04:50.850
実際にやってみよう

04:50.850 --> 04:57.840
unityを入手し、インストールし、新しいプロジェクトを作成し、unityを追加するところから始めます。

04:57.840 --> 04:59.910
ミニとVCのフレームワークと。

04:59.960 --> 05:03.470
この電卓サンプルプロジェクトのライブコーディングを行う。

05:03.470 --> 05:08.690
このサンプルプロジェクトは、私がコーディングしているので、今までのものとは少し違う感じになると思います。

05:08.690 --> 05:14.030
このサンプルプロジェクトは今までのものとは少し違う。

05:14.030 --> 05:15.100
一緒に解決しましょう。

05:15.110 --> 05:16.280
さあ、始めよう。
