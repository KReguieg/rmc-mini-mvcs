WEBVTT

00:00.560 --> 00:03.770
ミニMVCのサンプルプロジェクト。

00:04.190 --> 00:11.210
ミニMVCについて詳しく学ぶためのサンプルコードは、フレームワーク自体のパッケージに含まれています。

00:11.480 --> 00:14.690
これはGit上で自由にダウンロード可能で、統一されています。

00:15.110 --> 00:21.410
これらのサンプルをインポートするには、パッケージマネージャーを開き、mini MVCsパッケージを選択します。

00:21.410 --> 00:23.580
と表示されます。

00:23.600 --> 00:25.460
スクリーンショットをご覧ください。

00:25.460 --> 00:32.000
mini MVCsのパッケージを取り込むと、packagesフォルダにソースが入ります。

00:32.000 --> 00:34.000
これで始めるのに必要なものは全て揃いました。

00:34.010 --> 00:39.260
ここで説明するサンプルはオプションであり、フレームワークについてより深く知るための素晴らしい方法です。

00:39.260 --> 00:44.570
もしあなたのニーズもサンプルプロジェクトのひとつと似ているのであれば、サンプルプロジェクトを使って

00:44.570 --> 00:47.810
をコピーしたり修正したりすることができます。

00:47.810 --> 00:50.720
このコースではいくつかのサンプルを見ていきます。

00:50.720 --> 00:58.160
ミニMVCを使っても使わなくても、最終的な結果は全く同じです。

00:58.160 --> 00:58.800
が参考になる。

00:58.820 --> 01:02.330
MVCがあまりないバージョンから始めます。

01:02.660 --> 01:07.700
フレームワークなしでユースケースを解決する機能をフルに見ることができます。

01:07.700 --> 01:14.120
そこで慣れてきたら、MVCがたくさんあるバージョンを開いて、同じユースケースがどのように使われるかを見てみましょう。

01:14.120 --> 01:16.050
フレームワークを使って解決することができる。

01:16.070 --> 01:21.860
この2つの例を自由に行き来して、徹底的に理解してください。

01:21.860 --> 01:24.110
このコースではいくつかのサンプルを見ていきます。

01:24.110 --> 01:26.270
それぞれの概要を説明します。

01:26.270 --> 01:29.060
時計のサンプルです。

01:29.060 --> 01:31.310
最もシンプルなサンプルです。

01:31.310 --> 01:37.790
モノビヘイビアはなく、コンソールにログアウトするデバッグビューのみです。

01:37.790 --> 01:38.330
ウィンドウに表示されます。

01:38.330 --> 01:43.870
ここでは入力はなく、ただ時計のように時を刻むだけで、観客は初心者向けに作られている。

01:43.880 --> 01:46.280
次はユーザーログインのサンプルです。

01:46.280 --> 01:51.530
非常にシンプルですが、このサンプルではmonoビヘイビアを使用しています。

01:51.530 --> 01:58.670
これはunityのUIを使用し、ログインを真似ている間にボタンクリックの形でユーザーの入力をキャプチャします。

01:58.670 --> 02:03.560
オフライン専用のプロジェクトなので、サービスレイヤーはローカルファイルを読み込みます。

02:03.560 --> 02:08.030
そのため、インターネットに接続する必要がありません。

02:08.030 --> 02:10.160
初心者向けです。

02:10.160 --> 02:15.560
UnityのlearnプロジェクトにインスパイアされたRollerballのサンプルです。

02:15.560 --> 02:22.280
矢印キーを4つ使って、物理演算でボールを転がし、黄色いボールを集めることができます。

02:23.510 --> 02:29.300
このゲームには、単純なゲームでありながら、以下のような特徴があります。

02:29.300 --> 02:34.940
音声入力、UI、物理演算を含む完全な3Dゲームです。

02:34.940 --> 02:38.570
MVCのスケーラビリティを説明する。

02:38.570 --> 02:43.070
このプロジェクトには複数のビューと複数のコントローラーが含まれています。

02:43.070 --> 02:48.860
このプロジェクトはまだ比較的シンプルですが、中級の開発者にとっては、次のように判断するのに適しています。

02:48.860 --> 02:50.780
アーキテクチャをどのように教えるのがベストなのか。

02:50.780 --> 02:56.570
いくつかのサンプルでコーディングし、手を汚すことの価値が明らかになった。

02:56.570 --> 03:00.050
このコンセプトを通して、様々な指導の原則を表現したい。

03:00.170 --> 03:02.810
いくつかのプロジェクトに分けました。

03:02.810 --> 03:09.950
最もシンプルなサンプルとして、金銭的な行動を一切使わず、何の見解も持たないプロジェクトを1つ用意しました。

03:09.950 --> 03:13.870
物理入力やオーディオなど、3つの要素を含むものまであります。

03:13.880 --> 03:20.210
このサンプルは、トリプルAユニティゲームのような複雑なものから、比較的シンプルなものまであります、

03:20.210 --> 03:25.910
MVCの概念を学び、自分のニーズに合わせてどのようにスケールアップしていくかを確認するには適切な遊び場です。

03:25.910 --> 03:29.420
このセクションでは、MiniとVCのサンプルプロジェクトについてお話しました。

03:29.420 --> 03:34.730
このセクションでは、ミニとVCのサンプルプロジェクトについて説明します。

03:34.730 --> 03:35.270
その背景にあるもの。

03:35.270 --> 03:39.590
次に、具体的なサンプルを見て、さらに掘り下げていきます。

03:39.590 --> 03:44.900
これまでのコースで学んできた理論を、デザインの原則からどのように取り入れるかを見ていきます、

03:44.900 --> 03:49.100
デザインパターン、哲学、そしてその全てを機能的なコードに落とし込む。

03:49.100 --> 03:54.590
この記事では、「デザイン・パターン」と「機能的なコード」を紹介します。

03:54.590 --> 03:59.030
そして、その後に出される他の課題へのフォローアップを促します。

03:59.030 --> 04:04.400
これらの課題は任意だが、自分の手を汚して理解するための素晴らしい方法だ。

04:04.400 --> 04:05.360
これらの原則を理解するための素晴らしい方法です。

04:05.360 --> 04:09.970
私は、このような課題をフォローアップすることを強く勧めます。

04:09.980 --> 04:10.760
ありがとう。
