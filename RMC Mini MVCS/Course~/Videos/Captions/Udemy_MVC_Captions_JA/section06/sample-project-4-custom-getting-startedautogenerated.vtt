WEBVTT

00:04.590 --> 00:06.900
Unityのお気に入りブラウザです。

00:07.620 --> 00:10.220
Unityのエディターをダウンロードします。

00:10.230 --> 00:13.380
Get startedにはいくつかの料金プランがあります。

00:13.380 --> 00:18.870
Unity, personal or Unity studentはプロユースで無料で始めるには最適です。

00:18.870 --> 00:20.640
他のプランもあります。

00:20.640 --> 00:23.430
私はWindowsマシンなので、Windows用をダウンロードします。

00:23.730 --> 00:29.730
Unityをダウンロードしましたので、インストーラーを開いてセットアップを進めていきます。

00:29.730 --> 00:32.610
セットアップが完了したら、Unity Hubを開きます。

00:32.610 --> 00:39.600
Unity Hubを開くと、Unityエディタをインストールすることができます。

00:39.600 --> 00:40.350
プロジェクトを作成します。

00:40.350 --> 00:41.880
新しいプロジェクトを作成します。

00:41.880 --> 00:44.250
Unityには様々なテンプレートがあります。

00:45.130 --> 00:51.340
ここで重要なのは、ELTsと呼ばれる最新のunityバージョンを使いたいということです。

00:51.370 --> 00:57.340
これは時間の経過とともに変化していくが、unityはこれが長期的なサポートを受けるバージョンであることを明確に示している。

00:57.340 --> 00:59.890
そして、それは一般的に最新のパブリックリリースです。

00:59.890 --> 01:01.870
unityが表示するデフォルトのテンプレート。

01:01.870 --> 01:03.910
これが3Dコアです。

01:03.940 --> 01:09.100
多くのMVCはこれらの様々なテンプレートに対応しているので、自由に選択することができます。

01:09.220 --> 01:10.690
でも、ここはデフォルトで。

01:10.690 --> 01:14.950
プロジェクトはcalculator miniと名付け、お気に入りのフォルダにインストールすることにします。

01:14.950 --> 01:20.140
新しいプロジェクトを作成するたびに、Unityはすべてのインストールファイルと依存関係を設定します。

01:20.140 --> 01:24.820
を作成します。

01:25.240 --> 01:28.190
GitHubにアクセスして、コードボタンをクリックします。

01:28.210 --> 01:34.390
ミニとVCをunityにインポートするためにこのgit URLをキャプチャします。

01:34.390 --> 01:38.600
プロジェクトが作成されると、Unityが開き、デフォルトのディスプレイが表示されます。

01:38.620 --> 01:42.040
このテンプレートにはサンプルシーンが付属しています。

01:42.040 --> 01:45.810
次にパッケージマネージャーを開き、MiniとVCをインストールします。

01:45.820 --> 01:50.110
GitHubから取得したURLを貼り付けて、パッケージを追加します。

01:50.110 --> 01:56.350
mini NBC'sをインストールしたら、オプションでサンプルもインストールできます。

01:56.350 --> 01:56.790
を開始します。

01:56.800 --> 01:58.420
そうすることを強くお勧めします。

01:58.420 --> 02:03.880
サンプルの1つが、あなたの意図するゴールと十分に類似していることがわかるかもしれません。

02:03.880 --> 02:07.380
コピーして貼り付けるか、参考にする。

02:07.390 --> 02:11.380
今回はサンプルをインポートせず、ゼロから作業する。

02:11.380 --> 02:12.400
1つだけ例外があります。

02:12.400 --> 02:18.070
このテンプレートファイルをコピー＆ペーストすることで、クラスの一貫性を保つことができます。

02:18.070 --> 02:18.580
読みやすいように。

02:18.580 --> 02:21.790
ミニNBCのパッケージにはテンプレートが付属しています。

02:21.790 --> 02:28.090
それをassetsフォルダにコピーし、一貫したコーディング標準またはコーディングテンプレートを使って開いてみます。

02:28.090 --> 02:29.650
これはオプションです。

02:29.650 --> 02:32.800
各チームがそれぞれの目標に基づいて検討することをお勧めする。

02:32.800 --> 02:38.110
この議論では、コードの一貫性を保ち、より良いものにするために使用しています。

02:38.110 --> 02:39.010
を使用します。

02:39.010 --> 02:41.530
これをコピペして、新しいクラスを始めます。

02:41.530 --> 02:46.540
クラスの定義、プロパティの例、フィールドの例などがあります。

02:46.540 --> 02:48.940
プロジェクトのファイル構成について考えてみましょう。

02:48.940 --> 02:50.140
sceneフォルダがいいですね。

02:50.140 --> 02:51.580
シーン名を変更します。

02:51.580 --> 02:58.450
assetsの中にscriptフォルダを作り、runtime editorとtestフォルダを作るのが私の慣例です。

02:58.450 --> 02:58.930
の中に作ります。

02:58.930 --> 03:03.940
そして、多くの作業をしているので、ミニ構造用の専用フォルダを作成し

03:03.940 --> 03:07.210
また、モデル・ビュー・コントローラーとサービス用のフォルダも作成します。

03:07.210 --> 03:11.590
今回はサービスを作るつもりはありませんが、万が一に備えてフォルダは残しておきます。

03:11.590 --> 03:12.340
を残しておきます。

03:12.340 --> 03:14.060
サービスを追加することに意味がある

03:14.060 --> 03:16.540
シーンの階層を設定し、最初のスクリプトを作成します。

03:16.540 --> 03:21.670
Unityが提供するデフォルトのシーン構造は、1つのメインカメラと1つの指向性ライトです。

03:21.700 --> 03:27.310
個人的な好みとしては、これらをワールドゲームオブジェクトに入れることで、複雑さを隠すことができます。

03:27.310 --> 03:30.010
次に、例のゲームオブジェクトを1つ作成します。

03:30.010 --> 03:33.370
これが、処理を開始する1つのmonoビヘイビアです。

03:33.370 --> 03:37.900
計算機、ミニサンプルという名前をつけて、同じ名前のスクリプトを作ります。

03:37.900 --> 03:39.790
これが新しいファイルの出発点です。

03:39.790 --> 03:43.680
Unityが作成する際に、そのクラステンプレートを貼り付けて適切に更新します。

03:43.690 --> 03:44.710
これが更新されたファイルです。

03:44.710 --> 03:45.460
見てみましょう。

03:45.460 --> 03:48.310
このサンプルプロジェクト専用の名前空間を与えました。

03:48.310 --> 03:53.290
クラス名とファイル名を一致させ、どのようなコードが必要かを考えます。

03:53.290 --> 03:56.830
ミニを作成するスタートメソッドが必要です。

03:56.830 --> 03:59.380
ミニのクラスファイルを作成して戻ってきましょう。

03:59.380 --> 04:03.370
クラステンプレートを複製して、電卓ミニのクラスを作成します。

04:03.370 --> 04:05.350
電卓ミニクラスです。

04:05.350 --> 04:08.170
ここで、フレームワークの最初のクラスを使います。

04:08.170 --> 04:16.690
ミニMVCの基底クラスを拡張するか、インターフェイスを使うかは、メインミニのオプションです。

04:17.510 --> 04:22.580
サービスレイヤーを使用しないので、インターフェイスを使用するのは理にかなっています。

04:22.580 --> 04:23.330
柔軟性がある。

04:23.330 --> 04:26.430
ここではAIミニとVCを実装する。

04:26.450 --> 04:29.060
コードエディターによって表現方法は異なります。

04:29.090 --> 04:32.740
私のエディターでは、何かが間違っていることを示す赤いスクイグリーが表示されています。

04:32.750 --> 04:37.760
インターフェイスの実装を選択したので、コンテキストメニューを確認しますが、実際には実装していません。

04:37.760 --> 04:39.160
まだ実装していません。

04:39.170 --> 04:44.120
コードエディターがそれをやってくれる。

04:44.120 --> 04:46.340
足りないメンバーを実装することにします。

04:46.340 --> 04:48.200
デフォルトでは全てチェックしたままにしておきます。

04:48.200 --> 04:49.580
結果を見てみましょう。

04:49.580 --> 04:54.140
初期化されたプロパティと、初期化関連のメソッドがあります。

04:54.140 --> 04:58.850
これで電卓miniのコードは十分になりました。

04:58.850 --> 05:03.290
電卓ミニの例のスタートメソッドで、コーディングの仕上げをします。

05:03.290 --> 05:03.530
ここで

05:03.530 --> 05:06.890
電卓ミニのインスタンスを作成し、initializeを呼び出しています。

05:06.890 --> 05:07.940
これで完了です。

05:07.940 --> 05:12.110
このサンプルファイルでは、電卓ミニのクラス自体を続けてみましょう。

05:12.110 --> 05:17.180
ミニとVCフレームワークの使い方に慣れてきたあなたにとって、これは絶好のチャンスです。

05:17.180 --> 05:21.590
05:21.590 --> 05:21.590 --> 05:21.590 --> 05:21.590 --> 05:21.590

05:21.590 --> 05:22.760
でも、声に出して考えてみる。

05:22.760 --> 05:26.900
ミニに必要なのは、どの懸念事項をケアするかということだ。

05:27.050 --> 05:32.330
だから、それを宣言し、初期化し、必要に応じて配線する必要がある。

05:32.330 --> 05:32.840
一緒にね。

05:32.840 --> 05:34.070
では、それを実行します。

05:34.070 --> 05:37.130
まだ初期化されていなければ初期化します。

05:37.130 --> 05:42.050
そして、スタブアウトと呼ばれる一時的なコメントを書き込む。

05:42.290 --> 05:45.470
モデルとコントローラーを作成し、初期化します。

05:46.570 --> 05:52.930
以前のサンプルプロジェクトで、ビューがmonoのビヘイビアを拡張していることを思い出してください。

05:52.930 --> 05:56.600
を拡張し、シーン階層に配置するため、別の方法で設定します。

05:56.620 --> 06:01.660
コードエディターが赤く表示されているが、これはクラスが存在しないことを意味している。

06:01.660 --> 06:02.050
作成しましょう。

06:02.050 --> 06:02.370
さあ。

06:02.380 --> 06:06.110
必要な基本構造のクラステンプレートをコピーしておきます。

06:06.130 --> 06:09.420
モデル・ビュー・コントローラーのクラスを作成しました。

06:09.430 --> 06:10.270
見てみましょう。

06:10.270 --> 06:11.470
モデルクラスです。

06:11.470 --> 06:16.300
名前空間とクラスのタイトルを更新しましたが、実装はまだ追加していません。

06:16.300 --> 06:20.190
これが電卓ビュークラスで、これが電卓コントローラクラスです。

06:20.200 --> 06:23.680
これで、少なくともこれらのクラスの基本は構築できました。

06:24.370 --> 06:29.180
電卓ミニクラスに戻ってコンパイラーエラーを修正しましょう。

06:29.200 --> 06:32.200
これらのクラスを作成する間に、いくつかのエラーを解決しなければなりません。

06:32.200 --> 06:34.030
まだ見つかりません。

06:34.030 --> 06:38.860
右クリックしてみると、エディターで認識されていることがわかりますが、using文が必要です。

06:38.860 --> 06:42.700
これらのクラスは正しく動作していますが、initializeがありません。

06:42.700 --> 06:47.350
それぞれのクラスファイルに実際のコードを入れてみましょう。

06:47.350 --> 06:48.400
関数があります。

06:48.760 --> 06:50.020
ベースモデルを拡張します。

06:50.020 --> 06:51.760
ベースモデルにはinitializeが付属しています。

06:51.760 --> 06:53.140
これで完成だ。

06:53.140 --> 06:58.210
とりあえず、電卓のコントローラーについては、またカスタム機能が欲しくなりそうだ。

06:58.210 --> 06:59.680
06:59.680 --> 07:59.680

06:59.680 --> 07:05.470
さて、余談ですが、ベースコントローラーを使って空のサービスを作ることもできます。

07:05.470 --> 07:06.640
を使うこともできる。

07:06.640 --> 07:10.210
もし、将来的にサービスが必要になると考えたら。

07:10.210 --> 07:11.470
解決策としては悪くない。

07:11.470 --> 07:16.360
しかし、このプロジェクトでは、今はサービスが必要ないことが分かっているので、インターフェイスを使うことにする。

07:16.360 --> 07:20.620
の代わりにコントローラを実装し、足りないメンバーを実装することにする。

07:20.620 --> 07:24.310
ここではデフォルトの設定のままにして、得られる結果を見てみましょう。

07:24.310 --> 07:27.970
コンテキストといくつかの初期化メソッドを初期化します。

07:27.970 --> 07:29.080
今のところ必要なのはこれだけです。

07:29.080 --> 07:34.810
このように、必要な実装を追加していきながら、常に

07:34.810 --> 07:40.990
電卓ミニという最も親となる概念に戻り、次の論理的なステップを確認しながら実装していきます。

07:40.990 --> 07:46.000
別のアプローチとしては、モデルを完全に開発し、次にビューを完全に開発することである。

07:46.000 --> 07:49.870
をコントローラで開発し、最後のステップとしてミニMVCを行う。

07:49.870 --> 07:54.250
どのように進めてもかまいませんが、今回の議論では

07:54.250 --> 07:57.400
このクラスに戻り、出てきた課題を解決していく。

07:57.400 --> 08:02.350
モデルもコントローラーもコンテキストを期待しているわけです。

08:02.350 --> 08:06.070
これで、コンパイラのエラーはすべて解決したと思います。

08:06.070 --> 08:09.070
とりあえず、unityに戻って進捗状況を確認してみよう。

08:09.070 --> 08:12.190
unityではコンパイルエラーはありません。
