WEBVTT

00:00.090 --> 00:04.620
コントローラーが直接ビューを更新する場合、モデルをバイパスすることになります。

00:04.620 --> 00:09.620
本質的には、モデルのデータをビューに直接保存しているのです。

00:09.630 --> 00:15.900
そして、根本的な観点からは、MVCの懸念事項の分離から抜け出している。

00:16.020 --> 00:21.870
これを反復して、もう少し健全な原則をコードに持ち込もう。

00:22.630 --> 00:29.440
その代わりに、ユーザーが追加ボタンをクリックしたときに、コントローラーがその内容を翻訳することができます。

00:29.440 --> 00:32.500
UI value from the view into the model.

00:32.530 --> 00:33.580
それではやってみましょう。

00:33.580 --> 00:35.530
何が変わったか見てみましょう。

00:35.740 --> 00:41.830
それぞれのハンドラーをMVCの慣習に沿ったものに更新しました。

00:41.860 --> 00:47.920
今、追加すると、ビューの値を直接モデルに入れて、リセットします、

00:47.920 --> 00:53.860
少し冗長ですが、ビューをクリアして、それから

00:53.860 --> 00:54.470
モデル

00:54.490 --> 00:59.800
悪くはないのですが、この冗長さはシンプルというゴールには到達していません。

00:59.830 --> 01:05.620
ここで、ビューとモデルの間のバインディングをより良いものにするために、いくつかのオプションを用意しました、

01:05.620 --> 01:12.160 
ビューとモデルの間のより良いバインディングを作成するために、いくつかの選択肢があります。

01:12.160 --> 01:13.660
ベストプラクティスですね。

01:13.660 --> 01:21.580
別の方法として、コントローラでコマンドを発行することもできます。

01:21.580 --> 01:24.370
あるいは、Hey, view the model has changed.

01:24.370 --> 01:24.910
過去には

01:24.910 --> 01:25.930
サンプルプロジェクト

01:25.930 --> 01:31.660
このレベルではコマンドを使用してきましたが、新しいことを試すために、ザ・ビューに入って観察してみましょう。

01:31.660 --> 01:34.360
モデルに直接変更を加えてみましょう。

01:34.360 --> 01:42.580
そして、initializeの中で、コンテキストとモデルロケータを使って計算機への参照を取得します。

01:42.580 --> 01:43.030
モデル

01:43.030 --> 01:49.660
ベストプラクティスはビューがモデルから読み取ることを支持しますが、それは役割を踏み越えることになります。

01:49.660 --> 01:52.870
ビューが直接値を設定することは、ビューの役割を逸脱しています。

01:53.020 --> 02:00.090
つまり、A,B,結果で変更された値を聞いているだけです。

02:00.100 --> 02:05.680
ラムダ式と呼ばれるものを使っている。

02:05.680 --> 02:07.720
このようなケースを観察し、その結果を処理する素早い方法です。

02:07.720 --> 02:15.010
valueが変更された時のobservablesはp前の値を渡し、現在の値を見る。

02:15.010 --> 02:21.400
つまり、これらのobservableのいずれかが変更されるたびに、ビューを現在の値に更新する。

02:21.400 --> 02:22.090
数行

02:22.090 --> 02:27.280
これで、ベストプラクティスを使ってビューをモデルにバインドすることができました。

02:27.280 --> 02:32.670
電卓コントローラに戻り、イベントハンドラを元に戻します。

02:32.680 --> 02:38.620
ビューからモデルに直接バインディングを追加したので、コントローラはもはや

02:38.620 --> 02:44.500
ビューの値を手動で設定する必要がなくなりました。

02:44.500 --> 02:45.200
これも同様です。

02:45.220 --> 02:47.770
このシーンがどのような動きをするか見てみましょう。

02:47.770 --> 02:49.330
実行中のシーンです。

02:49.330 --> 02:52.270
値を入力してリセットを押してみます。

02:52.270 --> 02:59.260
リセットされると、最初はなかったフィールドにゼロが入力されます。

02:59.260 --> 03:01.120
些細なことですが、対処します。

03:01.120 --> 03:02.740
では、広告運用を試してみましょう。

03:02.740 --> 03:06.040
電卓のコントローラーでは、広告操作がうまくいきました。

03:06.040 --> 03:11.170
initializeの中でユーザーが何か入力する前に初期リセットしましょう。

03:11.170 --> 03:17.290
既存の広告リスナーを実行した後、リセットボタンが押された結果を真似てみます。

03:17.980 --> 03:19.820
シーンを実行して、結果を見てみましょう。

03:19.840 --> 03:25.410
ユーザー入力の前にアプリを実行すると、おなじみのゼロが表示されます。

03:25.420 --> 03:31.370
これは、ユーザーが対話する前と後で一貫したルック＆フィールを持つための素晴らしい方法です。

03:31.390 --> 03:33.160
これでアプリケーションは完成です。

03:33.160 --> 03:39.250
Aを入力し、Bを入力し、結果を足し合わせ、全てのフィールドをリセットすることができました。

03:39.250 --> 03:46.780
ここまでのカスタム例では、モデルビューコントローラーを使用し、イベントを観察し、結果を取得しました。

03:46.780 --> 03:48.070
アプリがうまく動くようになりました。

03:48.370 --> 03:53.170
コマンドは使っていませんし、小規模なアプリケーションであれば問題ないでしょう。

03:53.170 --> 03:56.560
しかし、コマンドを使うことでどのような付加価値が生まれるかを示したい。

03:56.560 --> 04:02.440
今あるバインディングはそのままにして、この行をコマンドに置き換えてみる。

04:02.440 --> 04:05.320
というコマンドに置き換える。

04:05.320 --> 04:06.940
まず、コマンドを呼び出します。

04:06.940 --> 04:10.960
コンテキストとコマンドマネージャーを使って新しいコマンドを呼び出します。

04:10.960 --> 04:12.990
これをリセットコマンドと呼ぶことにする。

04:13.000 --> 04:16.090
では、そのクラスを最も基本的な形で作ってみましょう。

04:16.090 --> 04:20.020
クラステンプレートを複製し、適切な場所に配置します。

04:20.020 --> 04:26.110
controllerフォルダの中にcommandフォルダを作り、resetコマンドを追加します。

04:26.110 --> 04:30.660
ここまでで、名前空間を与え、テンプレートからクラス名を更新しました。

04:30.670 --> 04:36.520
あとは、Iコマンドを実装するだけだ。

04:36.520 --> 04:38.140
電卓のコントローラで

04:38.140 --> 04:39.490
コードはいい感じです。

04:39.490 --> 04:41.550
コマンドを実行しています。

04:41.560 --> 04:43.390
誰がこれを聞く必要があるんだ？

04:43.390 --> 04:48.210
リセットのタイミングを知ることができる。

04:48.220 --> 04:53.470
この場合、"The View "にアクセスして、このコマンドをリッスンし、3つのフィールドをリセットする。

04:53.470 --> 05:00.070
電卓ビューの初期化の中で、コンテキストとコマンドマネージャを使って、次のように追加します。

05:00.070 --> 05:01.270
コマンドリスナーを追加します。

05:01.270 --> 05:06.940
リセット・コマンドが呼ばれるたびに、このコードが実行され、フィールドがリセットされる。

05:06.940 --> 05:11.860
さて、この具体例では、これは少し問題があり、冗長である。

05:11.860 --> 05:18.640
バインディングはすでに機能していたが、念のためコマンドの配線方法を示したかった。

05:18.640 --> 05:19.840
この例を実行してみよう。

05:19.840 --> 05:20.980
すべて実行中です。

05:20.980 --> 05:23.710
リセット機能がうまく機能しています。

05:23.710 --> 05:26.530
こちらも広告機能です。

05:26.530 --> 05:32.500
というわけで、この具体的なケースでは、プロジェクトを終える前にコマンドを削除することにする。

05:32.800 --> 05:39.460
コントローラーに戻ってそのコードをコメントアウトし、ビューに戻ってコメントアウトしました。

05:39.460 --> 05:42.490
をコメントアウトしました。

05:43.850 --> 05:45.020
デモを実行してみましょう。

05:45.050 --> 05:45.620
さあ、できました。

05:45.620 --> 05:46.670
デモ走行中

05:46.700 --> 05:48.230
広告運用を行います。

05:49.610 --> 05:50.630
うまくいきました。

05:50.660 --> 05:51.590
リセットします。

05:53.910 --> 05:55.140
こちらも問題なし。

05:55.170 --> 05:59.890
この電卓の例もコードベースに載せておきますので、チェックしてみてください。

05:59.910 --> 06:05.730
コーディング・チャレンジの課題を受け、見る前に自分でこれを完成させた人のために

06:05.730 --> 06:09.150
ビデオを見て、多くのことを学んだと思う。

06:09.510 --> 06:15.420
全体として、ここで使用したプロセスは、より大規模なプロジェクトやVCのプロジェクトでも使用できるものだ。

06:15.990 --> 06:21.330
まず、何が必要なのか、ユーザー・エクスペリエンスはどうなるのかを考え、そして、それを実現するためにはどうすればいいのかを考える。

06:21.330 --> 06:27.060
そして、それをモデル、ビュー、コントローラー、サービスというそれぞれの関心事に分解する。

06:27.060 --> 06:31.500
そして、その関心事に必要なベースとなる機能があれば、それを考えます。

06:31.530 --> 06:37.740
さて、今回のサンプルは非常に小さく、モデル・ビュー・コントローラーだけのシンプルなものでしたが

06:37.740 --> 06:44.730
時間分の例ですが、1ヶ月や1年の典型的なプロジェクトでは、おそらく多くのものが必要になるでしょう、

06:44.730 --> 06:49.710
多くのビュー、多くのモデル、多くのコントローラ。

06:49.710 --> 06:53.490
そのような規模のプロジェクトであっても、以下のような手順を踏むことになる。

06:53.490 --> 06:59.880
そして、このプロジェクトをスタートさせるのに費やした時間と同じ時間を、もっと大きなプロジェクトをスタートさせるのに費やすことになる。

07:01.740 --> 07:07.620
時間が経てば、それぞれの懸念事項をスケーリングしていくことになるだろう。

07:08.520 --> 07:10.860
だから2つに分けた

07:10.860 --> 07:16.360
また、プロジェクト全体で再利用できるコマンドの長いライブラリも手に入れることができる。

07:16.380 --> 07:18.450
この電卓の次のステップを想像してみてください。

07:18.450 --> 07:24.450
この電卓の次のステップを想像してみてください。

07:24.870 --> 07:27.480
あるいは単体テストを追加することである。

07:27.480 --> 07:30.600
モデル、ビュー、コントローラーをテストすることができる。

07:30.600 --> 07:35.220
追加ロジックを独自のクラスに分けることができます。

07:35.370 --> 07:41.220
私の数学システムのように、ADDメソッドとSUBTECTメソッドを持つ。

07:41.950 --> 07:46.360
このサンプルからの学びをスケールアップして前進させる素晴らしい方法だろう。

07:46.810 --> 07:48.680
電卓ミニは以上です。

07:48.700 --> 07:49.600
ありがとうございました。
