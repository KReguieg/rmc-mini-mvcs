WEBVTT

00:00.180 --> 00:03.870
では、ローラーボールのサンプルに沿ったコーディングをしてみよう。

00:04.960 --> 00:10.440
ここでは、ミニMVCフレームワークとサンプルを持ち込んだ空のプロジェクトにいます。

00:10.450 --> 00:17.050
ローラーボールのサンプルをミニで開き、コーディングの課題として何ができるか考えてみます。

00:17.200 --> 00:22.240
面白いなと思ったのは、現在矢印キーで移動できるのに対して

00:22.240 --> 00:26.170
--> 00:26.170 --> 00:26.170 --> 00:26.170 --> 00:26.170 --> 00:26.350 --> 00:26.350

00:26.350 --> 00:28.210
ではその方法を考えてみよう。

00:28.210 --> 00:34.420
キーボードの入力を取り込むのはすでにやっていることで、それは入力ビューで処理される。

00:34.540 --> 00:38.710
ではまず、入力ビューの配線を見てみましょう。

00:38.710 --> 00:40.540
これが入力ビューのクラスです。

00:40.540 --> 00:46.060
ここにカスタムイベントがあり、Arrowから動きが検出されるとブロードキャストされます。

00:46.060 --> 00:51.700
キー、入力ビュークラス自体は、シーン内のゲームオブジェクト上にあるため、モノビヘイビアです。

00:51.700 --> 00:58.420
そして、更新のハイライトをスキップして、キーの一部をキャプチャし、それを渡します。

00:58.420 --> 00:59.200
に入力される。

00:59.200 --> 01:05.950
ここで注目してほしいのは、更新のたびに入力が渡される構造になっていることだ。

01:05.950 --> 01:07.750
ユーザーがキーを押しているかどうかに関係なく。

01:07.750 --> 01:12.970
そして、典型的なunityの慣例として、移動のための矢印キーは問題ありません。

01:12.970 --> 01:19.420
スペースキーが押されたことをキャプチャして、常に2番目のキーとして渡すという方法もあります。

01:19.420 --> 01:21.280
パラメータを入力する。

01:21.280 --> 01:28.360
しかし、私の直感に基づくと、スペースキーが押されたときにすべてのフレームでfalseを渡すというアイデアは好きではない。

01:28.360 --> 01:29.320
がまだ押されていないときに

01:29.440 --> 01:34.780
その代わりに、スペースキーが押されたときだけ発生する新しいイベントを作ります。

01:34.780 --> 01:36.310
では、どのようにするのか見てみよう。

01:36.310 --> 01:39.880
まず、スペースバーのキーを取得できるようにするには、この下にあるキーを使います。

01:39.880 --> 01:43.840
スペースキーのキーコードを取得します。

01:43.840 --> 01:49.600
その場合のみ、ジャンプという新しいイベントを送信します。

01:49.600 --> 01:54.520
つまり、このイベントをアップデートに置くことで、毎フレーム発生することがわかるわけだ。

01:54.520 --> 01:56.380
あとはこれを配線するだけだ。

01:56.380 --> 02:01.960
パラメータを渡さないので、Jumpというunityイベントを追加した。

02:01.960 --> 02:07.330
このようにベースとなるunityイベントを使って、現在のスコープを見てみましょう。

02:07.330 --> 02:10.150
既存の入力イベントをリスニングしています。

02:10.150 --> 02:15.220
コントローラでリッスンし、コントローラがそれを処理していることがわかります。

02:15.220 --> 02:20.710
コントローラーがジャンプの結果も処理するというアイデアが気に入ったので、このコードを複製してみます。

02:20.710 --> 02:21.550
を更新します。

02:21.550 --> 02:23.890
これが入力のハンドラーですね。

02:23.890 --> 02:26.710
基本的に同じコンセプトをコピーして更新します。

02:26.710 --> 02:31.570
ここで新しいメソッドを作ったので、あとは適切なメソッドを作るだけです。

02:31.570 --> 02:32.200
コマンドを実行する。

02:32.200 --> 02:38.620
つまり、コントローラーがUIイベントをリスニングし、それをコマンドに変換しているのだ。

02:38.620 --> 02:43.240
ラジオ局のように、特定の関心事がこれにチューニングできるように？

02:43.240 --> 02:46.330
"ジャンプ "コマンドを一から作るよ

02:46.330 --> 02:52.090
これが既存の入力コマンドです。

02:52.090 --> 02:53.320
02:52.090 --> 02:53.320

02:53.560 --> 02:57.490
パラメータは必要ないので、Iコマンドを拡張すればいい。

02:57.490 --> 02:59.080
新しいコマンドを作りました。

02:59.080 --> 03:01.150
では、これを誰が見るべきかを考えてみよう。

03:01.150 --> 03:05.680
さて、入力コマンドの場合、入力コマンドを観察するのは選手です。

03:05.680 --> 03:08.560
では、どのような懸念があるのだろうか？

03:08.560 --> 03:14.380
まあ、入力コマンドは選手によって観察されるので、どう動けばいいかはわかります。

03:14.380 --> 03:15.460
それでいいと思う。

03:15.460 --> 03:17.170
では、選手登録をしてみましょう。

03:17.170 --> 03:18.790
プレーヤービューが表示されました。

03:18.790 --> 03:24.190
プレイヤー・ビューはシーンのゲーム・オブジェクトの上にあるため、モナークの動作を拡張しています。

03:24.190 --> 03:26.920
initializeで入力コマンドを聞いています。

03:26.920 --> 03:28.030
複製してみましょう。

03:28.030 --> 03:30.070
今度はジャンプコマンドを聞いています。

03:30.120 --> 03:31.330
結果を処理しましょう。

03:31.330 --> 03:35.500
入力コマンドがどのように設定され、適切な物理演算を呼び出すかがわかる。

03:35.500 --> 03:37.750
ジャンプコマンドのハンドラを作った。

03:37.750 --> 03:39.730
あとは物理演算を考えるだけだ。

03:39.730 --> 03:44.080
ジャンプが押された瞬間に上方向に力を加えればなんとかなるはず。

03:44.080 --> 03:48.760
まず、パラメータは必要ないが、ジャンプコマンドを入力する必要がある。

03:48.760 --> 03:49.570
そのコマンドは必要ない。

03:49.570 --> 03:53.050
これはunityシーンの典型的なセットアップで必要な規則です。

03:53.050 --> 03:55.480
上向きになっているのはY成分です。

03:55.480 --> 04:00.700
つまり、Y方向が上向きの力を加えれば、ジャンプのような結果が得られるはずだ。

04:00.700 --> 04:01.240
となるはずだ。

04:01.240 --> 04:02.860
シーンを再生して確認してみましょう。

04:02.860 --> 04:06.310
先ほどと同じように矢印キーを使ってシーンを再生します。

04:06.310 --> 04:08.320
今度はスペースキーです。

04:20.400 --> 04:21.360
これでゲームが動きます。

04:21.360 --> 04:24.370
今までと同じように矢印キーを使ってみます。

04:24.370 --> 04:26.430
新しいスペースキーはすごくいいみたいです。

04:26.460 --> 04:32.100
このゲームでは避けるべき敵や障害物はありません。

04:32.100 --> 04:33.300
を追加するのがいいでしょう。

04:33.300 --> 04:38.310
次に、ジャンプができるようになったからこそ理解できる新しいゲームプレイのメカニズム。

04:38.310 --> 04:40.430
しかし、今回のコーディングはここまでです。

04:40.440 --> 04:41.190
ありがとう。
