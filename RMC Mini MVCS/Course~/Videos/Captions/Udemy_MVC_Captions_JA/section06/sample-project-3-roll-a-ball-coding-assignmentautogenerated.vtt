WEBVTT

00:00.180 --> 00:03.870
Ahora vamos a hacer una tarea de codificación junto con el ejemplo de Rollerball.

00:04.960 --> 00:10.440
Así que aquí estoy en un proyecto vacío donde he traído el framework mini MVCs, así como las muestras.

00:10.450 --> 00:17.050
Voy a abrir la muestra Rollerball con Mini y pensar en lo que podría hacer aquí como una tarea de codificación.

00:17.200 --> 00:22.240
Algo que pensé que sería interesante es que mientras que actualmente puedes usar las teclas de flecha para moverte

00:22.240 --> 00:26.170
podríamos hacer que la barra espaciadora representara un salto.

00:26.350 --> 00:28.210
Así que vamos a pensar en cómo lo haríamos.

00:28.210 --> 00:34.420
Bueno, tomar la entrada del teclado es algo que ya hacemos, y que es manejado por la vista de entrada.

00:34.540 --> 00:38.710
Así que vamos a empezar por mirar a la vista de entrada y ver cómo está conectado.

00:38.710 --> 00:40.540
Esta es la clase de la vista de entrada.

00:40.540 --> 00:46.060
Tenemos un evento personalizado aquí que va a ser emitido cada vez que se detecte movimiento de la Flecha

00:46.060 --> 00:51.700
Keys, la propia clase de vista de entrada, ya que se encuentra en un objeto de juego en la escena, es un comportamiento mono.

00:51.700 --> 00:58.420
Y saltando aquí abajo a lo más destacado en la actualización que hacemos la captura de algunas de las claves y pasar que

00:58.420 --> 00:59.200
como entrada.

00:59.200 --> 01:05.950
Observe aquí, la forma en que esto está estructurado es que la entrada se pasa cada actualización, sin tener en cuenta

01:05.950 --> 01:07.750
si el usuario pulsa una tecla o no.

01:07.750 --> 01:12.970
Y según la convención típica de unity para las teclas de flecha para el movimiento, eso está bien.

01:12.970 --> 01:19.420
Una opción que tengo sería capturar la barra espaciadora al ser pulsada y pasarla siempre quizás como un segundo

01:19.420 --> 01:21.280
parámetro de entrada.

01:21.280 --> 01:28.360
Pero sólo basándome en mi intuición, no me gusta la idea de que en cada fotograma pase false cuando la barra espaciadora

01:28.360 --> 01:29.320
aún no se ha pulsado.

01:29.440 --> 01:34.780
Así que en su lugar lo que voy a hacer es crear un nuevo evento que sucede sólo cuando se pulsa la barra espaciadora.

01:34.780 --> 01:36.310
Echemos un vistazo a cómo hacerlo.

01:36.310 --> 01:39.880
Bueno, lo primero, para poder conseguir la tecla de la barra espaciadora, lo haremos aquí abajo.

01:39.880 --> 01:43.840
Obtenemos la tecla de abajo para el código de la barra espaciadora.

01:43.840 --> 01:49.600
Y sólo si ese es el caso enviaremos un nuevo evento llamado on Jump.

01:49.600 --> 01:54.520
Así que colocando esto como una actualización, sabemos que va a ocurrir en cada fotograma, lo cual es genial.

01:54.520 --> 01:56.380
Y ahora sólo tenemos que cablear esto.

01:56.380 --> 02:01.960
Así que he añadido mi propio evento unity aquí llamado on Jump porque no estoy pasando ningún parámetro.

02:01.960 --> 02:07.330
Voy a utilizar el evento unity base como se muestra aquí y luego vamos a echar un vistazo a lo que los ámbitos son actualmente

02:07.330 --> 02:10.150
escuchando el existente en la entrada.

02:10.150 --> 02:15.220
Bien, puedo ver aquí en el controlador que escuchamos y el controlador lo maneja.

02:15.220 --> 02:20.710
Me gusta la idea de que el controlador también maneje la consecuencia del salto, así que duplicaré este código

02:20.710 --> 02:21.550
aquí y lo actualizaré.

02:21.550 --> 02:23.890
Veo aquí el manejador para la entrada.

02:23.890 --> 02:26.710
Básicamente copiaré ese mismo concepto y lo actualizaré.

02:26.710 --> 02:31.570
Así que aquí he creado un nuevo método y todo lo que tengo que hacer es terminar esto haciendo lo apropiado

02:31.570 --> 02:32.200
comando.

02:32.200 --> 02:38.620
Así que de nuevo, aquí está el controlador escuchando este evento UI y traduciéndolo en un comando

02:38.620 --> 02:43.240
para que, como en una emisora de radio, cualquier interés particular pueda sintonizarlo.

02:43.240 --> 02:46.330
Crearé el comando de salto desde cero para terminar esto.

02:46.330 --> 02:52.090
Aquí está el comando de entrada existente que está tomando un parámetro para un vector tres de la cantidad de entrada en

02:52.090 --> 02:53.320
cada una de las direcciones.

02:53.560 --> 02:57.490
Realmente no necesito un parámetro aquí, así que puedo extender el comando I en su lugar.

02:57.490 --> 02:59.080
Así que he creado el nuevo comando.

02:59.080 --> 03:01.150
Y ahora pensemos ¿quién debería observar esto?

03:01.150 --> 03:05.680
Bueno, en el caso del comando de entrada, es el jugador el que observa el comando de entrada.

03:05.680 --> 03:08.560
Y ahora pensemos ¿qué preocupaciones deben sintonizar con esto?

03:08.560 --> 03:14.380
Bueno, el comando de entrada sé que es observado por el jugador para que sepa cómo moverse.

03:14.380 --> 03:15.460
Eso suena bien.

03:15.460 --> 03:17.170
Así que vamos al reproductor y nos suscribimos.

03:17.170 --> 03:18.790
Aquí estamos en la vista del reproductor.

03:18.790 --> 03:24.190
La vista del jugador desde que se sienta en un objeto de juego en la escena, extiende el comportamiento monarca y aquí abajo

03:24.190 --> 03:26.920
en la inicialización, está escuchando el comando de entrada.

03:26.920 --> 03:28.030
Vamos a duplicar eso.

03:28.030 --> 03:30.070
Así que ahora estamos escuchando el comando de salto.

03:30.120 --> 03:31.330
Manejemos la consecuencia.

03:31.330 --> 03:35.500
Ahí vemos como el comando de entrada se configura y luego llama a la física apropiada.

03:35.500 --> 03:37.750
Así que he creado un manejador para el comando de salto.

03:37.750 --> 03:39.730
Ahora sólo tengo que pensar en la física.

03:39.730 --> 03:44.080
Si añado una fuerza hacia arriba en el momento en que se pulsa saltar, eso debería solucionarlo.

03:44.080 --> 03:48.760
Primero, tengo que recordar pasar el comando de salto como requerido, aunque no necesito ningún parámetro

03:48.760 --> 03:49.570
de ese comando.

03:49.570 --> 03:53.050
Esta es la convención requerida con la configuración típica de una escena unity.

03:53.050 --> 03:55.480
Es el componente Y el que está hacia arriba.

03:55.480 --> 04:00.700
Así que si aplico una fuerza aquí que es hacia arriba en la Y, deberíamos ser capaces de obtener el resultado de salto que

04:00.700 --> 04:01.240
queremos.

04:01.240 --> 04:02.860
Vamos a reproducir la escena y comprobarlo.

04:02.860 --> 04:06.310
Aquí está la escena reproduciéndose usando las teclas de flecha como antes.

04:06.310 --> 04:08.320
Y ahora probaré con la barra espaciadora.

04:20.400 --> 04:21.360
Aquí está el juego corriendo.

04:21.360 --> 04:24.370
Usaré las flechas del teclado como hasta ahora, y probaré.

04:24.370 --> 04:26.430
La nueva barra espaciadora parece funcionar muy bien.

04:26.460 --> 04:32.100
Ahora, en el contexto de este juego, no tenemos enemigos u obstáculos que evitar, así que eso sería

04:32.100 --> 04:33.300
sería algo genial que añadir.

04:33.300 --> 04:38.310
A continuación, nuevas mecánicas de juego que tienen sentido ahora que tenemos la capacidad de saltar.

04:38.310 --> 04:40.430
Pero eso es todo por ahora para esta tarea de codificación.

04:40.440 --> 04:41.190
Gracias.
