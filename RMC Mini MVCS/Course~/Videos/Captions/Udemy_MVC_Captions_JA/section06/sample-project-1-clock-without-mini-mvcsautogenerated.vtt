WEBVTT

00:00.120 --> 00:04.320
MVCをあまり使わない時計のサンプルを見てみよう。

00:04.620 --> 00:06.670
Unityの中です。

00:06.690 --> 00:13.170
最新のTFSバージョンのUnity Editorを使って、新しいUnityプロジェクトを立ち上げました。

00:13.170 --> 00:18.930
コース序盤の指示に従って、mini MVCsパッケージを追加し、インポートしました。

00:18.930 --> 00:19.840
サンプルをインポートしました。

00:19.860 --> 00:25.290
ここでは、時計のサンプルを見ていきますが、まずは数が少ないバージョンから見ていきます、

00:25.290 --> 00:26.580
MVCが追加されています。

00:26.610 --> 00:31.440
unityの基礎知識の復習のような感じになると思われます。

00:31.470 --> 00:32.770
シーンを動かしてみましょう。

00:32.790 --> 00:34.650
それではシーンを動かしてみましょう。

00:34.650 --> 00:41.010
UIはありませんが、コンソールウィンドウにデバッグログが表示されています。

00:41.010 --> 00:42.870
UIのようなものです。

00:42.870 --> 00:47.160
ユーザー入力はありませんが、毎秒デバッグログが表示されます。

00:47.310 --> 00:48.770
これが全体の例です。

00:48.780 --> 00:51.620
階層ビューのコードを見てみましょう。

00:51.630 --> 00:56.760
空のワールドゲームオブジェクトがあり、デフォルトのカメラと照明があります。

00:56.760 --> 01:01.770
ライティングでカメラを実際に使うわけではありませんが、一貫性を保つために、すべてのオブジェクトにライティングを設定しています。

01:01.770 --> 01:02.400
のシーンで使っている。

01:02.610 --> 01:06.450
それから、例のスクリプトでゲームオブジェクトを1つ用意しました。

01:06.450 --> 01:08.190
例のスクリプトを開いてみましょう。

01:08.190 --> 01:11.940
これがこのシーン全体を動かすスクリプトです。

01:12.210 --> 01:13.410
これがその例です。

01:13.410 --> 01:15.840
monoの動作を拡張しているのがわかります。

01:16.350 --> 01:20.280
コードをざっと読んでから、一行ずつ見ていきます。

01:40.730 --> 01:43.810
最初の例では、基本的なことを説明します。

01:43.820 --> 01:48.350
このクラスが参照できる他のクラスをusing文で指定します。

01:48.350 --> 01:51.350
このサンプルクラスに適した名前空間を用意しました。

01:51.350 --> 01:53.060
ここにクラスの定義があります。

01:53.060 --> 01:54.650
monoの動作を拡張しています。

01:54.650 --> 01:56.240
プライベートフィールドがあります。

01:56.240 --> 01:59.240
これらはこの例で使用する変数です。

01:59.240 --> 02:05.000
INTやfloatを直接使うのではなく、observableクラスを使っていることに注目してください。

02:05.000 --> 02:07.490
これは以前のセクションで説明しました。

02:07.490 --> 02:11.570
しかし、observableクラスがいくつかの追加機能を与えてくれることを覚えておいてください。

02:11.570 --> 02:17.870
タイムディレイの場合、INTを保存しているわけですが、それ以外にも

02:17.870 --> 02:19.760
intの値が変化するたびにイベントがディスパッチされます。

02:19.760 --> 02:26.330
これで、オブザーバー・パターンをシンプルなデータの一部に取り入れることができました。

02:26.360 --> 02:32.810
ミニMVCを使用する場合はオプションですが、Unity Startメソッド内では次のように呼び出すことを強くお勧めします。

02:32.810 --> 02:33.230
を呼び出します。

02:33.230 --> 02:39.800
シーンが目を覚ますと、このサンプルとすべてのサンプルを読み込んで開始します。

02:39.800 --> 02:41.570
ローカルファイルを読み込みます。

02:41.570 --> 02:48.740
MVCの世界では、このサンプルを見てバックエンドサーバーを呼び出す真似をします。

02:48.740 --> 02:54.950
ローカルのファイルを読み込むのはとても簡単ですが、非同期で外部データなので適切です。

02:54.950 --> 02:56.600
サービス範囲に適しています。

02:56.600 --> 03:02.870
これはちょっと作為的で愚かな例だが、もちろん時間の値をハードコードすることも可能だからだ。

03:02.870 --> 03:04.100
嬰ハ音記号で

03:04.100 --> 03:07.520
しかし、ここでもサンプルとしてプロジェクト・ウィンドウに表示されます。

03:07.520 --> 03:13.160
ローカルテキストファイルの場所と、テキストファイルの中身を見ることができます。

03:13.280 --> 03:17.000
単純に文字列を入力するだけです。

03:17.000 --> 03:23.360
INT さて、もちろんこの1000という値はC-嬰でハードコードすることもできますが、これは単なる説明です。

03:23.360 --> 03:24.890
のように外部データをロードします。

03:24.890 --> 03:29.930
テキストを読み込み，遅延をシミュレートするために0.5秒待ちます。

03:29.930 --> 03:36.350
これは、より複雑な例で微妙な遅延を考慮する場合に役立ちます。

03:36.350 --> 03:41.360
実際のバックエンドサービスを呼び出して、ロードに成功したとして

03:41.360 --> 03:47.120
この文字列の値をint型に変換します。

03:47.120 --> 03:51.590
そのため、値を設定する際には、ドット値のプロパティを設定する必要があります。

03:51.590 --> 03:56.960
この方法の利点は、値が設定されるたびに自動的にイベントがディスパッチされることです。

03:56.960 --> 03:57.710
変更されます。

03:57.710 --> 04:03.260
この単純な例では、この機能はあまり利用されていませんが、後のコードで見ていきましょう。

04:03.260 --> 04:05.870
これで読み込みに成功しました。

04:05.870 --> 04:07.430
これが時計本体です。

04:07.430 --> 04:12.350
コードが繰り返し呼び出されるようにするために、unity内部でできることはたくさんあります。

04:12.350 --> 04:17.240
最も基本的で一般的なものはコードルーチンを使うことです。

04:17.390 --> 04:20.270
ここではコードルーチンを起動するだけです。

04:20.270 --> 04:21.890
これが繰り返し呼び出される。

04:21.890 --> 04:23.960
というわけで、これは作為的な例です。

04:23.960 --> 04:30.380
ただ、実際の秒数を1秒から無限大まで刻んでみたかっただけなんだ。

04:30.380 --> 04:35.350
シーンが開いている限り、unityからtime, timeを使って取得する。

04:35.360 --> 04:42.650
その都度、time変数を更新し、その結果を処理するために別のハンドラを呼び出します。

04:42.650 --> 04:44.240
ここでその結果を処理する。

04:44.240 --> 04:49.220
そして単純に、明示的なビューを持たない例が欲しかったのです。

04:49.220 --> 04:57.130
そのため、複雑な機能を追加することなく、ある種のユーザーフィードバックをシミュレートするデバッグ・ログをここに表示するだけです。

04:57.140 --> 04:59.030
もう一回シーンを実行してみましょう。

05:05.720 --> 05:07.310
時計の針が動いているのが見えます。

05:07.430 --> 05:08.240
以上です。

05:09.440 --> 05:13.450
これでMVCがなくても時計は動くようになった。

05:13.460 --> 05:16.430
この後、復習があると思います。

05:16.460 --> 05:23.630
クラス、メソッド、変数、プロパティ、イベント、シリアライズされたフィールドなどを見てきました。

05:23.660 --> 05:29.720
これは、ミニに進む前に共通の理解として持っておくのに良い統一基盤です。

05:29.720 --> 05:31.040
MVCの例

05:31.820 --> 05:32.540
ありがとう。
