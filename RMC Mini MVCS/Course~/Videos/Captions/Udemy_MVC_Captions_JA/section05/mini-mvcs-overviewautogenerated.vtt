WEBVTT

00:00.330 --> 00:03.630
ミニMDCのUnity用アーキテクチャ。

00:03.630 --> 00:08.820
Unityの長年の経験から、ミニMVCのアーキテクチャを作りました。

00:08.820 --> 00:12.740
このコースでは、ミニまたはミニMVCと呼ぶことがあります。

00:12.750 --> 00:17.580
このフレームワークを作ったとき、私は過去のアーキテクチャ・フレームワークから学んだことを応用しました。

00:17.580 --> 00:23.910
ジェネリックスの使用、強力な型付け、コマンドパターンやオブザーバーの使用などです。

00:23.910 --> 00:26.550
パターンを使うことです。

00:26.550 --> 00:32.670
他のMVCベースのアーキテクチャと同様に、実績のあるソリューションであるという利点があります。

00:32.670 --> 00:34.080
言語にとらわれない。

00:34.080 --> 00:39.300
00:34.080→00:39.300このようなアプローチは様々な言語やプラットフォームで見つけることができます。

00:39.300 --> 00:45.300
MINIを使用することで、よりテストしやすい環境を提供し、より迅速な開発、より分かりやすい開発を可能にする。

00:45.300 --> 00:46.650
プロジェクトのメンテナンス

00:46.650 --> 00:49.080
いくつかの特徴は以下の通りです。

00:49.080 --> 00:53.310
MINIと呼ばれる理由のひとつは、クラスやコンセプトが非常に少ないことです。

00:53.310 --> 00:56.820
また、特に金銭的な行動を伴わないからです。

00:56.820 --> 00:58.560
金銭的な行動はここではオプションです。

00:58.560 --> 01:04.140
核となるものはインターフェイスを拡張するものであり、ビヘイビアは必要ありません。

01:04.530 --> 01:09.180
ビヘイビアはオプションとなり、4つの関心事すべてに使用することができます。

01:09.180 --> 01:13.590
どのコンサドーレも、あるいはどのコンサドーレも、あなたのプロジェクトに最適な組み合わせで使用することができます。

01:13.590 --> 01:17.280
これは、このフレームワークが意見を重視するフレームワークであるという別の特徴を示している。

01:17.280 --> 01:22.770
このように、提案された道筋はありますが、プロジェクトのニーズに応じて柔軟に対応することも可能です。

01:22.770 --> 01:26.370
このシステムをマッサージすることで、あなたのユースケースに最適な結果を得ることができます。

01:26.370 --> 01:32.670
このフレームワークは、あなたのプロジェクトにおけるプロダクションユースケースに最適です。

01:32.670 --> 01:33.360
を使います。

01:33.360 --> 01:37.650
そのため、このコースではMVCの概念を教えるためにMVCに焦点を当てています。

01:37.650 --> 01:42.300
このUMLダイアグラムで、MVCに関連するクラスを説明してみましょう。

01:42.300 --> 01:47.520
ここでは、モデル、ビュー、コントローラー、サービスというおなじみの主要な関心事を見ることができます。

01:47.550 --> 01:51.090
unityエンジンに直接依存していないことに注目してください。

01:51.090 --> 01:53.220
monoの動作はもう必要ありません。

01:53.220 --> 01:55.530
実装方法に柔軟性がある。

01:55.530 --> 02:01.740
この例では、ミニとVCをサブクラスにしています。

02:01.740 --> 02:07.110
このフレームワークや他のunity特有のフレームワークを見るとき、考慮すべき点がいくつかある。

02:07.110 --> 02:08.610
を自問自答することができる。

02:08.610 --> 02:12.030
unity特有の機能はありますか？

02:12.030 --> 02:12.450
いいえ。

02:12.450 --> 02:16.560
依存せず、monoの動作を要求することにしました。

02:16.560 --> 02:19.470
例えば、自分でそれを追加することもできる。

02:19.470 --> 02:25.110
モノビヘイビアやスクリプト可能なオブジェクトのようなものを使用する柔軟性はあるが、それらは必須ではない

02:25.110 --> 02:26.340
コアフレームワークの一部です。

02:26.340 --> 02:28.170
これは物事を軽くしておきたいという願いからだった。

02:28.170 --> 02:30.150
モノビヘイビアの役割とは？

02:30.150 --> 02:31.230
まあ、オプションですね。

02:31.230 --> 02:33.030
4つの悩みに対して

02:33.030 --> 02:35.250
モノの振る舞いを拡張するかしないか。

02:35.250 --> 02:39.390
では、懸念事項、通信における規約をどのように扱うのでしょうか？

02:39.390 --> 02:43.560
プロジェクト内で、デフォルトでミニが1つ、または複数あるとします。

02:43.560 --> 02:48.180
プロジェクトに1つ追加すると思いますが、それを分割して通信させることもできます。

02:48.180 --> 02:50.280
02:50.280 --> 02:50.280 --> 02:50.280

02:50.280 --> 02:54.240
02:50.280→02:50.280→02:50.280

02:54.240 --> 03:00.390
最低でもミニ1台とコントローラー1台は必要だろうけど、それ以外にも複数の

03:00.390 --> 03:05.730
コントローラ、複数のビュー、複数のモデル、複数のサービス。

03:05.730 --> 03:07.560
だから、ニーズに合わせて拡張できる。

03:07.560 --> 03:10.470
|にできるようにあなたがそれをすることができますようにあなたがそれをすることができます。

03:10.470 --> 03:16.860
このような提案は、どのような設定や要件よりもはるかに重要です。

03:16.860 --> 03:22.500
これはフレキシビリティを可能にするものですが、それでも私は、あなたの懸念を分離することに警戒することをお勧めします。

03:22.500 --> 03:27.360
しかし、私はやはり、自分の関心ごとをしっかりと分けて考えることを勧める。

03:27.360 --> 03:31.650
コミュニケーションといえば、システムは2層のコミュニケーションをサポートしている。

03:31.650 --> 03:34.830
イベントとコマンドの両方があります。

03:34.830 --> 03:39.370
この2つがオプションとして用意されていることは、後述するように非常に強力だ。

03:39.390 --> 03:42.900
そして最後に、剛性と柔軟性のバランスとは？

03:42.900 --> 03:48.900
このフレームワークの基本理念は、可能な限り柔軟で軽量であることだ。

03:48.900 --> 03:54.210
しかし、アーキテクチャを使用することで得られる多くの利点を維持するためには、いくつかのルールがある。

03:54.210 --> 03:58.800
そして、どのように適用するにしても、一貫して適用することをお勧めする。

03:58.800 --> 04:05.520
だから、このコースと我々の議論の目的のために、ミニとVCを我々の選択した統一体として選出する。

04:05.520 --> 04:10.590
そして、このコースでどのように情報を提供するかということが重要な要素となる。

04:10.590 --> 04:16.440
このコースでは、どのMVCフレームワークを選んでも、あるいは自分でフレームワークを作っても構いません。

04:16.440 --> 04:23.190
デザイン原則、デザインパターン、先ほど話したダイアグラムの使い方、そして経験。

04:23.190 --> 04:28.380
そして、これらの学習はどのようなアーキテクチャにも適用することができる。

04:28.380 --> 04:28.890
を選べばいい。

04:28.890 --> 04:30.240
さあ、始めよう。

04:30.240 --> 04:34.560
このコースにミニMVCを選んだ経緯と理由を説明します。

04:34.560 --> 04:39.780
何年もかけて様々なプロジェクトでアーキテクチャーを学び、適用してきた結果、そして教えたいと思ったからです。

04:39.780 --> 04:44.340
このようなコンセプトについてもっと学びたいと思ったとき、それは大きなテーマであり、学ぶべきことがたくさんあることに気づきました。

04:44.340 --> 04:51.390
私は、これらのコンセプトを実際にプロジェクトで使用することをお勧めします。

04:51.390 --> 04:55.260
これらのコンセプトを既存のプロジェクトに取り入れるのです。

04:55.260 --> 04:59.760
そうして初めて、これらのソリューションのメリットを実感し、学ぶことができるのです。

05:00.060 --> 05:05.400
ユニティという観点から、最適なアーキテクチャについてあらゆる選択肢を検討しました。

05:05.400 --> 05:10.200
素晴らしい選択肢はたくさんあるが、それらはしばしば、その特異性を学ぶ複雑なものである。

05:10.200 --> 05:10.950
05:10.200 --> 05:10.950

05:10.950 --> 05:16.410
そこで、MVCの概念を簡単に学べるミニMVCを作りました。

05:16.440 --> 05:20.790
このミニMVCは制作も可能ですが、あくまで教育用です。

05:20.790 --> 05:26.340
そのため、より深く理解することができ、それに基づいたサンプルを見ることができます。

05:26.340 --> 05:27.000
05:27.000 --> 05:27.000

05:27.000 --> 05:32.310
コースの終わりには、この特定のソリューションであれ、他のアーキテクチャであれ、それが私の望みです、

05:32.310 --> 05:37.230
このコースの最後には、あるアーキテクチャを使うことの利点を理解し、それを応用するスキルを身につけていることを望みます。

05:37.620 --> 05:38.460
ありがとう。
