WEBVTT

00:00.150 --> 00:06.650
Hier bin ich in einem leeren Unity-Projekt, das mit vielen NPCs eingerichtet ist und die Beispiele importiert hat.

00:06.660 --> 00:10.170
Hier ist die Ordnerstruktur für die Version des Spiels mit Mini.

00:10.770 --> 00:15.360
Wir haben diese Ordnerstruktur bereits in früheren Beispielen gesehen, daher werde ich nicht weiter ins Detail gehen.

00:15.360 --> 00:20.400
Eine Sache, die ich erwähnen möchte, ist, dass ich die Komponente "Pickup" nur zur Demonstration gewählt habe

00:20.430 --> 00:24.750
außerhalb der Mini-MVC-Struktur und innerhalb des Codes zu haben.

00:24.750 --> 00:26.880
Während der Beispielübersicht werde ich erwähnen, warum.

00:26.880 --> 00:29.460
Beginnen wir mit dem Öffnen des Hauptbeispielskripts.

00:29.460 --> 00:34.200
Hier sind wir im Hauptbeispielskript, wie wir es schon vorher gemacht haben, Dieses erweitert das Mono-Verhalten und hier haben wir

00:34.200 --> 00:40.440
haben ein paar serialisierte Felder in früheren Beispielen haben wir maximal ein serialisiertes Feld an dieser Stelle gesehen

00:40.440 --> 00:40.980
Ebene.

00:40.980 --> 00:42.320
Aber hier haben wir drei.

00:42.330 --> 00:46.800
Das liegt daran, dass diese Version von Mini MVCs drei Ansichten hat.

00:46.800 --> 00:51.780
Es gibt viele Möglichkeiten, wie man die Views in das Framework integrieren kann, aber ein schöner Ablauf, den ich hier habe, ist

00:51.780 --> 00:57.480
sie im Beispielskript zu serialisieren und dann Referenzen aus den zugehörigen Spielobjekten von

00:57.480 --> 01:01.170
View, Player und UI in das Inspektorfenster.

01:01.170 --> 01:06.450
Hier im Start erstellen wir die Miniklasse, übergeben diese Referenzen und initialisieren.

01:06.450 --> 01:08.250
Werfen wir einen Blick auf die Szenenhierarchie.

01:08.250 --> 01:14.820
Hier in der Szenenhierarchie hat das Hauptbeispielskript drei serialisierte Referenzen, die ich

01:14.820 --> 01:19.080
Referenzen zu den anderen drei Spielobjekten in der Szene eingefügt habe.

01:19.080 --> 01:24.810
Wir haben die Spieleransicht mit einem Skript, wir haben die Eingabeansicht mit einem Skript und wir haben die UI-Ansicht

01:24.810 --> 01:25.650
mit einem Skript.

01:25.650 --> 01:32.460
Sie können sich vorstellen, dass Sie bei einem komplexeren Projekt Ihre UI und andere Ansichtselemente aufteilen möchten in

01:32.460 --> 01:33.930
mehrere Spielobjekte aufteilen.

01:34.760 --> 01:40.460
Jedes dieser Objekte kann unabhängig behandelt werden oder vielleicht verschiedenen Entwicklern zugewiesen werden, die weniger Gelegenheit haben

01:40.460 --> 01:43.130
für Konflikte und Arbeitsüberschneidungen.

01:43.160 --> 01:49.610
Die Argumentation ist logisch, denn der Spieler hat eine andere Rolle im Spiel als die UI, und die

01:49.610 --> 01:51.410
Input ist auch ganz anders.

01:51.440 --> 01:53.060
Schauen wir uns den Code noch einmal an.

01:53.060 --> 01:54.780
Hier sind wir im Rollerball mini.

01:54.800 --> 01:57.990
Hier implementiere ich I Mini NBCs.

01:58.010 --> 02:03.860
In den vorangegangenen Beispielen haben wir die MVC-Basisklasse Mini unterteilt.

02:04.540 --> 02:05.320
Unterklassen.

02:05.350 --> 02:10.290
Macht Sinn, wenn man genau einen Model-View-Controller und Service haben möchte.

02:10.300 --> 02:13.210
Für einfache Projekte ist es üblich, jeweils eine Klasse zu haben.

02:13.210 --> 02:14.920
Das ist also der Standard, der Sinn macht.

02:14.920 --> 02:20.350
Hier jedoch, weil wir mehr Granularität haben werden, wenn wir das Projekt vergrößern, implementieren wir einfach Folgendes

02:20.350 --> 02:25.450
Schnittstelle, und das gibt uns mehr Flexibilität, die Dinge so zu strukturieren, wie wir sie hier in den Eigenschaften haben wollen.

02:25.450 --> 02:29.560
Wir richten die Initialisierung im Kontext ein, so wie wir es zuvor und in anderen Beispielen getan haben.

02:29.560 --> 02:37.180
Wir richten unser Modell ein, wir richten mehrere Views ein, wir richten mehrere Controller ein und wir richten unseren Service ein

02:37.180 --> 02:38.500
hier unten im Konstruktor.

02:38.500 --> 02:42.460
Wir akzeptieren die drei Parameter, die den UI's entsprechen.

02:42.460 --> 02:48.010
Erinnern Sie sich, das sind serialisierte Felder und der Einfachheit halber werden sie einfach in die Szene gezogen und der Einfachheit halber

02:48.010 --> 02:49.930
der Einfachheit halber werden sie hier durchgereicht.

02:49.930 --> 02:55.410
In unserem initialize richten wir den Kontext, den Model Service und den Controller ein, wie wir es schon gesehen haben.

02:55.420 --> 02:59.680
Beachten Sie, dass wir hier im Controller mehr Parameter als zuvor verwenden.

02:59.680 --> 03:00.640
Genau wie hier.

03:00.640 --> 03:03.310
Mini hat einige zusätzliche Ansichten und Steuerungen.

03:03.310 --> 03:06.640
Dieser Konstruktor selbst benötigt ein paar zusätzliche Parameter.

03:06.640 --> 03:12.760
Die Reihenfolge, in der wir die Dinge hier initialisieren, ist im Allgemeinen nicht wichtig, aber da die Controller oft

03:12.760 --> 03:20.020
Parameter in ihrem Konstruktor nehmen, erstellen wir die Controller zuletzt und initialisieren sie auch zuletzt, so dass

03:20.020 --> 03:21.430
Weise, wenn sie initialisiert werden.

03:21.430 --> 03:26.920
Wir wissen, dass die Teile, die wir ihnen vorher übergeben haben, bereits initialisiert sind.

03:26.920 --> 03:28.000
die wir initialisiert haben.

03:28.000 --> 03:34.960
Wir haben bereits in früheren Beispielen Beispiele für das Modell, die Controller und den View gesehen.

03:34.960 --> 03:38.860
Ich werde mir jetzt den Controller ansehen, da er etwas Einzigartiges tut.

03:38.860 --> 03:42.070
Hier sind wir in der Controller-Klasse und einigen früheren Beispielen.

03:42.070 --> 03:45.640
Wir haben gesehen, dass unser Controller einen Basis-Controller erweitert.

03:45.640 --> 03:52.540
Wiederum macht die Basis den meisten Sinn, wenn man ein Model, einen View, einen Controller und einen Service hat,

03:52.540 --> 03:54.010
was ein guter Standard ist.

03:54.130 --> 03:59.560
Wenn Sie jedoch mehr davon haben wollen, z.B. mehrere Views.

04:00.400 --> 04:02.620
Wir brauchen einen eigenen Controller, um diese zu verwalten.

04:02.620 --> 04:08.070
Hier implementieren wir also einen AI-Controller, wie wir ihn schon gesehen haben, und dann machen wir die benutzerdefinierte Implementierung unten.

04:08.080 --> 04:11.290
Wir behandeln die Initialisierung im Kontext, wie wir es in der Vergangenheit gesehen haben.

04:11.290 --> 04:16.300
Innerhalb des Konstruktors übergeben wir alle Argumente und speichern sie, und innerhalb des Initialisierungsprozesses

04:16.300 --> 04:21.400
machen wir unser typisches Setup mit initialized in context und gehen dann zu einigen benutzerdefinierten Details über.

04:21.400 --> 04:26.680
Wir beobachten Ereignisse aus dem Modell, wir beobachten Ereignisse aus der Ansicht, und wir richten den Dienst ein, der startet

04:26.680 --> 04:29.650
der das Laden jedes Mal abbricht, wenn der UI-Neustart-Button aufgerufen wird.

04:29.650 --> 04:31.330
Diese Methode wird ebenfalls aufgerufen.

04:31.330 --> 04:37.510
Die Implementierung ist genau so, wie wir es in der Nicht-Mini-MVC-Version gesehen haben, wo wir dem Benutzer eine

04:37.510 --> 04:44.680
Dialogfenster mit der Frage "Sind Sie sicher, dass Sie neu starten wollen?" anbieten und dann die OC- oder Cancel-Konzepte hier behandeln, wenn

04:44.680 --> 04:45.730
der Dienst geladen wird.

04:45.730 --> 04:49.540
Dies wird aufgerufen und wir richten die Modellwerte ein, wenn wir sie eingeben.

04:49.540 --> 04:51.730
Vue löst ein Ereignis aus.

04:52.450 --> 04:53.740
Diese Methode wird aufgerufen.

04:53.740 --> 04:55.120
Zwei Dinge sind hier zu beachten.

04:55.120 --> 05:01.300
Erstens, das Modell speichert einen Wert für den aktuellen Spielstand oder für die aktuelle Situation

05:01.300 --> 05:01.810
pausiert.

05:01.810 --> 05:07.450
An mehreren Stellen des Codes werden Sie sehen, dass wir, wenn einer der beiden Fälle zutrifft, das Spiel verlassen, indem wir

05:07.450 --> 05:08.170
Methode frühzeitig verlassen.

05:08.170 --> 05:10.120
Es passiert also im Grunde nichts.

05:10.120 --> 05:12.190
Wenn wir pausieren oder das Spiel vorbei ist.

05:12.190 --> 05:18.100
Und dann sehen wir hier ein sehr häufiges Muster, hier im Controller, wir hören zu

05:18.100 --> 05:19.720
auf die Ansicht.

05:19.720 --> 05:26.050
Wenn die View die Methode aufruft, wird diese Methode hier aufgerufen und wir übersetzen das View-Ereignis in

05:26.050 --> 05:26.890
einen Befehl.

05:27.340 --> 05:34.570
Nochmals, wir nehmen die sehr gekoppelte Logik eines View-Ereignisses und senden es wie einen Radiosender in

05:34.570 --> 05:35.920
in Form eines Befehls.

05:36.100 --> 05:42.160
An diesem Punkt kann jeder Konzern, der zuhören will, diesen Eingabewert abhören, der ein Vektor ist

05:42.160 --> 05:48.070
der angibt, in welche Richtung der Benutzer mit den Pfeiltasten drückt, wenn die Ansicht für den Player erkennt

05:48.100 --> 05:49.660
eine Kollision mit einem Pickup.

05:49.660 --> 05:54.700
Diese Methode wird aufgerufen Wir machen den Pickup unsichtbar, da er eingesammelt wurde, und spielen einen Sound und dann

05:54.700 --> 05:58.780
zählen wir den Punktestand von 0 bis 1, zwei und drei hoch.

05:58.780 --> 06:02.020
Wenn der Maximalwert der Punktzahl drei ist, ist das Spiel vorbei.

06:02.020 --> 06:07.840
Wir beginnen, einige Muster zu erkennen, wenn wir mit diesen Stichproben weitermachen, und wir sehen auch Flexibilität

06:07.840 --> 06:10.690
in der Art und Weise, wie wir verschiedene Aspekte der Spielentwicklung behandeln können.

06:10.690 --> 06:16.990
Hier sind wir also im Controller und wir sehen dieses Ereignis, das vom Modell gesendet wird, dass, hey, mein

06:16.990 --> 06:18.130
Punktestand wurde aktualisiert.

06:18.130 --> 06:21.280
Überlegen wir uns also, wie man das handhaben könnte.

06:21.280 --> 06:25.360
Verschiedene Unternehmen könnten daran interessiert sein, dass der Punktestand aktualisiert wird.

06:25.360 --> 06:31.990
Zum Beispiel könnte die Benutzeroberfläche die Nummer des auf dem Bildschirm angezeigten Wertes aktualisieren wollen, und zwar theoretisch,

06:31.990 --> 06:37.900
ein anderer Bereich könnte Spezialeffekte oder Audio oder etwas anderes, das passieren soll, behandeln wollen

06:37.900 --> 06:39.370
jedes Mal, wenn sich der Spielstand ändert.

06:39.370 --> 06:45.670
Alle diese Bereiche könnten einen Verweis auf das Modell erhalten und dasselbe Ereignis abonnieren und behandeln

06:45.670 --> 06:47.500
die Konsequenzen, die wir hier sehen.

06:47.620 --> 06:49.090
Das wäre eine Lösung.

06:49.090 --> 06:52.480
In diesem Beispiel machen wir jedoch eine andere Lösung.

06:52.480 --> 06:59.170
Der einzige Bereich, der auf diese Modelländerung hört, ist der Controller, und der Controller übersetzt

06:59.170 --> 07:00.940
dieses Ereignis in einen Befehl.

07:00.940 --> 07:07.270
Da Befehle ein Radiosender sind, der an jeden beliebigen Konzern gesendet wird, ist dies eine besonders einfache

07:07.270 --> 07:12.700
Weg für jeden Konzern, diesen Befehl mitzuhören, ohne einen Bezug zum Modell zu benötigen.

07:13.030 --> 07:14.890
Das ist das entscheidende Unterscheidungsmerkmal.

07:14.890 --> 07:18.190
Es wird kein Verweis auf das Modell benötigt, um auf diesen Befehl zu hören.

07:18.190 --> 07:23.350
Und wenn sich das Modell hier für diesen Wert ändert, sehen wir dieselbe Einstellung und eine Änderung des Modells.

07:23.350 --> 07:25.900
Für diesen Wert sehen wir wieder den gleichen Aufbau.

07:25.900 --> 07:27.250
Das war's mit dem Controller.

07:27.250 --> 07:28.540
Werfen wir einen Blick auf die Ansicht.

07:28.570 --> 07:30.940
Hier sind wir in der UI-Ansicht, zum Beispiel.

07:30.940 --> 07:37.180
Nun, wie wir bereits besprochen haben, gibt es in vielen MVCs keine Bedenken, dass es sich um ein Mono-Verhalten handeln muss, aber das ist

07:37.180 --> 07:37.870
optional.

07:37.870 --> 07:39.370
Sie können es jederzeit tun.

07:39.370 --> 07:45.670
Und hier, weil dies ein UI-Element ist, weil Unity UI gut mit Mono-Verhalten funktioniert und weil

07:45.670 --> 07:51.700
ich die Idee mag, dass die Ansicht auf einem Spielobjekt in der Szene sitzt, erweitere ich mein Verhalten.

07:51.700 --> 07:57.070
Hier erstelle ich ein benutzerdefiniertes Ereignis, so dass ich jedes Mal, wenn der Neustart-Button angeklickt wird, ein Ereignis senden kann

07:57.070 --> 07:57.430
hier.

07:57.430 --> 08:00.130
Ich behandle die Initialisierung des Kontexts, wie wir es immer tun.

08:00.130 --> 08:07.180
Ich habe Verweise auf verschiedene UI-Textfelder, Schaltflächen sowie auf das Dialogfenster, das angehängt wird

08:07.180 --> 08:08.740
wenn der Benutzer auf Neustart drückt.

08:08.740 --> 08:14.110
Hier in der Initialisierung machen wir ziemlichen Standardkram, einschließlich des Abonnements für die Neustart-Schaltfläche

08:14.110 --> 08:14.520
Ereignis.

08:14.530 --> 08:16.930
Dieses Muster haben wir hier schon einmal gesehen.

08:16.930 --> 08:22.420
Eine Ansicht interessiert sich für einige Befehle, einige der Radiosender, die ausgestrahlt werden sollen

08:22.420 --> 08:30.430
von einem unbekannten Absender Da die UI-Ansicht die Werte des aktuellen Spielstands anzeigt, ist die maximale

08:30.430 --> 08:34.810
und die Statusmeldung anzeigt, ist es sinnvoll, dass wir diese Befehle abonnieren.

08:34.810 --> 08:35.140
hier.

08:35.140 --> 08:39.430
Wir werden den Text des Spielstands an mehreren Stellen aktualisieren, also haben wir hier eine Methode, die uns dabei hilft.

08:39.430 --> 08:42.760
Wenn der Befehl zur Änderung des Spielstandes erfolgt, aktualisieren wir die Benutzeroberfläche hier.

08:42.760 --> 08:47.950
Wenn der Befehl score max ausgeführt wird, aktualisieren wir die Benutzeroberfläche ebenfalls, und wenn der Befehl status ausgeführt wird,

08:47.950 --> 08:49.120
aktualisieren wir den Status.

08:49.120 --> 08:54.130
Als ich über den Controller gesprochen habe, habe ich erwähnt, dass es verschiedene Möglichkeiten gibt, ihn zu strukturieren

08:54.130 --> 08:55.150
Kommunikation.

08:55.150 --> 09:02.230
Die Lösung, die ich hier gewählt habe, ist, dass die Benutzeroberfläche keinen direkten Bezug zum Modell hat und zuhört

09:02.230 --> 09:03.010
direkt.

09:03.550 --> 09:07.720
Stattdessen erhalten wir diese Informationen indirekt durch die Verwendung dieser Befehle.

09:07.720 --> 09:14.410
Bei der Verwendung von MVC können Sie wählen, ob Sie Ereignisse mit Kopplung oder Befehle mit Kopplung haben wollen.

09:14.410 --> 09:18.700
weniger Kopplung haben wollen, und je nach Ihren Bedürfnissen kann jede dieser Lösungen Vor- und Nachteile haben

09:18.700 --> 09:19.120
Wege.

09:19.120 --> 09:24.100
Aber nur zur Veranschaulichung: Was wäre, wenn wir wollen, dass diese Ansicht direkt auf das Modell zugreift?

09:24.100 --> 09:29.620
Es ist in der Tat eine Best Practice, das zu tun, um Daten aus dem Modell zu lesen, aber es wird nicht empfohlen, dass

09:29.620 --> 09:31.750
die Ansicht direkt in das Modell schreibt.

09:31.750 --> 09:37.360
Also lasst uns ein Beispiel machen, wie man liest, nur damit wir die Syntax hier oben in den UI Views sehen Initialize

09:37.360 --> 09:43.270
Nochmals, nur als Beispiel, wir könnten den Befehl score, changed auskommentieren und stattdessen hören

09:43.270 --> 09:44.500
direkt auf das Modell hören.

09:44.500 --> 09:45.610
Schauen wir uns an, wie wir das machen würden.

09:45.610 --> 09:51.280
Nun, ich weiß, welches Modell wir referenzieren wollen und ich weiß, wie wir darauf zugreifen können, indem wir den Kontext verwenden

09:51.280 --> 09:52.000
und model local.

09:52.510 --> 09:55.960
Solange das Rollerball-Modell registriert ist, können wir es abrufen.

09:55.960 --> 10:01.420
Dann höre ich mir das Ereignis an, das mich interessiert, und denke, dass wir hier den Punktestand machen, und immer, wenn sein Wert

10:01.420 --> 10:03.480
ändert, fügen wir einen Listener hinzu.

10:03.490 --> 10:07.300
Ich werde einen neuen Handler erstellen, entweder manuell oder automatisch.

10:07.300 --> 10:10.060
Sie können die richtige Methode dafür erstellen.

10:10.060 --> 10:15.550
Und dann möchte ich genau das nachahmen, was vorher passiert ist, indem ich den lokalen Spielstand auf den richtigen Wert setze

10:15.550 --> 10:16.630
eingehenden Wert.

10:16.630 --> 10:17.980
Aus Gründen der Dokumentation.

10:17.980 --> 10:21.010
Ich kann die Namen dieser Argumente aktualisieren, damit sie mehr Sinn ergeben.

10:21.010 --> 10:21.910
Und da haben wir es.

10:21.910 --> 10:28.510
Ich habe demonstriert, wie ich anstelle eines Befehls einen Verweis auf das Modell erhalte, indem ich mich bei der

10:28.510 --> 10:31.390
Ereignis abonniere und das Ereignis direkt behandle.

10:31.390 --> 10:37.180
Wie viele andere Dinge, die wir hier sehen, kann dieses Muster der Kommunikation von einer Modelländerung zur Ansicht

10:37.180 --> 10:38.890
auf mehrere Arten gehandhabt werden.

10:38.890 --> 10:43.350
Die beiden, die ich hier gezeigt habe, sind entweder mit oder ohne Befehl.

10:43.360 --> 10:49.600
Vorhin habe ich erwähnt, dass ich den Pickup in einen separaten Ordner gelegt habe, um zu verdeutlichen

10:49.600 --> 10:52.120
dass er ein bisschen anders behandelt wird.

10:52.120 --> 10:59.740
Manchmal möchte man in einem Projekt Dinge haben, die strukturell innerhalb des Minis existieren und außerhalb

10:59.740 --> 11:00.340
des Minis.

11:00.340 --> 11:02.860
Dies ist ein Beispiel für etwas, das sich außerhalb befindet.

11:02.860 --> 11:07.510
Es ist nicht Teil eines Model-View-Controller-Dienstes, es ist nicht Teil des Minis selbst.

11:07.510 --> 11:09.790
Sie hätten die Dinge auch anders strukturieren können.

11:09.790 --> 11:13.720
Aber hier, nur zur Demonstration, zeige ich es noch einmal im Freien sitzend.

11:13.720 --> 11:17.770
Jeder der gelben Würfel, die wir in der Szene sehen, hat diese Abnehmerkomponente.

11:18.070 --> 11:22.690
Schauen wir uns den Inhalt der Pickup-Komponente an, wir erweitern das Modellverhalten, das

11:22.690 --> 11:23.440
Sinn macht.

11:23.440 --> 11:28.290
Wir wollen einen Würfel in der Szene sitzen haben und ihn Dinge tun lassen, wie z.B. sich drehen.

11:28.300 --> 11:34.270
Die drei wichtigsten Dinge, die dieser Würfel im Spiel tun muss, sind ein rotierender Würfel zu sein,

11:34.300 --> 11:40.480
zum Aufnehmen zur Verfügung stehen, und dann, wenn er aufgenommen wird, muss das Spiel seine Konsequenzen handhaben

11:40.480 --> 11:46.000
hier, einige lokale Felder wiederherstellen, damit dieser Abholer weiß, ob das Spiel pausiert oder vorbei ist?

11:46.000 --> 11:52.840
Aber hier in der Aktualisierung dreht sich der Würfel selbst, es sei denn, das Spiel ist pausiert oder vorbei.

11:52.840 --> 12:00.580
Diese Art von hochrangigem Spielstatus wird von kleineren Teilen wie dem Spieler, dem Feind und den Pickups verwendet

12:00.580 --> 12:02.140
in einem Spiel, das ist sehr häufig.

12:02.140 --> 12:05.950
Also habe ich in dieser Demo untersucht, wie man diese Informationen weitergeben kann.

12:05.950 --> 12:12.880
Es gibt mehrere verschiedene Lösungen, aber was ich Ihnen jetzt zeigen werde, ist eine experimentelle Idee, um

12:12.880 --> 12:15.610
zu helfen, Ihre Vorstellung von dem, was möglich ist, zu erweitern.

12:15.610 --> 12:19.930
Dies ist nicht unbedingt die beste Praxis und auch nicht der einfachste Weg.

12:19.930 --> 12:21.580
Es ist eine etwas verrückte Idee.

12:21.580 --> 12:22.450
Schauen wir uns das mal an.

12:22.450 --> 12:29.710
Da ich diesen Pickup etwas außerhalb des Systems betrachte, ist es weder eine Ansicht nach Wahl noch eine andere

12:29.710 --> 12:30.340
Anliegen.

12:30.340 --> 12:34.030
Wie können wir den Zugriff auf die Daten innerhalb der Ansicht ermöglichen?

12:34.030 --> 12:40.300
Nun, einmal, wenn die Szene aufwacht und dieses Objekt erwacht, machen wir eine Brücke zum Mini und hier

12:40.300 --> 12:42.070
ist die experimentelle Lösung.

12:42.070 --> 12:47.380
Jetzt haben wir den Kontext gesehen und den Kontextmodell-Locator gesehen.

12:47.380 --> 12:51.660
Der Model Locator erlaubt es, ein Modell zu registrieren und es abzurufen.

12:51.670 --> 12:53.620
Wir haben das schon früher in diesem Beispiel gesehen.

12:53.620 --> 12:58.810
Der Kontext-Locator wird nirgendwo im Framework verwendet, außer hier.

12:58.810 --> 13:04.690
Es ist ein Singleton, das jeder Kontext selbst in den Kontext-Locator einfügen kann.

13:04.690 --> 13:08.620
Und jeder Bereich, auch dieser hier, kann den Kontext herausholen.

13:08.620 --> 13:15.430
Also jedes Mal, wenn ein Kontext hinzugefügt wird und ein Modell zu diesem Kontext hinzugefügt wird, prüfen wir, Hey, ist

13:15.430 --> 13:16.930
das ein Modell, das mich interessiert?

13:16.930 --> 13:19.450
Und dann abonnieren wir diese Änderungen hier.

13:19.450 --> 13:24.610
Im Event-Handler speichern wir einfach eine lokale Version der Werte, die uns interessieren.

13:24.610 --> 13:32.200
Und jedes Mal, wenn das Spiel zu Ende ist oder nicht, oder wenn das Spiel pausiert oder nicht, hört jeder Pickup auf diese

13:32.200 --> 13:33.560
und antwortet entsprechend.

13:33.580 --> 13:39.940
Für diesen speziellen Anwendungsfall würde ich es nicht so handhaben, aber ich wollte es in einem der Beispiele

13:39.940 --> 13:45.070
um Ihnen zu zeigen, wie man eine Brücke zwischen der Nicht-Miniwelt und der Miniwelt schlägt.

13:45.070 --> 13:47.020
Und hier ist ein Beispiel dafür, wie man das macht.

13:47.020 --> 13:53.530
In der realen Welt könnte dies der Fall sein, wenn man sich entscheidet, ein Spiel zu haben, das derzeit nicht mini-fähig ist

13:53.530 --> 13:59.080
und man den Mini in eine Hybridlösung einbringen möchte, könnte man die hier vorgestellte Technik verwenden

13:59.080 --> 14:03.010
um Teile deines Spiels zu haben, die noch nicht in einem Mini enthalten sind.

14:03.010 --> 14:05.200
Greifen Sie in die Miniwelt, wie sie es brauchen.

14:05.200 --> 14:09.400
Ich hoffe also, dass ich einige Ideen inspirieren kann, einschließlich dieses experimentellen Teils hier.

14:09.400 --> 14:12.490
Wir haben uns nun den gesamten Code für dieses Beispiel angesehen.

14:12.490 --> 14:13.360
Das war's.
