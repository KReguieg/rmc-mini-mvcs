WEBVTT

00:00.180 --> 00:03.600
Das Uhrenbeispiel mit vielen MVCs.

00:04.290 --> 00:06.390
Hier sind wir in einem leeren Projekt.

00:06.390 --> 00:10.800
Ich habe das Mini und VCs Framework hinzugefügt und die Beispiele importiert.

00:11.010 --> 00:15.690
Schauen wir uns nun die Version der Uhr mit vielen MVCs an.

00:15.930 --> 00:17.760
Ich beginne mit der Ausführung des Beispiels.

00:21.160 --> 00:21.460
hier.

00:21.460 --> 00:27.820
Wir haben keine wirkliche Benutzeroberfläche, aber in der Debug-Log-Konsole haben wir einige Debug-Log-Anweisungen und

00:27.820 --> 00:32.020
sie zeigen die verstrichene Zeit an, solange die Szene geöffnet war.

00:32.440 --> 00:33.130
Das war's.

00:33.130 --> 00:36.090
Es gibt kein UI, auch keine Funktionalität für Eingaben.

00:36.100 --> 00:38.650
Dies ist das erste Mal, dass wir die Dateistruktur sehen.

00:38.650 --> 00:42.760
Ich habe das Beispielskript selbst, das sich auf einem Spielobjekt in der Szene befindet.

00:42.760 --> 00:48.130
Ich habe die Uhr-Miniklasse, die erstellt wird und alle Belange enthält.

00:48.130 --> 00:54.940
Dann habe ich Klassen, die mit jedem der Anliegen verbunden sind, Model, View, Controller und Service.

00:54.940 --> 00:58.900
Ein zusätzliches Konzept, das wir noch nicht besprochen haben, ist der Kontext.

00:58.900 --> 01:02.690
Wenn wir uns diesen Code ansehen, sollten wir uns die Rolle des Kontexts ansehen.

01:02.710 --> 01:04.750
Hier ist das Minibeispiel selbst.

01:08.980 --> 01:10.210
Es ist ein Verhalten.

01:10.210 --> 01:15.090
Und beim Start instanziieren wir das Objekt der Miniklasse und rufen initialize auf.

01:15.100 --> 01:16.830
Hier ist die Uhr-Miniklasse.

01:16.840 --> 01:20.200
Sie erweitert die Mini- und VCs-Rahmenklasse.

01:20.410 --> 01:24.990
Man kann sich dies als das übergeordnete Objekt vorstellen, das alle vier Anliegen enthält.

01:25.000 --> 01:31.990
Dies ist eine generische Klasse, in die wir den starken Typ des Kontexts Model, View, Controller übergeben

01:31.990 --> 01:32.830
und des Dienstes übergeben.

01:32.830 --> 01:37.240
Hier ist das Initialisieren mit der Struktur von Mini-MVCs.

01:37.240 --> 01:41.980
Alle beteiligten Hauptteile haben einen expliziten Initialisierungsaufruf.

01:41.980 --> 01:47.530
Dies ist ein großartiger Ort, um Code zu platzieren, der genau einmal beim Aufwachen des Systems passieren soll.

01:47.530 --> 01:49.110
Was machen wir also hier?

01:49.120 --> 01:55.900
Zuerst stellen wir sicher, dass es initialisiert ist, dann erstellen wir das Kontextmodell, die Ansicht und den Controller

01:55.900 --> 01:56.770
und den Dienst.

01:56.800 --> 02:01.810
Man beachte, dass die Konstruktoren für jeden keine Argumente außer dem Controller annehmen.

02:01.960 --> 02:09.940
Dies ist eines unserer ersten Beispiele im Code, bei dem wir sehen, dass der Controller am mächtigsten und fähigsten ist

02:09.940 --> 02:15.820
ist, denn der Controller ist der Klebstoff, der die Modellansicht und die

02:15.820 --> 02:20.350
Service übergeben wir diese Referenzen, damit er weiß, wie man sie verwaltet und mit ihnen umgeht.

02:20.350 --> 02:25.150
Und schließlich folgen wir der bewährten Praxis, bei der jeder der Anliegen initialisiert wird.

02:25.180 --> 02:29.790
Beachten Sie, dass alles den Kontext benötigt und wir haben noch nicht über den Kontext gesprochen.

02:29.800 --> 02:30.970
Schauen wir uns das mal an.

02:31.000 --> 02:33.340
Context ist eine Rahmenklasse.

02:33.340 --> 02:39.100
Sie implementiert die Schnittstelle von AI Context, und der Rest des Systems sucht nach dieser Schnittstelle.

02:39.100 --> 02:45.190
Es steht Ihnen also frei, Ihre eigene Alternative zu context zu erstellen, indem Sie einfach diese Schnittstelle implementieren.

02:45.190 --> 02:49.900
Aber ich finde, dass diese Basisimplementierung für meine Zwecke in der Regel ausreicht.

02:49.900 --> 02:52.000
Sie hat nur zwei Dinge in sich.

02:52.000 --> 02:58.150
Sie hat einen Model Locator und einen Command Manager, die beide von außen zugänglich sind, und

02:58.150 --> 02:59.950
sie werden bei der Instanziierung erstellt.

02:59.950 --> 03:01.600
Was ist die Rolle des Kontakts?

03:01.600 --> 03:08.590
Man kann sich den Kontext als das Nachrichtensystem vorstellen, auf das sich alle vier Anliegen beziehen.

03:08.620 --> 03:10.720
Was kann jeder Konzern damit machen?

03:10.720 --> 03:16.150
Nun, mit Hilfe des Befehlsmanagers können sie auf alle Befehle hören und alle Befehle aufrufen.

03:16.150 --> 03:18.880
Das ist der Messaging-Teil und der Model Locator.

03:18.880 --> 03:25.390
Ein fortschrittlicheres Konzept erlaubt es Ihnen, jedes Modell zu registrieren und abzurufen.

03:25.390 --> 03:31.690
Jedes der Anliegen könnte also ein Modell registrieren oder auf Modellereignisse hören.

03:31.690 --> 03:37.480
Hier unten im Konstruktor sehen wir, dass diese beiden Teile instanziiert werden, und als Experiment

03:37.480 --> 03:40.300
Funktion habe ich einen Kontext-Locator.

03:40.690 --> 03:48.430
Damit kann jeder Bereich einen Kontext hinzufügen, wie wir hier sehen, und jeder andere Bereich kann diesen Kontext erhalten

03:48.430 --> 03:49.000
falls erforderlich.

03:49.000 --> 03:51.160
In komplexeren Beispielen werden wir sehen.

03:51.160 --> 03:57.130
Dies könnte nützlich sein, wenn Ihr Projekt zwei verschiedene Mini-MV-Achsen hat und Sie zwischen

03:57.130 --> 04:01.570
Für dieses erste Beispiel werden wir uns nicht mit dieser Komplexität befassen, so dass Sie dieses Detail ignorieren können.

04:01.570 --> 04:05.920
Damit endet die Diskussion dieses Beispiels auf hohem Niveau.

04:05.920 --> 04:12.490
Wir sehen, dass wir das Mini-Elternobjekt haben, das die vier Anliegen enthält, und jedes von ihnen hat

04:12.490 --> 04:14.890
einen Verweis auf den Kontext von einer höheren Ebene.

04:14.890 --> 04:17.800
Es ist wichtig, dass wir diese grundlegenden Konzepte verstehen.

04:17.800 --> 04:22.330
Sie können sich diesen Teil des Kurses gerne noch einmal ansehen, um ein besseres Verständnis zu erlangen.

04:22.330 --> 04:25.720
Gehen wir nun die einzelnen Anliegen durch und sehen wir uns an, wie sie funktionieren.

04:25.720 --> 04:28.600
Wir haben uns bereits den Kontext angesehen, also schauen wir uns das Modell an.

04:28.600 --> 04:31.030
Dies ist das erste Problem, das wir im Code gesehen haben.

04:31.030 --> 04:36.910
Schauen wir uns also genauer an, wie es aufgebaut ist, und wir werden sehen, dass alle anderen Bedenken in diesem Beispiel

04:36.910 --> 04:41.080
und die meisten anderen Anliegen in der anderen Stichprobe einem ähnlichen Muster folgen.

04:41.080 --> 04:44.630
Daher werden wir in künftigen Diskussionen nicht mehr so ausführlich darauf eingehen.

04:44.650 --> 04:47.790
Beachten Sie hier, dass das Uhrenmodell das Basismodell erweitert.

04:47.800 --> 04:51.760
Die Erweiterung einer der Basisklassen ist nun optional.

04:51.760 --> 04:56.620
Es wird mit einigen freien Funktionen geliefert, aber es steht Ihnen frei, es auf eine andere Art und Weise anzugehen, wenn Sie möchten

04:56.620 --> 04:57.700
mehr Flexibilität wünschen.

04:57.700 --> 05:03.160
Hier wird also eine Konvention vorgeschlagen, aber Sie haben die Flexibilität, Ihre eigenen Lösungen zu finden.

05:03.160 --> 05:04.660
Werfen wir einen Blick auf das Basismodell.

05:04.660 --> 05:08.920
Das Basismodell implementiert das I-Modell, das I-Modell implementiert das I-Konzept.

05:08.920 --> 05:14.770
Es ist möglich, dass wir in zukünftigen Versionen des Frameworks hier etwas anpassen, um zu modellieren, aber

05:14.770 --> 05:18.670
im Moment ahmt es einfach nach, was jeder andere Konzern tun kann.

05:18.670 --> 05:25.570
Die I-Sorge ist in der Lage, einen Kontext zu initialisieren und zu akzeptieren, so dass jede Klasse, die diese Schnittstelle implementiert

05:25.570 --> 05:32.080
in der Lage ist, sich zu initialisieren und einen Kontext in der initialisierten Methode zu akzeptieren, und dann ist sie in der Lage, zu speichern und

05:32.080 --> 05:35.620
eine öffentliche Eigenschaft zu diesem Kontext zu pflegen.

05:35.620 --> 05:42.070
Das ist es also, was alle vier Konzerne tun können. Während die vorgeschlagenen Nutzungsmuster, wie

05:42.070 --> 05:47.560
wie wir ein Modell verwenden, anders ist als die Verwendung eines Controllers, wissen wir, dass sie unter der Haube gleich sind

05:47.560 --> 05:48.130
fähig sind.

05:48.130 --> 05:50.350
Auch dies ermöglicht eine ultimative Flexibilität.

05:50.350 --> 05:55.720
Wenn wir hier zurückgehen und sehen, dass das Uhrenmodell das Basismodell erweitert, das wir gerade erkundet haben, sehen wir uns Folgendes an

05:55.720 --> 05:57.640
den Rest der Funktionsweise des Uhrenmodells.

05:57.640 --> 06:01.600
Sie können sich das Modell als den Datenspeicher für alle Laufzeitdaten vorstellen.

06:01.600 --> 06:03.640
Nun, was braucht das Uhrenbeispiel?

06:03.640 --> 06:05.440
Nun, es braucht die aktuelle Zeit.

06:05.440 --> 06:08.200
Und in unserem Beispiel behält sie die Verzögerung bei.

06:08.300 --> 06:10.280
Zwischen jedem Ticken der Uhr.

06:10.280 --> 06:17.160
Für uns wird es eine Sekunde sein, also werden wir sehen, dass es eine Sekunde anzeigt, dann 2 Sekunden, dann 3

06:17.160 --> 06:18.110
Sekunden und so weiter.

06:18.110 --> 06:24.410
Das Modell hat, wie jeder Konzern, die Initialisierung und die einzige benutzerdefinierte Funktionalität, die wir hier machen, ist die Initialisierung

06:24.410 --> 06:26.960
den Wert unserer beobachtbaren Variablen.

06:26.960 --> 06:28.280
Das war's mit dem Uhrenmodell.

06:28.280 --> 06:30.050
Als nächstes sehen wir uns die Ansicht der Uhr an.

06:30.050 --> 06:38.720
Die Uhr-Ansicht implementiert die Augen-Ansicht und genau wie wir zuvor gesehen haben, kann die Augen-Ansicht eine Initialisierung haben

06:38.720 --> 06:41.060
und einen Kontext nehmen, das war's schon.

06:41.060 --> 06:42.530
Wir werden das also nicht weiter untersuchen.

06:42.530 --> 06:46.310
Wir brauchen keine Basisfunktionalität, also verwenden wir hier keine Basisklasse.

06:46.310 --> 06:48.110
Wir implementieren die Ansicht einfach selbst.

06:48.110 --> 06:52.730
Wir haben also einige Eigenschaften, einige Felder und wir behandeln die Initialisierung.

06:52.730 --> 06:56.450
Dies ist ein Standardkram für alle Anliegen.

06:56.450 --> 06:59.720
Das einzige, was wir hier tun, ist, den Kontext zu verwenden.

06:59.720 --> 07:05.150
Hier sehen wir zum ersten Mal, dass wir auf den Befehlsmanager zugreifen und auf einen benutzerdefinierten Kontext hören.

07:05.150 --> 07:07.910
Befehl namens "Zeit geändert".

07:07.910 --> 07:12.800
Jedes Mal, wenn der Befehlsmanager diesen Befehl aufruft, können wir ihn hier abhören.

07:12.800 --> 07:15.590
Dies ist die erste Gelegenheit, den Befehlsmanager in Aktion zu sehen.

07:15.590 --> 07:20.300
Erinnern Sie sich also an den entscheidenden Unterschied zwischen Befehlen und Ereignissen mit Befehlen.

07:20.300 --> 07:24.260
Wir brauchen nicht zu wissen, wer diese Art von Nachricht senden wird.

07:24.260 --> 07:28.460
Wir abonnieren nur den Vermittler des Befehlsmanagers und handhaben es auf diese Weise.

07:28.520 --> 07:30.230
Es ist eine entkoppelte Lösung.

07:30.230 --> 07:31.640
Jeder Bereich implementiert.

07:31.640 --> 07:33.800
Die erforderliche wird initialisiert.

07:33.800 --> 07:40.700
Dies ist eher eine bewährte Praxis, die ich benutze, anstatt etwas spezifisches für MVC-Frameworks, aber ich habe einfach

07:40.700 --> 07:46.070
eine Methode, die einfach überprüft, ob wir initialisiert sind, und wenn nicht, wird eine Ausnahme geworfen.

07:46.070 --> 07:50.690
Wir werden sehen, dass das am Anfang von so ziemlich jeder Methode in jedem Konzern verwendet wird.

07:50.690 --> 07:55.250
Es ist eine einfache Methode, um zu überprüfen, dass die öffentlichen Methoden nicht zu früh aufgerufen werden.

07:55.250 --> 08:00.860
Jedes Mal, wenn der Befehlsmanager das entsprechende Ereignis auslöst, können wir das hier behandeln

08:00.860 --> 08:04.760
sehen, dass das erste, was wir tun, ist sicherzustellen, dass wir tatsächlich initialisiert sind.

08:04.760 --> 08:08.600
Wir erwarten, dass die Szene jedes Mal, wenn sie läuft, initialisiert wird, gut.

08:08.600 --> 08:13.460
Dies ist nur eine zusätzliche Prüfung, die sicherstellt, dass die Lebenszyklen ordnungsgemäß ablaufen.

08:13.460 --> 08:17.000
Die einzige wirklich benutzerdefinierte Funktion, die wir hier ausführen, ist die Fehlersuche.

08:17.000 --> 08:17.600
Abmelden.

08:17.600 --> 08:22.430
Denken Sie daran, dass wir keine Benutzeroberfläche auf dem Bildschirm haben, wir verwenden keine Monte-Verhaltensweisen.

08:22.430 --> 08:26.960
Wir können uns also über die View äußern, indem wir eine Debug-Log-Anweisung verwenden.

08:26.960 --> 08:31.760
Das bedeutet nicht, dass Sie diese Schritte jedes Mal durchlaufen müssen, wenn Sie Debug Log in Ihren Projekten verwenden.

08:31.760 --> 08:35.600
Sie machen das genauso frei wie in jedem anderen Projekt.

08:35.600 --> 08:43.070
Dies ist nur ein erfundenes Beispiel, um eine Art von Benutzer-Feedback zu zeigen, ohne irgendwelche Mono-Verhaltensweisen

08:43.070 --> 08:46.070
oder UI, was dieses Beispiel recht einfach hält.

08:46.070 --> 08:47.900
Schauen wir uns als nächstes den Uhrendienst an.

08:47.900 --> 08:50.330
Der Uhrendienst erweitert den Basisdienst.

08:50.330 --> 08:57.380
Wie bei allen Belangen, die eine Basisklasse erweitern, die optional ist, ist alles, was er tut, die Initialisierung

08:57.380 --> 09:01.280
und das Einrichten des Kontextes, wie wir es in anderen Belangen gesehen haben.

09:01.280 --> 09:06.890
Dieser Dienst ist dazu gedacht, etwas zu laden und dann das System zu benachrichtigen, wenn es geladen ist.

09:06.890 --> 09:08.960
Wir haben hier also ein benutzerdefiniertes Unity-Ereignis.

09:08.960 --> 09:12.650
Die eigentlichen Daten, die von diesem Dienst geladen werden, sind die Zeitverzögerung.

09:12.650 --> 09:14.120
Das wird hier also zur Verfügung gestellt.

09:14.120 --> 09:17.930
Innerhalb der Initialisierung führen wir die Grundeinstellungen durch.

09:17.930 --> 09:23.120
Das Einzige, was wir hier tun, ist, die Zeitverzögerung von irgendwo außerhalb zu initialisieren

09:23.120 --> 09:24.830
Der Bereich load wird aufgerufen.

09:24.830 --> 09:31.310
Und was wir hier sehen, ist der Funktionalität der nicht-mini MVCs Version sehr ähnlich, die wir uns angesehen haben

09:31.310 --> 09:32.060
vorher angesehen haben.

09:32.240 --> 09:36.470
Es wird einfach eine lokale Textdatei geladen, der String-Wert wird aus dieser Datei ausgelesen und getippt.

09:36.470 --> 09:38.300
Es ist int und speichert es für uns.

09:38.300 --> 09:43.100
Bemerkenswert ist, dass das Ereignis "loaded" ausgelöst wird, sobald die Daten geladen sind.

09:43.100 --> 09:46.370
Wir haben noch nicht gesehen, welcher Bereich dieses Ereignis konsumieren wird.

09:46.370 --> 09:46.670
Weiter.

09:46.670 --> 09:47.900
Schauen wir uns den Controller an.

09:47.900 --> 09:53.510
Dies wird das komplexeste Problem dieses Beispiels und der meisten Beispiele für Controller sein, bei denen

09:53.510 --> 09:58.100
wir den Großteil des Codes sehen werden, erweitert der Uhren-Controller in diesem Fall den Basis-Controller.

09:58.100 --> 10:01.640
Und in allen Fällen, in denen eine Basisklasse verwendet wird, ist sie optional.

10:01.640 --> 10:05.360
Sie können natürlich Ihre eigene Klasse erstellen, die den Controller implementiert.

10:05.360 --> 10:11.180
Aber hier bekommen wir eine Basisfunktionalität, die sich um die Initialisierung kümmert und die

10:11.180 --> 10:11.870
im Kontext.

10:11.870 --> 10:17.090
Da der Uhren-Controller mit einigen spezifischen Argumenten arbeitet, habe ich beschlossen, dass der Basis-Controller ein

10:17.090 --> 10:22.670
generisch ist und man die Werte des starken Typs für die Modellansicht und den Dienst einfügt.

10:22.670 --> 10:26.870
Im Konstruktor übergeben wir die Modellansicht und den Dienst an die Basisklasse.

10:26.870 --> 10:32.450
In der Initialisierung machen wir das Typische, was alle Belange tun, nämlich das Initialisieren und

10:32.450 --> 10:34.250
nehmen den Kontext auf und speichern ihn.

10:34.430 --> 10:40.220
Das einzige, was wir hier tun, ist das Abhören des Modells, das Abonnieren einer der beobachtbaren

10:40.220 --> 10:44.150
Ereignisse und das Abhören des Dienstes, damit wir wissen, wann der Dienst geladen ist.

10:44.150 --> 10:49.040
Nun, da wir über das Observable-Konzept gesprochen haben und den Quellcode des Modells gesehen haben, ist dies

10:49.040 --> 10:55.220
die erste Stelle, an der wir das Abonnieren des Unity-Ereignisses von einer der Observable-Klassen gesehen haben.

10:55.220 --> 11:03.140
Jedes Mal, wenn der Modellzeitwert von einem beliebigen Bereich aus gesetzt wird, wird dieses Ereignis bei einer Wertänderung ausgelöst.

11:03.410 --> 11:08.180
Auch hier ist die Verwendung von Observablen optional, aber für alle empfohlen.

11:08.510 --> 11:15.710
Eigenschaften innerhalb des Modells, erhalten Sie dieses automatische Paradigma der Möglichkeit, den Wert zu setzen und zu

11:15.710 --> 11:18.560
in der Lage zu hören, wann dieser Wert gesetzt und geändert wurde.

11:18.560 --> 11:25.310
Wenn der Dienst geladen wird, aktualisieren wir das Modell basierend auf dem, was der Dienst von seinem externen

11:25.310 --> 11:25.700
Daten.

11:25.700 --> 11:27.530
Und dann beginnen wir mit dem Ticken der Uhr.

11:27.530 --> 11:32.960
Das Ticken der Uhr funktioniert sehr ähnlich wie bei der nicht-miniaturisierten NBC-Version.

11:32.990 --> 11:34.700
Es gibt jedoch einen wichtigen Unterschied.

11:34.700 --> 11:40.730
Vorhin habe ich darüber gesprochen, wie Unity Model-View-Controller in verschiedenen Bereichen der Unity-Engine zusammenfasst,

11:40.730 --> 11:45.590
einer davon ist, dass das Mono-Verhalten selbst ziemlich mächtig ist und viele Bereiche umfasst.

11:45.590 --> 11:52.070
Im Nicht-Mini-MVCs-Beispiel habe ich eine CO-Routine verwendet, um wiederholbaren Code aufzurufen, weil dieser

11:52.070 --> 11:54.200
Beispiel keine Mono-Verhaltensweisen verwendet.

11:54.200 --> 11:58.040
Ich habe jetzt nicht mehr den gleichen Zugriff auf die CO-Routine.

11:58.040 --> 12:00.140
Es gibt viele Möglichkeiten, wie ich es vortäuschen kann.

12:00.140 --> 12:05.600
Ich habe mich hier für eine separate Klasse entschieden, in die ihr hineinschnuppern könnt, wenn ihr wollt, und

12:05.600 --> 12:08.060
alles, was sie tut, ist, wiederholbaren Code aufzurufen.

12:08.060 --> 12:10.430
Ich nenne das für dieses Beispiel Clock Helper.

12:10.430 --> 12:15.110
Wie das funktioniert, liegt außerhalb des Rahmens dieses Beispiels, aber Sie sollten wissen, dass es ein Workaround für den Aufruf von

12:15.110 --> 12:15.950
wiederholbarer Code.

12:15.950 --> 12:17.900
Und das war eine der Lösungen, die ich gewählt habe.

12:17.900 --> 12:23.210
Wichtig ist, dass hier im Controller jedes Mal, wenn die Zeitverzögerung auftritt, die

12:23.210 --> 12:26.030
jede Sekunde, setze ich die Modelldaten.

12:26.030 --> 12:29.210
Der Controller setzt also einen Wert für das Modell.

12:29.210 --> 12:34.760
Und weil wir auf das Unity-Ereignis gehört haben, wenn sich der Modellwert ändert, erhalten wir dies

12:34.760 --> 12:35.270
Rückruf.

12:35.270 --> 12:41.180
Hier sind wir also im Controller, der Modelländerungen abonniert und sie behandelt, indem er sie in

12:41.180 --> 12:42.050
Befehle.

12:42.050 --> 12:45.860
Das ist ein sehr verbreitetes Muster, das wir überall in MVC sehen werden.

12:45.860 --> 12:52.910
Wir nehmen ein Ereignis, das etwas entkoppelt ist, und übersetzen es in einen Befehl, der stark entkoppelt ist.

12:53.030 --> 12:59.570
Denken Sie daran, dass Befehle von jedem der Beteiligten beobachtet und abgehört werden können, solange sie

12:59.570 --> 13:02.570
Zugriff auf den Kontext haben, was bei allen unseren Anliegen der Fall ist.

13:02.570 --> 13:10.190
Jedes Mal, wenn Sie "invoke command" sehen, können Sie denken, dass dies eine Nachricht ist, wie ein Radiosender, dass jeder Konzern

13:10.190 --> 13:11.030
anhören kann.

13:11.030 --> 13:13.340
Dies ist ein sehr wirkungsvolles Konzept.

13:13.340 --> 13:18.620
Es bietet Ihnen die Flexibilität, zu und von jedem Anliegen zu kommunizieren.

13:18.620 --> 13:25.040
Obwohl das sehr flexibel ist, wollen wir den grundlegenden Konventionen folgen, bei denen der Controller der Hauptprozessor ist

13:25.040 --> 13:30.110
der diese Befehle sendet und empfängt, es wird Ausnahmen geben und wir werden sie sehen

13:30.110 --> 13:35.900
In den Beispielen wird genau entschieden, wie man Unity Events und Befehle in seinem Projekt verwendet

13:35.900 --> 13:38.510
Teil der Kunst der Verwendung von MVC.

13:38.510 --> 13:41.180
In früheren Folien habe ich Konventionen vorgeschlagen.

13:41.180 --> 13:42.770
Es steht Ihnen frei, diesen zu folgen.

13:42.770 --> 13:46.490
Ich empfehle nur, konsequent zu sein, wenn Sie irgendwelche Ausnahmen anwenden.

13:46.490 --> 13:47.210
Das war's also.

13:47.210 --> 13:52.730
Wir haben die Erstellung des Kontexts, des Modells, der Ansicht, des Controllers und des Dienstes behandelt.

13:53.000 --> 13:55.910
Dann initialisieren wir sie einfach alle.

13:56.180 --> 14:02.240
Aus der Sicht der Zeitleiste haben wir nun ein Monarch-Verhalten in der Szene und beim Start ist es

14:02.240 --> 14:05.630
die Miniatur innerhalb der Initialisierung der Miniatur erstellt.

14:05.630 --> 14:11.660
Es erzeugte das, was wir hier sehen, indem es all diese verschiedenen Teile miteinander verdrahtete und dann in dieser Szene initialisierte

14:11.660 --> 14:17.450
speziellen Beispiel, weil ich weiß, wie es funktioniert, weiß ich, dass wenn der Controller initialisiert wird,

14:17.450 --> 14:22.190
das ist es, was das Ticken in Gang setzt und dieses Beispiel wirklich in Gang bringt.

14:22.190 --> 14:23.960
Das war's mit der Codeübersicht.

14:23.960 --> 14:27.740
Dies ist wahrscheinlich das dichteste Codebeispiel.

14:27.740 --> 14:32.000
Obwohl es ein einfaches Beispiel ist, haben wir hier eine Menge Konzepte.

14:32.000 --> 14:36.770
Wir nehmen all die Theorie, die wir in den letzten Folien gesehen haben, und bringen sie zusammen.

14:36.770 --> 14:39.950
Schauen wir uns das Beispiel hier in der Szene noch einmal an.

14:39.950 --> 14:46.700
Ich habe ein Spielobjekt ausgewählt, wir können im Inspektor sehen, dass das Spielobjekt das Beispiel hat und ich werde

14:46.700 --> 14:47.660
das Beispiel ausführen.

14:51.590 --> 14:59.960
Da es mit einer Zeitverzögerung von 1000 Millisekunden läuft, bekommen wir einen Tick pro Sekunde.

15:00.710 --> 15:03.770
Und unsere Debug-Protokollanweisung erscheint in der Konsole.

15:04.540 --> 15:06.430
Das ist das vollständige Beispiel.

15:06.610 --> 15:11.020
Wir haben alle Konzepte des Model-View-Controller-Service kennengelernt.

15:11.680 --> 15:17.230
Wie sie initialisiert werden, wie der Kontext der Klebstoff ist, der dabei hilft, alle Nachrichten zwischen ihnen zu übermitteln.

15:17.230 --> 15:23.770
Und Sie haben eine ausgezeichnete Grundlage, um zu sehen, wie die Theorie, die wir gelernt haben, in echtem C-Sharp-Code angewendet wird.

15:24.100 --> 15:26.740
Das ist also unser erstes vollständiges Beispiel.

15:26.740 --> 15:29.710
Sehen, wie der Code mit Mini-MVCs läuft.

15:29.710 --> 15:36.520
Obwohl der Anwendungsfall sehr einfach ist, ist alles, was wir tun, jede Sekunde eine Debug-Log-Anweisung zu machen.

15:36.520 --> 15:39.730
Wir sehen, dass wir eine Menge von Konzepten haben, um das zu erreichen.

15:39.730 --> 15:46.240
Dies ist das erste Beispiel, das Sie sehen werden, wenn Sie eine maßgeschneiderte Architektur verwenden, wie viele MVCs,

15:46.270 --> 15:47.860
es fühlt sich langatmig an.

15:47.860 --> 15:54.160
Es fühlt sich an wie: Hey, hätten wir das nicht in nur einer Klasse machen können, wie wir es mit dem nicht-mini MVC gemacht haben

15:54.160 --> 15:54.670
Version?

15:54.670 --> 15:58.060
Aber denken Sie daran, wir wollen in unsere Software investieren.

15:58.060 --> 16:04.360
Wir wollen diese Best Practices anwenden, und es wird kein zehnminütiges Beispiel sein, das wir wirklich verstehen

16:04.360 --> 16:11.140
zehn Tage nach einem Projekt, zehn Monate nach einem Projekt, die volle Leistung einer korrekten Codetrennung

16:11.140 --> 16:15.780
die mit einem maßgeschneiderten Framework einhergeht, ist unglaublich leistungsfähig und zahlt sich aus.

16:15.790 --> 16:16.930
Das war's für jetzt.

16:16.930 --> 16:17.650
Danke!
