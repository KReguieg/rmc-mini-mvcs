WEBVTT

00:00.090 --> 00:04.620
Wenn der Controller direkt die Ansicht aktualisiert, umgehen wir das Modell.

00:04.620 --> 00:09.620
Im Wesentlichen speichern wir die Modelldaten direkt in der Ansicht.

00:09.630 --> 00:15.900
Und von einem grundsätzlichen Standpunkt aus gesehen, entgleiten wir der MVC Trennung der Belange.

00:16.020 --> 00:21.870
Lassen Sie uns das iterieren und ein paar solidere Prinzipien in den Code einbringen.

00:22.630 --> 00:29.440
Wenn der Benutzer auf die Schaltfläche "Hinzufügen" klickt, könnte der Controller stattdessen Folgendes übersetzen

00:29.440 --> 00:32.500
UI-Werte aus der Ansicht in das Modell.

00:32.530 --> 00:33.580
Lassen Sie uns das jetzt tun.

00:33.580 --> 00:35.530
Schauen wir mal, was wir hier anders gemacht haben.

00:35.740 --> 00:41.830
Wir haben jeden dieser Handler aktualisiert, um ein bisschen konventioneller in den Praktiken der MVCs zu sein.

00:41.860 --> 00:47.920
Wenn wir jetzt hinzufügen, nehmen wir diese View-Werte und setzen sie direkt in das Modell und dann in reset,

00:47.920 --> 00:53.860
tun wir etwas ein wenig Redundantes, aber wir löschen die Ansicht und dann löschen wir die

00:53.860 --> 00:54.470
das Modell.

00:54.490 --> 00:59.800
Es ist nicht schlecht, aber die Redundanz, die wir dort sehen, erreicht nicht das Ziel der Einfachheit.

00:59.830 --> 01:05.620
Jetzt haben wir hier einige Optionen, um eine bessere Verbindung zwischen der Ansicht und dem Modell herzustellen,

01:05.620 --> 01:12.160
Wir können entweder in die Ansicht gehen und die Ansicht direkt auf das Modell für reine Leseoperationen hören lassen.

01:12.160 --> 01:13.660
Das ist eine gute Praxis.

01:13.660 --> 01:21.580
Eine Alternative wäre hier im Controller einen Befehl zu senden, der sagt, Hey, view go reset yourself

01:21.580 --> 01:24.370
oder zu sagen: Hey, view das Modell hat sich geändert.

01:24.370 --> 01:24.910
In der Vergangenheit.

01:24.910 --> 01:25.930
Beispielhafte Projekte.

01:25.930 --> 01:31.660
Wir haben Befehle auf dieser Ebene verwendet, aber um etwas Neues auszuprobieren, gehen wir in The View und lassen es beobachten

01:31.660 --> 01:34.360
direkt an das Modell für alle Änderungen.

01:34.360 --> 01:42.580
Und innerhalb der Initialisierung verwenden wir den Kontext und den Modell-Locator, um einen Verweis auf den Taschenrechner zu erhalten

01:42.580 --> 01:43.030
Modell.

01:43.030 --> 01:49.660
Best Practices unterstützen, dass die Ansicht aus dem Modell liest, aber es wäre eine Überschreitung der Rolle

01:49.660 --> 01:52.870
der Ansicht überschreiten, wenn sie hier direkt Werte setzen würde.

01:53.020 --> 02:00.090
Alles, was ich tue, ist, auf den geänderten Wert von A, B und das Ergebnis zu hören, als Kurzform.

02:00.100 --> 02:05.680
Ich verwende einen so genannten Lambda-Ausdruck, und das ist eine gute und schnelle Möglichkeit, ein Ereignis zu beobachten

02:05.680 --> 02:07.720
Fall zu beobachten und die Folge zu behandeln.

02:07.720 --> 02:15.010
Die Observablen bei Wertänderung übergeben den p vorherigen Wert und sehen den aktuellen Wert.

02:15.010 --> 02:21.400
Jedes Mal, wenn sich eine dieser Observablen ändert, aktualisiere ich die Ansicht auf den aktuellen Wert mit nur diesen

02:21.400 --> 02:22.090
wenigen Zeilen.

02:22.090 --> 02:27.280
Jetzt haben wir die Ansicht mit dem Modell verbunden, indem wir Best Practices verwenden.

02:27.280 --> 02:32.670
Hier im Taschenrechner-Controller kehren wir zu unseren Event-Handlern zurück, wie sie vorher waren.

02:32.680 --> 02:38.620
Da wir nun die Bindung von der Ansicht direkt zum Modell hinzugefügt haben, ist der Controller nicht mehr

02:38.620 --> 02:44.500
manuell irgendwelche Werte in der View setzen, so dass wir diese Zeilen loswerden können und wir können

02:44.500 --> 02:45.200
auch dies.

02:45.220 --> 02:47.770
Lassen wir die Szene laufen und sehen wir, wie sie sich verhält.

02:47.770 --> 02:49.330
Hier sind wir in der laufenden Szene.

02:49.330 --> 02:52.270
Ich gebe ein paar Werte ein und drücke auf "Reset" - sieht gut aus.

02:52.270 --> 02:59.260
Wir sehen, dass beim Zurücksetzen einige Nullen in diese Felder eingetragen werden, die ursprünglich nicht vorhanden waren.

02:59.260 --> 03:01.120
Es ist ein kleines Detail, aber wir werden uns darum kümmern.

03:01.120 --> 03:02.740
Versuchen wir nun die Anzeigenoperation.

03:02.740 --> 03:06.040
Und die Anzeigenoperation funktioniert hier im Taschenrechner-Controller gut.

03:06.040 --> 03:11.170
Lassen Sie uns zunächst zurücksetzen, bevor der Benutzer irgendeine Eingabe in initialize macht.

03:11.170 --> 03:17.290
Nachdem ich die vorhandenen Ad-Listener ausgeführt habe, ahme ich die Konsequenz nach, wenn der Reset-Button gedrückt wird.

03:17.980 --> 03:19.820
Lassen wir die Szene laufen und sehen wir uns das Ergebnis an.

03:19.840 --> 03:25.410
Wenn wir die Anwendung zum ersten Mal starten, bevor wir eine Benutzereingabe machen, sehen wir die bekannten Nullen.

03:25.420 --> 03:31.370
Dies ist eine gute Möglichkeit, ein einheitliches Erscheinungsbild zu erreichen, bevor und nachdem der Benutzer mit der Interaktion beginnt.

03:31.390 --> 03:33.160
Die Anwendung ist nun vollständig.

03:33.160 --> 03:39.250
Wir können A eingeben, B eingeben, die Ergebnisse zusammenzählen und alle Felder zurücksetzen.

03:39.250 --> 03:46.780
Bis jetzt haben wir in diesem benutzerdefinierten Beispiel den Model-View-Controller verwendet, wir haben Ereignisse beobachtet und erhalten

03:46.780 --> 03:48.070
dass unsere App gut funktioniert.

03:48.370 --> 03:53.170
Wir haben keine Befehle verwendet, und bei einer kleinen Anwendung ist das auch in Ordnung.

03:53.170 --> 03:56.560
Aber ich möchte demonstrieren, wie ein Befehl hier einen Mehrwert bringen kann.

03:56.560 --> 04:02.440
Ich lasse die gesamte Bindung, die wir jetzt haben, bestehen, aber ich ersetze diese Zeilen hier durch den Befehl

04:02.440 --> 04:05.320
damit die Ansicht weiß, wie sie sich selbst zurücksetzen kann.

04:05.320 --> 04:06.940
Beginnen wir mit dem Aufruf des Befehls.

04:06.940 --> 04:10.960
Wir verwenden den Kontext und den Befehlsmanager, um einen neuen Befehl aufzurufen.

04:10.960 --> 04:12.990
Ich nenne ihn den Reset-Befehl.

04:13.000 --> 04:16.090
Lassen Sie uns nun diese Klasse in ihrer einfachsten Form erstellen.

04:16.090 --> 04:20.020
Ich dupliziere die Klassenvorlage und platziere sie an der richtigen Stelle.

04:20.020 --> 04:26.110
Hier im Controller-Ordner habe ich einen Befehlsordner erstellt und unseren Reset-Befehl hinzugefügt.

04:26.110 --> 04:30.660
Bis jetzt habe ich ihm einen Namespace gegeben und den Klassennamen aus der Vorlage aktualisiert.

04:30.670 --> 04:36.520
Alles, was wir hier tun müssen, ist, den I-Befehl zu implementieren, und lassen Sie uns zu dem Code zurückkehren, in dem wir diesen zurück verwenden

04:36.520 --> 04:38.140
im Controller des Taschenrechners.

04:38.140 --> 04:39.490
Der Code sieht gut aus.

04:39.490 --> 04:41.550
Wir rufen jetzt einen Befehl auf.

04:41.560 --> 04:43.390
Wer muss sich das anhören?

04:43.390 --> 04:48.210
Nun, jeder Konzern könnte sich anmelden und zuhören, wenn der Reset passiert.

04:48.220 --> 04:53.470
In unserem Fall gehen wir zu The View, warten auf diesen Befehl und setzen diese drei Felder zurück.

04:53.470 --> 05:00.070
Hier in der Taschenrechneransicht innerhalb der Initialisierung verwenden wir den Kontext- und Befehlsmanager, um Folgendes hinzuzufügen

05:00.070 --> 05:01.270
einen Kommando-Listener hinzuzufügen.

05:01.270 --> 05:06.940
Immer wenn der Reset-Befehl aufgerufen wird, wird dieser Code ausgeführt und setzt die Felder zurück.

05:06.940 --> 05:11.860
In diesem speziellen Beispiel ist dies ein wenig problematisch und überflüssig.

05:11.860 --> 05:18.640
Die Bindung hat bereits funktioniert, aber ich wollte zeigen, wie man einen Befehl verdrahtet, nur für den Fall.

05:18.640 --> 05:19.840
Führen wir dieses Beispiel aus.

05:19.840 --> 05:20.980
Hier ist alles am Laufen.

05:20.980 --> 05:23.710
Hier ist die Rücksetzfunktion, die gut funktioniert.

05:23.710 --> 05:26.530
Hier ist die Anzeigenfunktion, die ebenfalls gut funktioniert.

05:26.530 --> 05:32.500
In diesem speziellen Fall werde ich also den Befehl entfernen, bevor ich das Projekt beende.

05:32.800 --> 05:39.460
Ich bin zurück in den Controller gegangen und habe den Code auskommentiert und bin zurück in die View gegangen und habe kommentiert

05:39.460 --> 05:42.490
diesen Code und den dazugehörigen Code auskommentiert.

05:43.850 --> 05:45.020
Lasst uns die Demo starten.

05:45.050 --> 05:45.620
Hier sind wir nun.

05:45.620 --> 05:46.670
Ausführung der Demo.

05:46.700 --> 05:48.230
Führe die Anzeigenoperation durch.

05:49.610 --> 05:50.630
Funktioniert prima.

05:50.660 --> 05:51.590
Führe den Reset durch.

05:53.910 --> 05:55.140
Funktioniert auch gut.

05:55.170 --> 05:59.890
Ich werde dieses Rechenbeispiel in die Codebasis aufnehmen, damit Sie es auch ausprobieren können.

05:59.910 --> 06:05.730
Für diejenigen unter euch, die an der Programmieraufgabe teilgenommen haben und diese selbst ausgefüllt haben, bevor sie zugesehen haben

06:05.730 --> 06:09.150
das Video angesehen haben, hoffe ich, dass sie durch diese Aktivität viel gelernt haben.

06:09.510 --> 06:15.420
Insgesamt ist der Prozess, den wir hier verwendet haben, etwas, das Sie bei größeren und VCs-Projekten ebenso verwenden können

06:15.420 --> 06:15.960
verwenden.

06:15.990 --> 06:21.330
Man denkt zuerst darüber nach, was die Anforderungen sind, wie die Benutzererfahrung sein wird, und dann bricht man

06:21.330 --> 06:27.060
in die einzelnen Bereiche Model, View, Controller und Service.

06:27.060 --> 06:31.500
Dann überlegt man sich, welche Basisfunktionalität man für die Belange braucht, wenn überhaupt.

06:31.530 --> 06:37.740
Nun, während dieses Beispiel recht klein war und nur ein Model-View und einen Controller für ein einfaches

06:37.740 --> 06:44.730
Stunde benötigt, werden Sie wahrscheinlich sehen, dass Sie für ein typisches Projekt von einem Monat oder einem Jahr viele haben,

06:44.730 --> 06:49.710
viele Ansichten und viele Modelle und viele Controller.

06:49.710 --> 06:53.490
Selbst bei einem Projekt dieser Größenordnung würden Sie diese Schritte befolgen.

06:53.490 --> 06:59.880
Und dieselbe Zeit, die wir hier zusammen verbracht haben, um dieses Projekt zu starten, würden Sie auch für ein viel größeres Projekt verwenden

06:59.880 --> 07:00.990
Projekt starten.

07:01.740 --> 07:07.620
Im Laufe der Zeit werden Sie sehen, dass Sie jedes dieser Anliegen ausbauen und vielleicht eine Ansicht haben, die ein wenig

07:07.620 --> 07:08.520
zu groß wird.

07:08.520 --> 07:10.860
Also teilt man sie in zwei Ansichten auf.

07:10.860 --> 07:16.360
Sie werden auch eine lange Bibliothek von Befehlen haben, die Sie in Ihrem Projekt verwenden und wiederverwenden können.

07:16.380 --> 07:18.450
Stellen Sie sich die nächsten Schritte für diesen Taschenrechner vor.

07:18.450 --> 07:24.450
Eine optionale Programmieraufgabe könnte darin bestehen, Funktionen hinzuzufügen, zu subtrahieren

07:24.870 --> 07:27.480
oder Unit-Tests zum Projekt hinzufügen.

07:27.480 --> 07:30.600
Sie könnten das Modell, die Ansicht und den Controller testen.

07:30.600 --> 07:35.220
Man könnte die Additionslogik in eine eigene Klasse auslagern.

07:35.370 --> 07:41.220
So etwas wie mein mathematisches System mit einer Methode für ADD und einer anderen Methode für Subtract.

07:41.950 --> 07:46.360
Das wäre ein guter Weg, um das Lernen aus diesem Beispiel zu erweitern und voranzukommen.

07:46.810 --> 07:48.680
Das war's mit dem Taschenrechner Mini.

07:48.700 --> 07:49.600
Danke!
