WEBVTT

00:00.200 --> 00:00.620
Gut so.

00:00.650 --> 00:06.410
Als nächstes wollen wir uns die Datenbindung innerhalb von Unity mit einer benutzerdefinierten Architektur ansehen.

00:09.280 --> 00:13.990
Das ist die Datenbindungsdemo an der Seite.

00:14.590 --> 00:22.750
In der Datenbindungsdemo werden wir sehen, wie in einem Projekt, das MVC hinzugefügt hat, wie man

00:22.750 --> 00:24.280
Sie Datenbindung haben?

00:24.280 --> 00:33.700
Nun, Datenbindung ist dazu gedacht, ein einfaches wiederverwendbares Muster zu haben, um Werte über verschiedene Domänen hinweg zu synchronisieren.

00:33.700 --> 00:41.560
Wenn Sie also zwei Klassen haben und beide haben einen Nachrichtentextwert und Sie wollen, dass, wenn sich einer von ihnen ändert

00:41.560 --> 00:46.720
den Wert, damit der andere es hört, und wenn der erste es hört, dann ändert er es, dann

00:46.720 --> 00:47.650
hört es der zweite.

00:47.650 --> 00:49.210
Wir haben also eine zweiseitige Bindung.

00:49.210 --> 00:50.800
Schauen wir uns also ein Beispiel an.

00:50.800 --> 00:52.780
Sie können sich vorstellen, wie nützlich das sein kann.

00:53.470 --> 00:59.830
Diese Demo ist Teil des Kurses MVC-Architektur für Unity, den Link dazu finden Sie unten.

00:59.830 --> 01:07.000
Es handelt sich um einen kostenpflichtigen Kurs, der jetzt mit einem Rabatt angeboten wird, da wir bereits über 6000 Studenten haben.

01:07.420 --> 01:10.790
Wenn Sie dies sehen, werden Sie hoffentlich noch mehr Studenten dort sehen.

01:13.270 --> 01:20.200
Der Kurs selbst deckt alle möglichen Themen ab: Unity, Software, Design, aber auch Mini-NVQs.

01:20.200 --> 01:27.220
Und in den zusätzlichen Inhalten haben wir zehn weitere Demos zu dem hinzugefügt, was bereits vorhanden war.

01:27.220 --> 01:28.660
Und wir werden hier eine davon durchgehen.

01:29.080 --> 01:31.260
Wir werden uns hier die Datenbindung ansehen.

01:31.270 --> 01:35.830
Schauen wir uns also die Datenbindung an, indem wir in Unity springen.

01:36.370 --> 01:38.800
Hier ist also das Projekt in Unity.

01:38.800 --> 01:44.980
Wenn du dem Git-Link folgst, dem freien Git-Link, der den gesamten Quellcode enthält, kannst du die

01:44.980 --> 01:50.190
Paket mit den dortigen Anweisungen einlesen und dann einfach auf samples gehen und importieren klicken.

01:50.300 --> 01:53.140
Für diesen Kurs habe ich das bereits getan.

01:54.340 --> 01:58.760
Gehen wir in den Ordner "More" und schauen wir uns das Beispiel für die Datenbindung an.

01:58.780 --> 02:03.070
Nehmen wir uns also einen Moment Zeit und sehen wir uns die Daten an, die Struktur der Ordner hier.

02:03.070 --> 02:10.330
Innerhalb der Datenbindung habe ich einen Ordner für Mini, weil einige der früheren Demos eine Version haben

02:10.330 --> 02:11.380
ohne Mini.

02:11.410 --> 02:17.360
Wenn ihr einen traditionellen Ansatz in Unity sehen wollt und dann mit Mini, dann habe ich das nur mit

02:17.360 --> 02:19.100
Mini, was wir uns hier ansehen.

02:19.220 --> 02:26.690
Im Ressourcenordner habe ich ein paar Prefabs für die zwei verschiedenen Ansichten, die hier verwendet werden

02:26.690 --> 02:27.770
in der App sein werden.

02:28.670 --> 02:32.230
Ich habe die Szene, die ich in einer Sekunde starten werde und dann habe ich den Quellcode.

02:32.240 --> 02:40.580
Nun, wie bei diesen Demos üblich und wie bei vielen MVCs üblich, wenn man eine Demo in

02:41.120 --> 02:46.600
Unity ausführt, sollte man sie so strukturieren, dass die Quelldateien für Controller, Model, View und Service.

02:46.610 --> 02:48.920
Wenn man sie hat, haben sie einen eigenen Ordner.

02:48.920 --> 02:53.960
Auf diese Weise können Sie die verschiedenen Trennungen der Anliegen leicht erkennen.

02:54.790 --> 02:55.330
Sehr gut.

02:55.930 --> 02:57.250
Lassen wir die Demo hier laufen.

02:57.250 --> 02:58.450
Ich werde es schön groß machen.

03:00.280 --> 03:01.810
Schauen wir uns das mal an.

03:01.810 --> 03:04.150
Hier haben wir also zwei verschiedene Ansichten.

03:04.150 --> 03:07.930
Man könnte meinen, dass dies Teil eines einzigen Layouts ist, aber es gibt tatsächlich zwei Voreinstellungen.

03:07.930 --> 03:16.450
Wir stellen sie also auf, und wir wollen in der Lage sein, dieses hier zu bearbeiten und von links "Hello world" zu sagen.

03:16.450 --> 03:20.500
Und beide Textfelder werden in Echtzeit aktualisiert.

03:20.980 --> 03:25.030
Gehen wir hier rüber und sagen, ich bin auf der rechten Seite.

03:25.570 --> 03:28.270
Und Sie können sehen, dass beide aktualisiert werden.

03:28.270 --> 03:31.050
Wir haben also eine zweiseitige Bindung in den MVCs.

03:31.060 --> 03:32.580
Schauen wir uns an, wie das gemacht wird.

03:32.590 --> 03:40.270
Wie ich vielleicht schon in einem früheren Teil dieser Video-Serie erwähnt habe, hat Unity historisch gesehen nicht

03:40.270 --> 03:41.920
keine bidirektionale Bindung unterstützt.

03:42.680 --> 03:49.370
Dann haben sie es im Editor für Bearbeitungswerkzeuge hinzugefügt, und in Zukunft wird es zur Laufzeit kommen,

03:49.520 --> 03:52.520
insbesondere als Teil des UI-Toolkits.

03:52.520 --> 03:58.790
Ich verwende hier also nicht das UI-Toolkit, und die Funktion für die Zwei-Wege-Bindung zur Laufzeit von Unity ist noch nicht

03:58.790 --> 04:04.010
zum Zeitpunkt dieser Aufnahme noch nicht verfügbar, also habe ich hier eine eigene Lösung gefunden, also schauen wir mal

04:04.010 --> 04:04.520
das an.

04:07.820 --> 04:13.550
Hier in der Szene habe ich also The World, ein Spielobjekt, das nur die Kamera und die Beleuchtung enthält

04:13.550 --> 04:14.120
enthält.

04:14.330 --> 04:19.850
Dann habe ich die linke Ansicht, die, wenn ich die linke Seite bewege.

04:23.090 --> 04:23.930
Ich kann nicht einmal das.

04:25.330 --> 04:25.810
Na gut.

04:25.810 --> 04:27.700
Und dann haben wir auch noch die rechte Ansicht.

04:27.730 --> 04:29.860
Und dann haben wir das Beispiel für die Datenbindung.

04:29.860 --> 04:33.620
Jetzt nimmt die Datenbindung eine Referenz von der linken und rechten Ansicht.

04:33.640 --> 04:36.760
Beginnen wir also unsere Code-Reise hier.

04:37.690 --> 04:39.400
Hier ist also das Monobehaviour.

04:39.400 --> 04:42.500
Das ist ein Beispiel, das die gesamte Szene durchläuft.

04:42.520 --> 04:44.530
Ich habe die zwei serialisierten Felder.

04:44.530 --> 04:47.790
Wir haben uns gerade die linke und die rechte Ansicht angesehen.

04:47.800 --> 04:52.150
Und dann werde ich hier am Anfang einen neuen Kontext erstellen.

04:52.180 --> 04:59.080
Das haben wir in früheren Demos nicht gesehen, und im Kern des Kurses zeigen wir nicht genau das

04:59.080 --> 05:02.470
Workflow, aber hier erstelle ich.

05:08.140 --> 05:08.620
hier.

05:08.620 --> 05:14.650
Ich erstelle den Kontext außerhalb von Mini und gebe ihn hier ein.

05:15.010 --> 05:18.520
Und dann habe ich die linke Ansicht und die rechte Ansicht.

05:19.120 --> 05:25.120
Ich habe also eine Außenseite erstellt und übergebe denselben Wert in jede der beiden Ansichten.

05:26.060 --> 05:27.050
Belange.

05:27.210 --> 05:33.200
Oh, eigentlich, jetzt wo ich darüber nachdenke, gibt es eine andere Demo, wo wir mehrere Minis in

05:33.200 --> 05:35.960
demselben Projekt haben, und das hier ist davon entlehnt.

05:35.960 --> 05:40.850
Es ist also nicht ausdrücklich erforderlich, den Kontext außerhalb des Minis zu erstellen.

05:40.850 --> 05:46.460
Hier ist es für die andere Demo namens Multiple Minis, die Sie sich in der Serie ansehen können.

05:46.460 --> 05:50.020
Dieser Kommentar ist hier also nicht unbedingt erforderlich.

05:50.030 --> 05:51.980
Schauen wir uns jetzt den Mini an.

05:53.020 --> 06:01.150
Hier habe ich also die Datenbindung in einem eigenen Mini eingerichtet, und das Mini hier wird

06:01.150 --> 06:04.600
Referenzen für die linke Ansicht und die rechte Ansicht aufnehmen und speichern.

06:05.960 --> 06:10.010
Dann hier unten, das ist die Initialisierung von Mini.

06:10.950 --> 06:12.660
Ich werde das Modell einrichten.

06:12.840 --> 06:15.840
Es gibt ein Modell, das ich einrichten werde: The View.

06:15.870 --> 06:16.860
Es gibt zwei Ansichten.

06:16.890 --> 06:18.060
Eine linke und eine rechte.

06:18.060 --> 06:24.730
Man sieht also, dass es sich um unterschiedliche Benutzeroberflächen handelt, und dann habe ich hier den Controller.

06:24.750 --> 06:31.320
Nun wird der Controller einen Verweis auf das Model und beide Views nehmen und wie bei allen Minis,

06:31.320 --> 06:33.840
ist der Controller der klügste der Konzerne.

06:33.840 --> 06:38.490
Er nimmt also einen Verweis auf die verschiedenen Teile und der Controller ist in der Lage, die

06:38.490 --> 06:40.290
sie zusammenarbeiten.

06:41.160 --> 06:42.660
Hier ist also der Controller.

06:43.230 --> 06:46.560
Ich glaube, das ist das einzige Problem, das wir uns in dieser Demo ansehen werden.

06:46.830 --> 06:49.920
Ich nehme die linke und die rechte Seite und speichere sie hier.

06:49.920 --> 06:51.210
Ich speichere das Modell.

06:51.480 --> 06:53.370
Dann hier unten.

06:54.400 --> 06:55.270
Ooh.

06:55.750 --> 06:58.100
Ich hatte erwartet, dass es hier mehr Logik geben würde.

06:58.120 --> 06:59.560
Lass mich mal kurz darüber nachdenken.

07:01.690 --> 07:03.040
Ja, ich denke, das gibt es.

07:03.190 --> 07:04.840
Ich habe das vor einiger Zeit erstellt.

07:05.800 --> 07:10.210
Was ich in den Ansichten zeigen werde, ist, wie sie die Synchronisierung durchführen.

07:10.210 --> 07:15.550
Aber man könnte die beiden Werte für das Textfeld auf der linken Seite und das Textfeld auf der rechten Seite zusammenführen

07:15.550 --> 07:16.990
rechts im Controller machen.

07:16.990 --> 07:18.940
Ich hatte also erwartet, es hier zu sehen.

07:18.940 --> 07:21.220
Aber sehen wir uns doch mal die anderen Probleme an.

07:21.220 --> 07:22.510
Hier ist also das Modell.

07:24.060 --> 07:26.430
Und das Modell in MVCs.

07:28.290 --> 07:30.450
Ist die dümmste aller Sorgen.

07:30.450 --> 07:35.670
Also, wenn der Controller sozusagen der klügste ist, der bewussteste, dann hat er den Kontext des Ganzen

07:35.670 --> 07:38.790
sind die Situationsmodelle am dümmeren Ende der Dinge.

07:38.790 --> 07:41.130
Es speichert nur Daten und das war's.

07:41.130 --> 07:44.040
Hier wird also eine Zeichenkette mit Nachrichten gespeichert.

07:45.160 --> 07:47.950
Und es wird mit diesem Anfangswert beginnen.

07:47.980 --> 07:50.110
Wir haben gesehen, dass es heißt, diesen Text zu bearbeiten.

07:50.110 --> 07:53.080
Wir lassen die Demo noch einmal laufen, damit Sie sehen können, wie das eingestellt wird.

07:54.460 --> 07:56.790
Schauen wir uns dann die linke und rechte Ansicht an.

07:56.800 --> 07:58.600
Hier ist also die linke Ansicht.

07:58.630 --> 08:05.820
Es wird Mono-Verhalten verwendet, wie wir es oft für UI-bezogene Belange tun wollen.

08:05.830 --> 08:10.060
Es ist optional, das Mono-Verhalten in Mini zu erweitern, aber hier wollen wir es tun.

08:10.940 --> 08:13.820
Und dann hier unten, hier wird die Bindung sein.

08:13.820 --> 08:16.310
Ich möchte also sicherstellen, dass dies auf dem Bildschirm an einer guten Stelle ist.

08:16.310 --> 08:18.650
Wir sind also wieder bei der Initialisierung.

08:18.980 --> 08:22.970
Ich möchte hier nur genügend Platz haben, um darüber zu sprechen.

08:22.970 --> 08:23.410
OK.

08:23.420 --> 08:25.790
Das erste, was ich mache, ist, das hier einzurichten.

08:25.790 --> 08:33.560
Ich habe jetzt einen Verweis auf das Modell in MVCs.

08:33.800 --> 08:38.330
Der Controller kann immer auf die anderen Belange zugreifen.

08:38.600 --> 08:45.410
Aber als Best Practice sollten Sie den Zugriff von anderen Modellen einschränken.

08:45.410 --> 08:48.440
Zum Beispiel auf Ansicht und Ansicht auf Modell.

08:48.440 --> 08:50.360
Sie sollten sich dessen sehr bewusst sein.

08:50.360 --> 08:56.270
Hier entscheide ich mich bewusst dafür, dass die Ansicht, die die Klasse ist, in der wir uns befinden, eine

08:56.270 --> 08:57.380
Verweis auf das Modell.

08:57.380 --> 09:03.590
Und die Art und Weise, wie Sie das tun können, ist, indem Sie den Kontext fragen, der implizit für Sie verfügbar ist und

09:03.590 --> 09:08.630
sagen: Hey, Model Locator, besorg mir einen Verweis auf das Modell, das im Spiel ist.

09:08.660 --> 09:15.480
Es sieht ein bisschen aus wie Dependency Injection, diese spezielle Zeile hier, aber es ist nicht ganz so

09:15.480 --> 09:17.100
universelle Lösung.

09:17.130 --> 09:22.860
Der Kontext hat Locators nur für die Modelle, so dass jeder sie bekommen kann, wenn wir sie brauchen.

09:22.890 --> 09:25.650
Hier in der Ansicht erhalten wir einfach einen Verweis auf das Modell.

09:25.800 --> 09:30.030
Denken Sie daran, dass dieses Modell nur die Zeichenfolge der Bildschirmmeldungen enthält.

09:30.880 --> 09:33.870
Dann werden wir hier die Bindung vornehmen.

09:33.880 --> 09:43.440
Wenn sich also das Datenmodell für die Nachricht ändert, dann werden wir das unten abhören.

09:43.450 --> 09:47.500
Jedes Mal, wenn sich das Datenmodell ändert, werden wir es hören.

09:47.620 --> 09:51.940
Und jedes Mal, wenn sich die Ansicht ändert, werden wir das mitbekommen.

09:51.940 --> 09:54.430
Unten sehen wir uns die Methode für jede von ihnen an.

09:54.430 --> 09:55.420
Aber denken Sie daran, wir hören zu.

09:55.420 --> 09:58.810
Wenn sich das Modell oder die Ansicht ändert.

09:59.230 --> 10:02.800
Schauen wir uns also zuerst das hier an.

10:03.530 --> 10:10.100
Wenn sich das Datenmodell ändert, dann aktualisieren wir die Ansicht.

10:11.800 --> 10:18.160
Und hier unten, wenn sich die Ansicht ändert, dann aktualisieren wir das Modell.

10:18.160 --> 10:24.490
Jeder dieser beiden macht also nur das andere Ende dieser zweiseitigen Bindung und das war's.

10:24.760 --> 10:30.340
Die Details dieses speziellen Ablaufs sind also nicht nur bei Mini zu finden.

10:30.370 --> 10:36.070
Man kann das auch außerhalb von Mini machen, aber die Klassen, die das alles ermöglichen, sind hier enthalten.

10:36.070 --> 10:43.540
Und es ist ein besonders interessantes Thema, wenn wir über Mini-MVCs sprechen, denn Datenbindung ist ein wichtiger

10:43.540 --> 10:44.850
Plus.

10:44.860 --> 10:50.440
Wenn man Datenbindung hat, dann ist so etwas wie Mini-MVC noch schneller und einfacher einzurichten.

10:52.190 --> 10:54.020
Führen wir die Demo also noch einmal aus.

10:57.940 --> 10:59.470
Ich glaube, ich habe etwas unkommentiert gelassen.

10:59.470 --> 11:00.880
Deshalb kompilieren wir hier neu.

11:00.910 --> 11:02.740
Hier laufen wir also wieder.

11:02.740 --> 11:06.780
Wir laden vom Dienst, bearbeiten diesen Text, der eigentlich hardcodiert war.

11:06.790 --> 11:11.290
Wir haben den hartkodierten Wert, und wenn ich ihn auf der linken Seite eingebe, erhalten wir ihn.

11:11.290 --> 11:14.260
Und wenn ich auf der rechten Seite "Hallo" sage, wird es synchronisiert.

11:14.260 --> 11:15.040
Das war's also.

11:15.040 --> 11:19.900
Das ist die Datenbindung in dieser Unity MVC Demo.
