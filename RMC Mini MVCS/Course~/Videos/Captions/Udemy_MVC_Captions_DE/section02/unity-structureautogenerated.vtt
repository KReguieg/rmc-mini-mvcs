WEBVTT

00:00.720 --> 00:02.340
Die Einheitsstruktur.

00:02.340 --> 00:05.260
Dieser Kurs ist in verschiedene Lernabschnitte unterteilt.

00:05.280 --> 00:10.770
In der Theorie gehen wir einen Schritt zurück und schauen uns einige der Grundlagen von Software und Spieldesign an.

00:10.770 --> 00:17.070
Wenn wir über den ED sprechen, schauen wir uns Unity an, das ED-Tool selbst, das wir als Entwickler

00:17.070 --> 00:19.170
öffnen und als unsere Software verwenden.

00:19.170 --> 00:24.450
Und in den Code-Abschnitten werden wir uns die Programmiersprache C-Sharp ansehen und wie sie auf das Unity-Spiel angewendet wird

00:24.450 --> 00:25.230
Entwicklung.

00:25.290 --> 00:26.910
Fangen wir mit der Theorie an.

00:26.910 --> 00:34.200
Der Lebenszyklus der Softwareentwicklung umfasst viele Phasen, die uns von einer Idee bis zum fertigen Produkt führen.

00:34.200 --> 00:40.470
Dazu gehören Anforderungen, Analyse, Planung des Projekts, Entwurf des Konzepts und weitere Schritte

00:40.470 --> 00:43.710
zur Entwicklung, zum Testen und zum Einsatz.

00:43.710 --> 00:51.180
Obwohl Unity ein mächtiges Werkzeug für viele dieser Phasen ist, konzentrieren wir uns auf die Verwendung von Unity in der Entwicklung,

00:51.180 --> 00:53.370
Test- und Bereitstellungsphasen.

00:53.370 --> 00:55.350
Einblick in die Welt von Unity.

00:55.350 --> 01:02.970
Die Konzepte sind wie folgt strukturiert Innerhalb eines Projekts gibt es eine oder mehrere Szenen, die jeweils eine Szene enthalten.

01:02.970 --> 01:06.570
Sie haben Spielobjekte mit angehängten Komponenten.

01:06.570 --> 01:14.100
Diese Komponenten können Dinge wie den Mesh-Renderer, den Collider, Audio, Starrkörper für die Physik behandeln,

01:14.100 --> 01:17.520
Partikelsysteme, und natürlich benutzerdefinierte Skripte.

01:17.520 --> 01:21.960
Das Spielobjekt ist ein grundlegendes Teil des Puzzles in Unity.

01:21.960 --> 01:28.950
Das ist alles, was visuell und nicht visuell ist, an dem wir unsere benutzerdefinierten Komponenten und Unitys

01:28.950 --> 01:30.520
eingebauten Komponenten.

01:30.540 --> 01:33.750
Sehen Sie sich als Beispiel diesen Screenshot aus dem Gameplay an.

01:34.440 --> 01:39.870
Hier haben wir eine Spielszene, die in mehrere verschiedene Prefabs aufgeteilt ist.

01:39.870 --> 01:46.070
Man kann sich eine Prefab als ein Spielobjekt mit einer oder mehreren Komponenten vorstellen, das zur Wiederverwendung gespeichert wird.

01:46.080 --> 01:51.540
Hier sehen wir zum Beispiel mehrere Münzen, jede mit einer eigenen Position und Drehung.

01:51.540 --> 01:59.070
Die Münze hat jedoch einige gemeinsame Merkmale, wie z.B. Funktionalität, Kollisionserkennung, wie

01:59.070 --> 02:06.180
sie gerendert wird, und diese gemeinsamen Eigenschaften werden in der Vorabversion festgehalten, wenn man sein Projekt organisiert und entscheidet

02:06.180 --> 02:07.290
über die Struktur.

02:08.080 --> 02:14.100
Teams wählen oft zwischen Szenen und vorgefertigten Elementen für die Organisation auf hoher Ebene.

02:14.110 --> 02:17.830
Das Spielobjekt ist das grundlegende Konzept innerhalb einer Szene.

02:17.830 --> 02:23.470
Und während es viele verschiedene Komponenten auf einem Spielobjekt geben kann, ist die Transformationskomponente immer

02:23.470 --> 02:30.250
Die Transformationskomponente speichert und manipuliert Aspekte, wie sich das Objekt in der Welt befindet.

02:30.250 --> 02:34.750
Ob das Objekt Grafiken hat oder nicht, es hat ein Transformationsobjekt.

02:34.750 --> 02:38.710
Der Code, den wir verwenden, ist die Sprache der Anweisungen für die Software.

02:38.710 --> 02:43.480
Die historischen Wurzeln von Unity beziehen sich auf das Mono-Projekt.

02:43.480 --> 02:47.140
Dies war eine Open-Source-Version des DOT-Net-Frameworks.

02:47.350 --> 02:53.860
Der Begriff mono wird immer noch ein wenig in der Unity API verwendet, einschließlich des mono Verhaltens.

02:53.860 --> 02:57.490
Während Unity in der Vergangenheit mehrere verschiedene Programmiersprachen angeboten hat.

02:57.490 --> 03:03.760
C-sharp ist jetzt die einzige Programmiersprache, und obwohl Unity C-sharp unterstützt, ist es nicht abhängig von

03:03.760 --> 03:04.920
dem DOT-Net-Framework ab.

03:04.930 --> 03:12.370
Unity's Version von C-sharp ist ziemlich robust und bietet eine Menge verschiedener Daten, Konzepte und Strukturen.

03:12.370 --> 03:18.550
Die wichtigsten Namespaces, die wir in Unity verwenden, ist die Unity-Engine für den Laufzeitcode.

03:18.550 --> 03:26.560
Der Unity-Editor für Edit Time Code und der System-Namensraum, der eine Menge verschiedener Funktionen enthält

03:26.560 --> 03:32.290
nicht speziell auf Unity bezogen, aber sehr hilfreich, einschließlich Mathematik, Bibliotheken, usw..

03:32.290 --> 03:36.610
Hier ist ein Beispiel für ein benutzerdefiniertes Skript in C-Sharp zur Verwendung in Unity.

03:36.610 --> 03:39.280
Von oben nach unten sehen wir die using-Anweisungen.

03:39.280 --> 03:43.990
Diese bringen Namespaces ein, die wir in dieser speziellen Klassendatei verwenden müssen.

03:44.590 --> 03:50.950
Dann sehen wir einen Namespace, der uns hilft zu deklarieren und zu organisieren, wo dieser Code in unserem Projekt sitzt.

03:50.950 --> 03:55.810
Als nächstes deklarieren wir die öffentliche Klasse oder Schnittstelle, die diesen Typ definiert.

03:55.810 --> 03:59.200
Beachten Sie, dass wir hier das Verhalten von Monarch erweitern oder erben.

03:59.200 --> 04:04.630
Von diesem Bereich aus können wir nun auch auf die gesamte Funktionalität des Monarch-Verhaltens zugreifen.

04:04.630 --> 04:07.360
Hier sind einige besondere Merkmale der Einheit zu beachten.

04:07.360 --> 04:11.470
Die Möglichkeit der Serialisierung von Feldern mit dem Attribut serialized field.

04:11.470 --> 04:18.310
Damit kann ein öffentlicher oder privater Wert in den Unity Inspector übertragen werden, so dass während

04:18.310 --> 04:21.570
das Live-Spiel läuft, können wir diese Einstellung ändern.

04:21.580 --> 04:24.730
Das hilft beim Prototyping und beim Gameplay-Design.

04:24.730 --> 04:30.040
Das Monitorverhalten verfügt über viele Schlüsselereignisse, die Sie durch Benennung einer Ihrer Methoden nutzen können.

04:30.040 --> 04:30.670
Aufwachen.

04:30.670 --> 04:36.460
Sie erfassen das Ereignis, wenn das Objekt zum ersten Mal in der Welt geweckt wird.

04:36.460 --> 04:39.160
Dies geschieht danach nur einmal.

04:39.160 --> 04:40.930
Hier wird die Startmethode aufgerufen.

04:40.930 --> 04:46.210
Es ist gut, alle Abhängigkeiten mit anderen Objekten einzurichten und dann wird die update-Methode jedes Mal aufgerufen

04:46.210 --> 04:47.500
Frame danach aufgerufen.

04:47.500 --> 04:52.210
Dies ist ein großartiger Ort, um Eingaben, Logik und die Aktualisierung von Grafiken durchzuführen.

04:52.930 --> 04:58.690
Dies sind nur einige der Ereignisse oder Methodenüberschreibungen, die Sie nutzen können, aber sicherlich sind diese

04:58.690 --> 05:00.970
sind einige der wichtigsten Dankesworte.
