WEBVTT

00:00.180 --> 00:02.800
Schauen wir uns das Befehlsentwurfsmuster an.

00:02.820 --> 00:05.390
Command ist ein verhaltensorientiertes Entwurfsmuster.

00:05.400 --> 00:09.210
Es ist dem Beobachter etwas ähnlich, aber unterschiedlich genug.

00:09.210 --> 00:11.340
Es qualifiziert sich als eigenes Muster.

00:11.430 --> 00:17.730
Einige der Vorteile der Verwendung von Observer sind die Ausführbarkeit und das Rückgängigmachen von Funktionen.

00:17.730 --> 00:23.360
Das ist oft der Fall, wenn viele Teams es einsetzen, um eine Rückgängig-Funktion in ihrer Benutzeroberfläche zu haben.

00:23.370 --> 00:30.600
Aber auch ohne dieses Paradigma ist es immer noch sehr erfolgreich, wenn es darum geht, die Vorteile von Observer zu nutzen

00:30.600 --> 00:37.530
mit ein bisschen mehr Entkopplung und Abstraktion im Vergleich zum Beobachtermuster hier, wir brauchen keine Referenz

00:37.530 --> 00:40.020
auf den Absender der Nachricht.

00:40.020 --> 00:47.790
Stattdessen wissen sowohl der Absender als auch der Beobachter von einer Art Nachrichtensystem, das sich zwischen

00:47.790 --> 00:48.240
ihnen steht.

00:48.480 --> 00:51.510
Im späteren Code werden wir dies als Befehlsmanager bezeichnen.

00:51.510 --> 00:57.780
Solange diese Bereiche den Befehlsmanager erreichen können, fungiert er als Vermittler zwischen ihnen und der Kommunikation.

00:57.780 --> 01:03.990
Und wie der Beobachter ermöglicht dies den Datenaustausch und die Kommunikation, die isoliert ist von, nun ja,

01:03.990 --> 01:07.410
Wenn sich das eine ändert, muss sich dann das andere auch ändern?

01:07.410 --> 01:11.720
Und man kann sicherlich mehrere Beobachter einfach hinzufügen und entfernen.

01:11.730 --> 01:12.270
Das werden wir sehen.

01:12.270 --> 01:15.600
Eine Parallele zu dem Beobachterbeispiel, das wir vorhin gesehen haben.

01:15.600 --> 01:22.640
Die drei wichtigsten Teile sind das Erstellen des Befehlssystems, das Hinzufügen eines Hörers und das Aufrufen des Systems.

01:22.650 --> 01:28.230
Normalerweise würden wir Befehle zwischen zwei oder mehr Klassen senden, aber der Kürze halber habe ich Folgendes hinzugefügt

01:28.230 --> 01:29.760
hier in einer Klassendatei.

01:29.760 --> 01:33.380
Auf diese Weise können wir recht schnell ein komplettes Funktionsbeispiel sehen.

01:33.390 --> 01:37.710
Jetzt werde ich noch ein paar weitere Muster erwähnen, aber ich werde ein bisschen schneller gehen.

01:37.860 --> 01:44.730
Die nächsten paar, die ich zeigen werde, sind Dinge, die wir im Geiste von MVC-Architekturen sehen werden

01:44.730 --> 01:45.570
organisiert sind.

01:45.570 --> 01:48.960
Ein Muster, mit dem Sie vielleicht schon vertraut sind, ist das Singleton-Muster.

01:48.960 --> 01:55.710
Immer dann, wenn Sie ein System genau einmal in Ihrem Code erstellen lassen wollen und globalen Zugriff darauf haben wollen,

01:55.710 --> 01:57.990
ist das ein guter Platz für das Singleton-Muster.

01:57.990 --> 02:05.010
Die letzten Updates von Unity haben einige native Lösungen dafür, aber traditionell haben wir die Community benutzt

02:05.010 --> 02:13.440
basierte Singleton Mono Behavior Klassen, die uns helfen global auf ein bestimmtes Mono Behavior zuzugreifen oder einige

02:13.440 --> 02:14.420
anderen Datentyp.

02:14.430 --> 02:21.450
Zweitens hilft uns das Fassadenmuster, die wahrgenommene Komplexität einer Reihe von Subsystemen zu reduzieren.

02:21.540 --> 02:28.050
Nehmen wir an, Sie haben ein Eingabesystem, ein Rendering-System und ein Physiksystem, die alle für Ihr

02:28.050 --> 02:29.790
Spiel und nicht für den Spieler.

02:29.790 --> 02:35.940
Wenn du die Details dieser Systeme kennst, kann dein Spieler mit einer Fassade interagieren, die ihrerseits diese Systeme aufruft

02:35.940 --> 02:39.960
einzelnen Systeme aufruft oder Teilbereiche davon auswählt, was sie tun können.

02:39.960 --> 02:43.890
Im Sprachgebrauch der Entwickler nennt man das oft "Wrapping".

02:43.890 --> 02:49.560
Man könnte also sagen, ich habe drei Systeme in eine Klasse verpackt, um die Benutzung zu erleichtern.

02:49.560 --> 02:53.010
Mediator und Proxy sind zwei zusätzliche Muster.

02:53.010 --> 02:59.700
Sie sind in der Tat getrennt, aber ich kann die Begriffe austauschbar sowohl in Mediation als auch in Proxy verwenden.

02:59.700 --> 03:05.130
Ich meine, wenn man eine Art Mittelsmann hat, der zwischen der Kommunikation steht, sind einige der Vorteile

03:05.130 --> 03:09.330
sind, dass man leicht Änderungen an einer der beiden Klassen vornehmen kann.

03:09.330 --> 03:15.150
Wenn man in diesem Beispiel den Mittelsmann ändert, muss man das System nicht massiv umgestalten.

03:15.150 --> 03:17.070
Es ist also eine Möglichkeit, Veränderungen abzumildern.

03:17.070 --> 03:19.980
Wir werden einige dieser Konzepte später in den Architekturen sehen.

03:19.980 --> 03:26.280
Nach einem kurzen Überblick über Entwurfsmuster sehen wir, dass es sich um wiederverwendbare Lösungen handelt, die

03:26.280 --> 03:30.540
uns dabei helfen, die Design-Herausforderungen zu lösen, die bei der Entwicklung von Spielen häufig auftreten.

03:30.540 --> 03:36.030
Während Singleton eine Lösung ist, mit der man in Unity am meisten vertraut ist, ist der Beobachter, wie er oft diskutiert wird

03:36.030 --> 03:42.840
Muster wahrscheinlich das nützlichste für einen Anfänger Entwickler, um sein Spiel ein wenig zu verbessern und

03:42.840 --> 03:47.820
einige dieser anderen Muster, die ich speziell erwähnt habe, weil wir uns später mit Architekturen beschäftigen werden,

03:47.820 --> 03:51.600
werde ich diese Begriffe verwenden können, und Sie werden ein wenig vertrauter damit sein.

03:51.900 --> 03:57.150
Zusammenfassend haben wir uns in diesem Abschnitt mit einigen übergeordneten Konzepten des Softwaredesigns beschäftigt.

03:57.150 --> 04:04.470
Wir haben uns die Entwurfsprinzipien als Philosophien zur Lösung von Herausforderungen angesehen, die UML als eine Methode zur Darstellung und Kommunikation

04:04.470 --> 04:05.790
über unsere Ideen.

04:05.790 --> 04:11.580
Und wir haben uns einige Entwurfsmuster angesehen, insbesondere Observer und Command, auf die wir zurückkommen werden

04:11.580 --> 04:12.180
später zurückkommen.

04:12.180 --> 04:15.640
Und sie sind eine großartige Möglichkeit, die Kommunikation innerhalb Ihres Projekts zu entkoppeln.

04:15.660 --> 04:17.880
Lassen Sie uns als nächstes über die Architektur sprechen.

04:17.880 --> 04:23.430
Wir werden uns einige der verfügbaren Lösungen ansehen, die Vor- und Nachteile jeder von ihnen, und die

04:23.430 --> 04:28.290
auf einige der beliebtesten Frameworks, die wir speziell für Unity verwenden können.

04:28.440 --> 04:29.370
Danke!
