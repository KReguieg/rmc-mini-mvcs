WEBVTT

00:00.090 --> 00:01.360
Testgesteuerte Entwicklung.

00:01.380 --> 00:04.920
Hier ist ein Beispiel für eine Testklasse mit einer Testmethode.

00:04.920 --> 00:08.450
In diesem Kurs haben wir bereits gesehen, wie man einen bestehenden Test ausführt.

00:08.460 --> 00:14.910
Wir haben gesehen, wie man neue Tests von Grund auf erstellt. Testgetriebene Entwicklung oder TDD ist die Praxis des Hinzufügens von

00:14.910 --> 00:17.550
Tests hinzuzufügen, bevor Sie Ihren Produktionscode hinzufügen.

00:17.550 --> 00:21.290
Für einige, besonders für diejenigen, die neu im Testen sind, kann dies seltsam erscheinen.

00:21.300 --> 00:26.430
Wir werden mehr über diese Technik erfahren und feststellen, dass man testgetriebene Entwicklung mit traditioneller Entwicklung mischen kann

00:26.430 --> 00:29.490
Testen mischen können, wie Sie es in Ihren eigenen Arbeitsabläufen wünschen.

00:29.520 --> 00:36.570
TDD erstellt Tests, die spezifizieren und validieren, was der Code tun wird, sobald er erstellt ist.

00:37.110 --> 00:38.280
Hier ist der Arbeitsablauf.

00:38.280 --> 00:44.220
Sie erstellen einen neuen Test und fügen gerade genug Implementierung hinzu, damit der Code kompiliert werden kann.

00:44.220 --> 00:48.610
Da wir gerade genug Produktionscode hinzugefügt haben, damit dieser Code kompiliert werden kann.

00:48.630 --> 00:54.000
Da wir vielleicht sogar eine leere Implementierung haben, führen wir den Test aus und er schlägt fehl.

00:54.450 --> 00:55.590
Das ist zu erwarten.

00:55.590 --> 01:01.950
Und es ist eigentlich ein sehr guter Anfang, wenn wir zuerst einen fehlgeschlagenen Test sehen, haben wir mehr Vertrauen

01:01.950 --> 01:05.040
dass der Test, sobald er bestanden ist, tatsächlich etwas bedeutet.

01:05.040 --> 01:09.420
Sie überarbeiten dann Ihren Produktionscode, bis der Code besteht, und machen dann weiter.

01:09.420 --> 01:16.020
TDD ist nicht einfach die Reihenfolge, dass man zuerst testet und dann den Produktionscode schreibt.

01:16.020 --> 01:19.140
Es ist auch eine Art, über Ihre Projekte nachzudenken.

01:19.140 --> 01:24.230
Manches davon muss man wirklich üben, damit man die Ergebnisse spürt.

01:24.240 --> 01:31.110
Aber was ich mit mehr TDD-Erfahrung feststelle, ist, dass man anders über seinen neuen Code denkt, man ist

01:31.110 --> 01:38.160
fokussierter in der Entwicklung, man erstellt mehr atomaren Code, der nur eine Sache tut, und wenn man

01:38.160 --> 01:42.180
wenn der Testcode bestanden wird, ist es ein sinnvoller Test.

01:42.210 --> 01:48.840
Man kann diesen Ablauf auch so betrachten, dass man einen fehlgeschlagenen Test schreibt, den Test bestehen lässt, und dann

01:48.840 --> 01:51.660
überarbeitet man seinen Code, um andere Ziele zu erreichen.

01:51.660 --> 01:58.590
Sie haben Optimierungen, Codierungsstandards usw. und dann wiederholen Sie: Zeigen Sie uns das in Aktion.

01:58.590 --> 02:01.320
Wir öffnen ein Unity-Projekt, das bereits einen Test hat.

02:01.320 --> 02:08.790
Wir verwenden TDD, um einen neuen Test hinzuzufügen, erstellen gerade genug Produktionscode, um ihn zu kompilieren, und sehen einen fehlgeschlagenen

02:08.790 --> 02:12.090
Ergebnis, und dann refaktorisieren wir, bis wir ein passables Ergebnis haben.

02:13.020 --> 02:16.130
Hier sind wir in einem ziemlich leeren Unity-Projekt.

02:16.140 --> 02:22.560
Ich habe mich vergewissert, dass das Test-Framework bereits im Paketmanager hinzugefügt wurde, wie zuvor gezeigt, und

02:22.560 --> 02:25.590
Ich habe einen Test hineinkopiert, mit dem wir beginnen können.

02:25.620 --> 02:28.350
Schauen wir uns diesen Test hier im Bearbeitungsmodus an.

02:28.350 --> 02:33.780
Ich habe einen Test, der die ADD-Methode einer einfachen mathematischen Klasse abdeckt.

02:33.780 --> 02:34.850
Lassen wir den Test laufen.

02:34.860 --> 02:35.900
Er besteht.

02:35.910 --> 02:41.430
Schauen wir uns den Code an, und hier sehen wir den einen Test, den wir schon von früher in der Präsentation kennen.

02:41.430 --> 02:45.330
Führen wir nun ein wenig testgetriebene Entwicklung durch, wie hier besprochen.

02:45.360 --> 02:51.450
Die Idee ist, dass wir, wenn wir die Funktionalität des mathematischen Systems erweitern wollen, einige Ansätze haben.

02:51.450 --> 02:57.090
Entweder wir erstellen den Produktionscode ohne jegliche Tests und danach.

02:58.260 --> 03:01.350
Und danach fügen wir vielleicht Tests hinzu oder auch nicht.

03:02.530 --> 03:08.530
Bei der testgetriebenen Entwicklung werden wir jedoch zuerst testen, bevor wir etwas in die Produktion einbringen

03:08.530 --> 03:09.040
Code.

03:09.870 --> 03:11.010
Schauen wir mal, wie das funktioniert.

03:11.040 --> 03:11.700
Das kann ich mir vorstellen.

03:11.700 --> 03:11.880
Ich bin.

03:13.080 --> 03:14.040
Stellen wir uns vor.

03:14.040 --> 03:16.680
Das mathematische System braucht eine Subtraktionsmethode.

03:17.980 --> 03:22.240
Nun, diese abstrakte Methode gibt es noch nicht, wie wir sehen werden, wenn wir uns den Quellcode ansehen.

03:23.150 --> 03:24.830
Aber lass uns trotzdem einen Test dafür machen.

03:25.760 --> 03:29.060
Ich beginne mit dem Hinzufügen des Testattributs.

03:29.270 --> 03:37.130
Ich benenne die Methode mit dem, was getestet wird, was das erwartete Ergebnis ist und in welcher Situation ich es erwarte

03:37.130 --> 03:38.390
für subtrahieren.

03:38.390 --> 03:40.130
Das Ergebnis wäre fünf.

03:40.160 --> 03:45.140
Wenn ich zehn und fünf eingebe, ist zehn minus fünf gleich fünf.

03:45.170 --> 03:48.980
Um den Test einzurichten, instanziiere ich eine neue Kopie meines mathematischen Systems.

03:49.220 --> 03:52.250
Ich erhalte das Ergebnis, indem ich die Methode subtract aufrufe.

03:52.280 --> 03:56.830
Der rote Text hier zeigt an, dass mein Code-Editor weiß, dass es keine Subtraktionsmethode gibt.

03:56.840 --> 04:03.320
Und schließlich erwarten wir, dass unsere Methode einen Wert von fünf zurückgibt, weil ich dies aus der Datei

04:03.320 --> 04:04.100
Beispiel kopiert habe.

04:04.100 --> 04:05.060
Hier steht 15.

04:05.090 --> 04:06.180
Ich werde das jetzt ändern.

04:06.200 --> 04:08.150
Jetzt prüft es die richtige Annahme.

04:08.840 --> 04:13.180
Jetzt wissen wir, dass dies nicht kompiliert werden kann, aber wir speichern und kehren zu Unity zurück.

04:13.190 --> 04:14.750
Wir sollten zwei Dinge beachten.

04:14.750 --> 04:19.250
Erstens, das Konsolenfenster zeigt korrekt an, dass ein Compilerfehler vorliegt.

04:19.250 --> 04:24.300
Und im Fenster des Testläufers sehen wir unsere neue Methode noch nicht.

04:24.320 --> 04:26.610
Dies sind gute Dinge, die man bei TDD beachten sollte.

04:26.630 --> 04:30.970
Der nächste Schritt ist, gerade so viel Code zu machen, dass er kompiliert werden kann.

04:30.980 --> 04:34.700
Es ist sehr wichtig, dass wir die Implementierung in diesem Stadium nicht abschließen.

04:34.700 --> 04:36.920
Hier ist der Quellcode für unser mathematisches System.

04:36.920 --> 04:42.050
Hier ist die einfachste Implementierung, die ich machen kann, um den Code zu kompilieren.

04:42.050 --> 04:45.740
Beachten Sie, dass ich die korrekte Implementierung nicht abgeschlossen habe.

04:45.740 --> 04:52.550
In diesem Beispiel scheint es trivial zu sein, weil wir wissen, dass wir nur A und B subtrahieren müssen.

04:52.550 --> 04:58.460
In der testgetriebenen Entwicklung wäre die Implementierung einer bestimmten Methode jedoch normalerweise komplexer

04:58.460 --> 04:59.540
und nimmt mehr Zeit in Anspruch.

04:59.540 --> 05:03.470
Unabhängig davon hören wir hier immer auf, wenn wir genug zum Kompilieren haben.

05:04.230 --> 05:05.360
Schauen wir uns den Test an.

05:05.370 --> 05:09.150
Unser Code-Editor zeigt subtract nun nicht mehr in rot an.

05:09.570 --> 05:11.340
Speichern wir und prüfen wir die Einheit.

05:11.370 --> 05:13.710
Jetzt sehen wir keine Konsolenfehler mehr.

05:13.710 --> 05:14.280
Großartig.

05:14.280 --> 05:15.540
Alles wird kompiliert.

05:15.540 --> 05:19.290
Und jetzt zeigt unser Test-Runner-Fenster die neue Testmethode richtig an.

05:19.290 --> 05:20.430
Lassen wir alle Tests laufen.

05:20.430 --> 05:26.430
Sie können den Test als fehlgeschlagen betrachten, weil eine oder mehrere Testmethoden fehlgeschlagen sind.

05:26.430 --> 05:31.350
Wenn wir die fehlgeschlagene Methode auswählen, sehen wir dort eine kleine Eingabe.

05:31.350 --> 05:34.200
Wir sehen einen kleinen Ausgabetext, der zeigt, warum die Methode fehlgeschlagen ist.

05:34.470 --> 05:38.490
Er erwartet fünf, aber stattdessen gibt er null zurück.

05:38.490 --> 05:40.560
Warum haben wir uns das hier angetan?

05:40.560 --> 05:46.350
Es mag trivial erscheinen, aber es ist ein wichtiger Unterschied, dass wir einen Test erstellen, wir glauben, dass der

05:46.350 --> 05:49.260
richtige Funktionalität, und wir sehen zuerst, dass er fehlschlägt.

05:49.260 --> 05:55.560
Das gibt uns eine gute Grundlage, um zu wissen, wann eine korrekte Implementierung mit Sicherheit bestanden ist.

05:55.560 --> 05:57.420
Fügen wir hier die richtige Implementierung hinzu.

05:57.420 --> 06:02.160
Wir gehen davon aus, dass der erste eingehende Parameter größer ist als der zweite, und geben einfach zurück

06:02.160 --> 06:05.670
und wir geben einfach a minus B zurück, speichern wir und führen den Test durch.

06:07.570 --> 06:12.600
Jetzt läuft der Test gut und wir haben unser erstes Beispiel für testgesteuerte Entwicklung abgeschlossen.

06:12.610 --> 06:13.450
Das war's.

06:13.990 --> 06:20.680
Aus eigener Erfahrung weiß ich, dass ich Zeit und Übung mit dem Testen brauchte, um wirklich ein Gefühl für die

06:20.680 --> 06:21.520
Vorteile zu spüren.

06:21.520 --> 06:29.890
Während wir einen kurzen Überblick über Unit-Tests, das Erstellen von Unit-Tests und testgetriebene Entwicklung hatten.

06:30.580 --> 06:35.200
Ich hoffe, Sie erkennen nun einige der Vorteile, die für Sie von Vorteil sein könnten.

06:35.200 --> 06:41.350
Wenn Sie das, was Sie hier über das Testen gelernt haben, mit der MVC-Architektur kombinieren, haben Sie die Werkzeuge, um

06:41.350 --> 06:47.460
Projekte zu erstellen, die modularer, skalierbarer, optimierter, robuster und zuverlässiger sind.

06:47.470 --> 06:52.610
Die Kombination aus Testen und guter Architektur ist sehr wirkungsvoll.

06:52.630 --> 06:53.500
Danke!
