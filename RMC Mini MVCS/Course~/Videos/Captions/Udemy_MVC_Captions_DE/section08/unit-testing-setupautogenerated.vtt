WEBVTT

00:00.150 --> 00:03.750
Einrichten des Fensters des Testläufers und der Testklassen.

00:03.750 --> 00:07.380
Der Quellcode für das Testframework ist über den Paketmanager verfügbar.

00:07.380 --> 00:14.580
Sie können die Paketsuche für das Testframework hinzufügen, das Testframework importieren und optional importieren

00:14.580 --> 00:15.270
Code-Abdeckung.

00:15.270 --> 00:19.980
Tooling Das Unity Test Framework enthält alle Bibliotheken, die zum Testen des CE Codes benötigt werden.

00:19.980 --> 00:25.830
Wenn Sie als Einzelperson oder als Team neu im Testen sind, müssen Sie nicht Ihren gesamten Code testen

00:25.830 --> 00:26.670
auf einmal testen.

00:26.670 --> 00:32.550
Sie können langsam, mit der Zeit anfangen zu testen, je mehr von Ihrem Code mit Tests abgedeckt wird, desto besser

00:32.550 --> 00:37.740
Sie werden mehr Vertrauen in einige Möglichkeiten haben, wie Sie es in Ihr Team integrieren können.

00:37.860 --> 00:44.670
Fügen Sie Tests nur für neue Funktionen hinzu oder fügen Sie Tests für wichtige Systeme vor einem größeren Refactoring hinzu.

00:44.670 --> 00:48.780
Und ein guter Anfang ist das Testen nur während der Fehlerbehebung.

00:48.780 --> 00:55.200
Wenn ein Benutzer einen Fehler meldet, repliziert man zunächst die Existenz des Fehlers mit einem fehlgeschlagenen Test.

00:55.200 --> 00:57.930
Dann korrigiert man den Code und der Test ist erfolgreich.

00:57.930 --> 01:00.690
Sie können diesen Test als Vermächtnis zurücklassen.

01:00.690 --> 01:03.420
Sie sind also sicher, dass der Fehler in Zukunft nicht mehr auftritt?

01:03.420 --> 01:08.880
Das Konzept der Codeabdeckung bezieht sich darauf, wie viel Ihrer Codebasis durch Tests abgedeckt ist.

01:09.150 --> 01:16.680
Wenn Sie in Ihrem gesamten Projekt eine Klasse und drei Methoden haben und alle drei mit Tests versehen sind, dann

01:16.680 --> 01:18.390
haben Sie 100% Abdeckung.

01:18.390 --> 01:21.120
Im Allgemeinen gilt: Je höher die Abdeckung, desto besser.

01:21.120 --> 01:27.390
Sie können das Codeabdeckungsfenster öffnen, Ihre Tests laufen lassen und Sie erhalten zuverlässige Ergebnisse, die Ihnen zeigen

01:27.390 --> 01:32.280
nicht nur den Prozentsatz pro Klasse und System, sondern auch innerhalb jeder Klasse.

01:32.280 --> 01:36.900
Sie erhalten eine zeilenweise Anzeige der Methoden, die abgedeckt sind und die nicht abgedeckt sind.

01:37.320 --> 01:38.430
Das ist sehr nützlich.

01:38.430 --> 01:43.770
Sie können nachverfolgen, wie viel von Ihrem Code getestet wird, und alle Schwachstellen aufspüren, die Sie während Ihrer

01:43.770 --> 01:48.840
testen und auch die zunehmende Abdeckung im Laufe der Zeit überwachen.

01:48.840 --> 01:54.930
Wenn diese Bibliotheken installiert sind, können Sie Ihren ersten Test erstellen, das Testlauffenster öffnen und

01:54.930 --> 02:00.510
einen Testordner, und Ihre Assets erstellen Ihre erste Klasse und Ihre erste Methode in dieser Klasse.

02:00.510 --> 02:05.820
Dann werden diese Tests im Testlauf oder im Testfenster angezeigt, wo Sie auf "Ausführen" klicken und Folgendes sehen können

02:05.820 --> 02:06.450
wie sie ausgeführt werden.

02:06.450 --> 02:09.180
Hier ist ein Beispiel für eine Testklasse mit einer Testmethode.

02:09.300 --> 02:11.100
Beachten Sie, dass es ziemlich normal aussieht.

02:11.100 --> 02:16.980
C Sharpe Das Testattribut in den eckigen Klammern ist die geheime Sauce.

02:16.980 --> 02:22.380
Hier sucht das System nach allen Methoden, die mit diesem Attribut gekennzeichnet sind, um sie als Test zu betrachten.

02:22.380 --> 02:26.730
Wie ich bereits erwähnt habe, ist das Testen eine Kunstform und es gibt viele verschiedene Möglichkeiten, es anzugehen.

02:26.730 --> 02:32.040
Eine gute Methode, die ich verwende, ist, jede Methode in drei Abschnitte zu unterteilen.

02:32.610 --> 02:35.310
Anordnen, handeln und behaupten.

02:35.460 --> 02:39.960
In "arrange" machst du eine oder mehrere Zeilen, die zum Einrichten des Tests notwendig sind.

02:39.960 --> 02:45.750
Im act-Teil führen Sie alles aus, was mit dem Test zu tun hat, und dann

02:45.750 --> 02:46.560
führen Sie die Behauptung aus.

02:46.560 --> 02:49.530
Behaupten bedeutet, dass man annimmt, dass etwas wahr ist.

02:49.530 --> 02:52.410
Das Test-Framework kommt also in der Assert-Bibliothek.

02:52.410 --> 02:55.920
Stellen Sie sich vor, wir haben ein benutzerdefiniertes mathematisches System, mit dem Sie zwei Zahlen addieren können.

02:55.920 --> 02:56.550
Zusammen.

02:56.550 --> 03:03.930
Wir könnten behaupten, dass die Summe von fünf plus zehn gleich 15 ist, und wir würden das als einen erfolgreichen Test betrachten.

03:04.050 --> 03:06.200
Wir würden den Test durchführen und sehen, dass er erfolgreich ist.

03:06.210 --> 03:07.650
Lass uns das in Aktion sehen.

03:07.650 --> 03:10.620
Ich werde ein Unity-Projekt öffnen, das einen Test bereithält.

03:10.710 --> 03:14.010
Wir schauen uns an, wie es funktioniert und führen den Test aus.

03:15.110 --> 03:17.630
Hier sind wir in einem leeren Unity-Projekt.

03:17.630 --> 03:20.360
Ich beginne mit dem Einrichten des Test-Frameworks.

03:20.510 --> 03:22.370
Also öffne ich den Paketmanager.

03:26.970 --> 03:30.980
Der Paketmanager zeigt an, welche Pakete bereits installiert sind.

03:30.990 --> 03:36.660
Es ist möglich, dass das Projekt, mit dem Sie beginnen, bereits das Testframework hinzugefügt hat.

03:37.390 --> 03:40.070
Wenn das nicht der Fall ist, können Sie es hier selbst hinzufügen.

03:40.090 --> 03:44.890
Suchen Sie in der Unity Registry nach dem Test Framework und installieren Sie die neueste Version.

03:44.890 --> 03:52.630
Als nächstes suchen Sie in der Unity Registry nach Code Coverage für optionale Zusatzfunktionen und installieren Code

03:52.630 --> 03:54.400
coverage hat einige optionale Beispiele.

03:54.400 --> 03:55.870
Ich werde sie hier nicht installieren.

03:56.760 --> 04:02.160
Wenn wir nun die Pakete im Projekt betrachten, sehen wir sowohl das Testframework als auch optional

04:02.160 --> 04:04.160
Sie sich entschieden haben, IT Coding Coverage zu installieren.

04:04.170 --> 04:07.290
Jetzt ist dieses Projekt vollständig kompatibel für Unit-Tests.

04:09.140 --> 04:09.860
Um anzufangen.

04:09.860 --> 04:11.630
Wir öffnen das Test-Runner-Fenster.

04:12.050 --> 04:16.340
Das Fenster des Testläufers hat zwei Registerkarten, den Bearbeitungsmodus und den Abspielmodus.

04:16.580 --> 04:18.200
Weil wir keine Tests hinzugefügt haben.

04:18.230 --> 04:23.210
Das Fenster ist sehr hilfreich und bietet einige anklickbare Erstellungsoptionen, um Tests für uns zu erstellen.

04:23.240 --> 04:26.690
In einer späteren Demo werde ich zeigen, wie man Tests von Grund auf erstellt.

04:27.050 --> 04:30.260
Für den Moment füge ich einfach einen ein, den ich bereits vorbereitet habe.

04:31.220 --> 04:35.960
Der hier gezeigte Test wurde aus dem Mini MVCs Beispielprojekt eingefügt.

04:35.960 --> 04:36.920
Für den Kurs.

04:36.920 --> 04:40.450
Damit wir uns konzentrieren können, habe ich alles außer dem Test, den wir uns ansehen wollen, entfernt.

04:40.460 --> 04:45.130
Schauen wir uns den Test an, führen wir unsere Fenster aus und beginnen wir mit dem Bearbeitungsmodus hier auf der Registerkarte Bearbeitungsmodus.

04:45.140 --> 04:49.580
Standardmäßig sind alle Tests des Projekts hier auf der Registerkarte Bearbeitungsmodus aufgelistet.

04:49.580 --> 04:55.820
Standardmäßig werden hier alle Tests angezeigt, die sich irgendwo im Ordner assets und im Ordner packages befinden.

04:55.820 --> 04:59.780
Sie können nach Kategorien filtern, um nur einige der Tests zu sehen.

04:59.780 --> 05:04.880
Wir haben hier nicht viele Tests, aber nur zur Veranschaulichung wähle ich die Kategorie für unsere Proben.

05:04.880 --> 05:08.720
Jetzt zeigt das Fenster eine Hierarchie aller Tests, die nach Namespace geordnet sind.

05:08.720 --> 05:15.470
Wenn ich alle unteren Ebenen aufklappe, sehe ich die Testklasse und dann eine Testmethode darunter.

05:15.470 --> 05:18.470
Wir können alle Tests ausführen und sehen, dass sie bestehen.

05:18.650 --> 05:22.130
Wir können einen einzelnen Test auswählen und den ausgewählten ausführen.

05:22.130 --> 05:26.960
Unabhängig davon, ob der Test bestanden wurde oder nicht, können wir mit einem Rechtsklick auf den Quellcode zugreifen

05:26.960 --> 05:27.560
Menü.

05:30.280 --> 05:31.930
Hier ist der komplette Testcode.

05:32.290 --> 05:35.120
Dies ist derselbe, den wir vorhin in der Präsentation gesehen haben.

05:35.140 --> 05:36.360
Schauen wir uns die Highlights an.

05:36.370 --> 05:40.990
Wir haben ein optionales Kategorie-Attribut, das uns hilft, unsere Tests zu organisieren.

05:41.290 --> 05:46.930
Die Dropdown-Liste, die ich gezeigt habe, filtert auf der Grundlage dieses Wertes, Sie können viele Testklassen haben, die

05:46.930 --> 05:48.040
der gleichen Kategorie angehören.

05:48.040 --> 05:50.950
Man kann viele Testklassen haben, die sich in derselben Kategorie befinden.

05:50.950 --> 05:52.450
Dann haben wir das Attribut test.

05:52.450 --> 05:57.190
Damit wird dem Test-Framework mitgeteilt, dass diese Methode eine Testmethode ist.

05:57.990 --> 06:00.740
Ohne dies wird die Methode nicht im Fenster des Testläufers angezeigt.

06:00.750 --> 06:07.710
Dann verwenden wir das vertraute, aber optionale Paradigma eines Bereichsakts und behaupten, dass dies nur eine Möglichkeit ist, die ich verwende

06:07.710 --> 06:10.170
als eine Konvention, um meine Testlogik zu organisieren.

06:10.170 --> 06:16.350
Wenn ich meine Tests benenne, wähle ich einen Namen, der auf dem Testgegenstand basiert, d.h. auf dem, was ich erwarte

06:16.350 --> 06:17.640
und wie die Situation ist.

06:17.640 --> 06:24.120
Hier teste ich also die ADD-Methode, dass das Ergebnis 15 sein wird, wenn ich fünf und zehn als Operanden übergebe.

06:24.120 --> 06:25.890
Wechseln wir in den Spielmodus.

06:25.890 --> 06:31.410
Die Registerkarte "Spielmodus" sieht sehr ähnlich aus und es sieht so aus, als ob sie genau denselben Test anzeigt, aber das ist nicht der Fall.

06:31.410 --> 06:32.370
Ich werde die Quelle öffnen.

06:32.370 --> 06:34.350
Hier ist der Quellcode für einen Test im Spielmodus.

06:34.350 --> 06:35.610
Was ist der Unterschied?

06:35.610 --> 06:40.320
Der Hauptunterschied liegt darin, wo er im Projektfenster zu finden ist.

06:40.440 --> 06:41.640
Das werde ich gleich zeigen.

06:41.640 --> 06:47.610
Ein optionaler Unterschied, den ich gewählt habe, ist, dass ich für meine Tests im Spielmodus die Klasse mit Spielmodus anhänge

06:47.610 --> 06:53.010
test, während ich im ed-Modus einfach test anhänge, was mir bei der Organisation hilft.

06:53.010 --> 06:58.980
Zur Veranschaulichung teste ich das gleiche Verhalten einmal im Bearbeitungsmodus und einmal im Spielmodus.

06:58.980 --> 07:01.290
Das ist für Sie wahrscheinlich nicht nötig.

07:01.290 --> 07:08.280
Testen Sie stattdessen standardmäßig im Bearbeitungsmodus und verwenden Sie die Tests im Wiedergabemodus nur, wenn Sie die Wiedergabe erfassen müssen

07:08.280 --> 07:15.690
Ereignisse im Spielmodus, wie z.B. das Aufwachen oder die Funktionalität von Spielobjekten, Kollisionserkennung und andere Dinge, die

07:15.690 --> 07:16.980
nur zur Laufzeit passieren.

07:16.980 --> 07:21.180
Wie im Kurs besprochen, verwende ich dieselbe Namenskonvention für Methoden, die wir zuvor gesehen haben.

07:21.180 --> 07:22.170
Notieren wir uns zwei.

07:22.320 --> 07:24.330
Hier sind zwei wichtige Unterschiede zu beachten.

07:24.330 --> 07:31.320
Wir verwenden ein Einheitsattribut und nicht ein Testattribut, wie wir zuvor gesehen haben, und zusätzlich zu einem Bereich

07:31.320 --> 07:34.470
act und assert gibt es noch ein optionales Gewichtsparadigma.

07:34.470 --> 07:41.160
Dies wird hier nur benutzt, um die Tatsache zu demonstrieren, dass Tests im Bearbeitungsmodus synchron ablaufen

07:41.160 --> 07:44.670
Tests auch asynchron ausgeführt werden können.

07:44.670 --> 07:49.860
Wenn Sie also einen Code haben, der asynchrone Tests erfordert, ist der Abspielmodus eine gute Option.

07:49.860 --> 07:52.620
Werfen wir einen Blick auf das Projektfenster, um die Organisation zu sehen.

07:52.620 --> 07:58.080
Beachten Sie, dass sich der Test im Bearbeitungsmodus in einem Editor-Ordner befindet und der Test im Wiedergabemodus in einem Runtime-Ordner

07:58.080 --> 07:58.500
Ordner.

07:58.500 --> 08:05.310
Dieser Unterschied zusammen mit den Unterschieden in den Assembly-Definitionsdateien neben diesen Tests

08:05.310 --> 08:09.870
weiß das System, dass es sich bei einem Test um einen Editor-Test und bei dem anderen um einen Spielmodus-Test handelt.

08:09.870 --> 08:11.370
Ich führe die Tests im Spielmodus durch.

08:11.370 --> 08:13.460
Zum Schluss führe ich den Spielmodustest aus.

08:13.470 --> 08:18.840
Das Fenster des Testläufers verhält sich gleich, mit einer Ausnahme, da es sich um Tests im Wiedergabemodus handelt.

08:18.840 --> 08:25.710
Unity wird eine anonyme Szene erstellen, den Test isoliert ausführen und dann die Szene zerstören.

08:25.740 --> 08:31.710
Während dies alles ziemlich schnell passiert, werden Sie es hier als Pluspunkt bemerken, da ein Pressedurchlauf alle

08:31.710 --> 08:34.680
anstatt alle Tests in einer Millisekunde auszuführen.

08:34.680 --> 08:39.600
Zum Beispiel, wie hier im Bearbeitungsmodus, dauert die Ausführung mehrere Millisekunden.

08:39.600 --> 08:46.220
Hier haben wir die Möglichkeit, einen laufenden Test zu sehen, das Fenster des Testläufers zu sehen und die Grundlagen zu erkennen.

08:46.230 --> 08:48.990
Als nächstes wollen wir uns ansehen, wie wir unsere eigenen Tests erstellen.
