WEBVTT

00:00.520 --> 00:03.490
Le framework Unity MVC.

00:03.490 --> 00:10.750
J'ai créé le framework Unity UMBC il y a plusieurs années sur la base de mes apprentissages de l'époque et de mon expérience architecturale.

00:10.750 --> 00:11.460
architecturaux.

00:11.470 --> 00:17.140
Les avantages de l'utilisation de ce cadre particulier sont qu'il a fait ses preuves et qu'il est basé sur un grand nombre de principes de base de l'architecture.

00:17.140 --> 00:20.310
principes et des modèles que nous avons déjà vus dans le cours.

00:20.320 --> 00:26.080
Bien que la version n'existe que pour l'unité, en théorie, les modèles qui s'y trouvent ne dépendent pas de la langue, donc

00:26.080 --> 00:28.920
vous pourriez l'adapter à d'autres plates-formes si vous le souhaitiez.

00:28.930 --> 00:35.740
Il apporte un environnement plus testable à l'unité parce que chaque zone de votre code est séparée et découplée.

00:35.740 --> 00:39.940
Et comme beaucoup d'architectures établies, nous avons jeté un coup d'œil à unity.

00:39.940 --> 00:45.010
Cela permet un développement plus rapide et une maintenance beaucoup plus efficace de vos projets.

00:45.010 --> 00:50.860
Au moment de la création, j'avais un flux centré sur le comportement mono dans la façon dont je développais dans unity.

00:50.920 --> 00:53.860
J'ai donc construit ce système pour qu'il fonctionne de la même manière.

00:53.860 --> 00:58.300
L'une des principales caractéristiques de ce système est qu'il utilise fortement les comportements mono.

00:58.300 --> 01:01.780
Chacune des quatre préoccupations étend le comportement mono.

01:01.780 --> 01:07.060
Cela signifie que vous pouvez accrocher chacune de ces préoccupations à un objet de jeu, ce qui est très pratique pour utiliser tous les comportements mono.

01:07.060 --> 01:12.550
flux de travail familiers que nous avons dans unity pour les objets de jeu et les composants, y compris la sérialisation des champs sur les objets de jeu.

01:12.550 --> 01:13.570
de l'une ou l'autre des préoccupations.

01:13.570 --> 01:17.890
Par exemple, dans la capture d'écran ici, vous pouvez voir l'un des modèles.

01:17.890 --> 01:23.920
Le modèle est un comportement mono, il peut donc avoir des champs sérialisés et être placé dans l'inspecteur unity.

01:23.920 --> 01:24.250
vue.

01:24.250 --> 01:27.550
Quelle est la structure de haut niveau entre vous et VCs ?

01:27.550 --> 01:34.090
Eh bien, nous avons le m v familier des modèles que nous avons examinés précédemment, où chacun de ces quatre

01:34.090 --> 01:36.130
étend le comportement mono.

01:36.130 --> 01:42.700
Ensuite, dans le code de mon jeu, je créerais un concept d'application, qui est également une quantité de comportement.

01:42.700 --> 01:48.430
C'est la seule chose dans ma scène sous laquelle tout cela se trouve encore une fois, quelques avantages du comportement mono.

01:48.430 --> 01:50.740
car cela semble tout à fait propre à unity.

01:50.740 --> 01:55.360
Les choses se trouvent dans la scène sur des objets de jeu et peuvent être séparées, comme je l'aime.

01:55.360 --> 01:58.270
Dans ce chapitre, nous ne faisons qu'un tour d'horizon.

01:58.270 --> 02:01.000
Nous allons éventuellement passer à un autre cadre.

02:01.000 --> 02:04.480
Voici un extrait du fonctionnement du système UMBC.

02:04.480 --> 02:08.680
Il y a des choses à retenir de cet ancien système que j'aime toujours beaucoup.

02:08.680 --> 02:13.480
Tout d'abord, j'utilise des génériques dans de nombreux domaines, comme le contrôleur de base que nous voyons ici.

02:13.480 --> 02:19.450
Les génériques sont un moyen fantastique en C-sharp de créer des classes modèles réutilisables.

02:19.450 --> 02:25.840
Deuxièmement, le flux de travail que j'ai ici permet un typage fort, ce qui est excellent dans les cas spécifiques.

02:25.840 --> 02:27.100
de la façon dont mon jeu se déroule.

02:27.100 --> 02:32.770
Je suis en mesure d'obtenir l'auto-complétion, qui me montre les propriétés et les méthodes qui ont un sens pour

02:32.770 --> 02:37.630
Le contexte et le cadre introduisent les concepts que nous avons appris à partir des modèles de conception.

02:37.630 --> 02:45.070
Nous avons à la fois le gestionnaire de commande pour la communication FA de haut niveau de manière plus découplée et l'unité

02:45.070 --> 02:48.670
pour la communication au niveau local, au niveau inférieur.

02:48.670 --> 02:53.350
La principale différence ici, comme nous l'avons vu lorsque nous avons parlé de ces modèles auparavant, est que la commande

02:53.350 --> 02:58.750
n'a pas besoin que l'expéditeur et le destinataire aient des références l'un à l'autre, alors que

02:58.750 --> 03:04.420
le concept d'événement Unity exige que l'observateur ait une référence à l'expéditeur.

03:04.420 --> 03:09.550
Le cadre de travail dispose ainsi de deux niveaux de communication entre les principales préoccupations.

03:09.550 --> 03:15.490
Au moment où j'ai créé ce cadre particulier, il intégrait donc les principes de la façon dont j'ai abordé les questions suivantes

03:15.490 --> 03:16.690
projets Unity.

03:16.690 --> 03:20.410
Comme je l'ai mentionné, il s'agissait d'une approche très centrée sur le comportement unique.

03:20.410 --> 03:23.020
Le projet est toujours en vie et peut être utilisé.

03:23.020 --> 03:27.130
Pour les besoins de ce cours, je vais recommander que nous choisissions un cadre différent dont je vais parler.

03:27.130 --> 03:27.880
dont je parlerai ensuite.

03:27.880 --> 03:34.690
Mais je mentionne ce projet comme un exemple valable dans mon portefeuille d'architecture dans un endroit d'où

03:34.690 --> 03:38.440
J'ai appris beaucoup de choses dans cette section, nous avons parlé des architectures.

03:38.440 --> 03:42.610
Nous avons vu les avantages et les inconvénients de l'utilisation d'une architecture établie donnée.

03:42.610 --> 03:47.440
Nous avons parlé de certaines différences entre les principales architectures établies que nous pouvons choisir.

03:47.440 --> 03:50.710
Nous avons vu les inconvénients de l'absence d'architecture.

03:50.710 --> 03:55.960
Bien que cette approche semble très naturelle, surtout pour un débutant, elle n'est finalement pas payante.

03:55.960 --> 04:01.840
Et nous avons vu une liste de certains des frameworks centrés sur unity que nous pouvons choisir pour faire de l'architecture de jeu,

04:01.840 --> 04:05.740
y compris le projet You and VC's que j'ai créé il y a plusieurs années.

04:05.740 --> 04:11.770
Ensuite, discutons d'un autre cadre, le cadre Mini et VC, que j'ai créé plus récemment.

04:11.770 --> 04:17.260
C'est l'aboutissement de toutes les leçons que nous avons ici tout au long du cours sur les principes de conception,

04:17.260 --> 04:21.400
les modèles de conception, les enseignements tirés d'autres architectures, y compris la mienne.

04:21.400 --> 04:26.710
Nous examinerons une vue d'ensemble du système, les avantages et les inconvénients de son utilisation et la manière de commencer.

04:26.710 --> 04:32.230
Cette section sur les architectures était particulièrement complète et contenait beaucoup d'informations.

04:32.230 --> 04:38.710
N'hésitez pas à revoir certaines sections pour mieux assimiler ces concepts.

04:38.710 --> 04:40.540
passerons ensemble à la section suivante.

04:40.540 --> 04:41.290
Nous vous remercions.
