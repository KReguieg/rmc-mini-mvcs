WEBVTT

00:00.080 --> 00:03.800
Nous allons donc commencer par le haut avec la calculatrice.

00:04.520 --> 00:06.320
Passons à l'unité ici.

00:07.300 --> 00:11.350
Voici donc le projet que j'ai lié au chat.

00:11.380 --> 00:17.470
Vous pouvez voir qu'il y a un repo git et qu'il y a des instructions pour installer ce repo git.

00:17.620 --> 00:24.850
Une fois que vous avez fait cela, vous verrez dans le gestionnaire de paquets que vous suivez les instructions de git, vous aurez

00:24.850 --> 00:26.260
ce paquet est installé.

00:26.260 --> 00:29.080
Voici le RMK mini MVCs.

00:29.080 --> 00:33.460
RMK est donc ma société de conseil, Ravella, multi-media consulting.

00:33.460 --> 00:35.770
Tous les paquets que je publie portent ce nom.

00:35.770 --> 00:42.610
Et puis le concept de mini MVC, c'est le service modèle-vue-contrôleur, avec une empreinte très légère.

00:42.610 --> 00:48.460
Il gère donc les flux de travail les plus courants que vous rencontrerez, y compris tout ce que nous cherchons à faire.

00:48.460 --> 00:54.160
aujourd'hui est construit sur cette technologie et c'est mini parce que c'est assez élégant, léger.

00:54.160 --> 00:54.910
ET cetera.

00:55.000 --> 00:59.950
Ensuite, sous les échantillons ici, vous allez vouloir cliquer sur échantillons et importer.

00:59.960 --> 01:02.410
Je l'ai déjà fait, nous allons donc y jeter un coup d'œil.

01:02.410 --> 01:06.130
Mais encore une fois, le Readme explique comment obtenir ces échantillons.

01:07.050 --> 01:09.640
Commençons donc par le premier.

01:09.660 --> 01:13.920
Nous allons fermer quelques éléments pour nous préparer.

01:14.040 --> 01:19.710
Ensuite, dans le projet, dans les actifs, nous avons le dossier more et nous allons le parcourir.

01:19.710 --> 01:23.740
Commençons par le haut et regardons cet exemple de calculatrice.

01:23.760 --> 01:32.490
Maintenant, toutes les structures MVC, nous organisons la structure des dossiers pour imiter le modèle MVC, et chaque

01:32.490 --> 01:37.020
de temps en temps, je m'assure que ma vidéo se trouve du bon côté.

01:37.050 --> 01:39.480
Par exemple, je peux me faire rebondir ici.

01:39.510 --> 01:41.670
Parfois, il se peut que je dissimule des choses.

01:41.670 --> 01:45.540
Sachez que si je me surprends à le faire, je reviendrai ici.

01:45.660 --> 01:48.000
Voici à nouveau la structure.

01:48.000 --> 01:56.100
Nous avons un dossier pour la vue du modèle et le contrôleur, et ouvrons l'un des dossiers parents ici.

01:56.100 --> 01:57.540
Nous le voyons ici.

01:57.540 --> 02:04.680
J'essaierai de faire en sorte que le code soit présenté à une hauteur d'environ 25 lignes.

02:04.710 --> 02:06.030
de façon à ce que vous puissiez en voir un peu plus.

02:06.030 --> 02:09.580
Mais il ne doit pas se superposer à ma vidéo.

02:09.730 --> 02:11.470
Parlons-en.

02:11.770 --> 02:16.960
Voici donc le monobehaviour qui se trouve dans la scène qui lance l'ensemble du projet.

02:16.960 --> 02:22.120
Si vous êtes familier avec Unity, vous savez qu'au minimum vous avez un objet de jeu dans la scène

02:22.120 --> 02:28.230
avec un monobehaviour dessus, et c'est là que vous lancez votre projet de démo de jeu, etc.

02:28.240 --> 02:36.460
Nous avons donc cela et tout ce que je fais ici, c'est que j'ai un champ sérialisé pour saisir The View, qui est un champ séparé de

02:36.460 --> 02:39.310
objet de jeu séparé, juste pour séparer les préoccupations.

02:39.310 --> 02:44.220
Ensuite, dans la méthode de démarrage fournie par Unity, je crée la mini-calculatrice.

02:44.230 --> 02:49.540
Ainsi, chaque fois que vous voyez une de mes classes appelée Mini, il s'agit de l'objet parent.

02:49.540 --> 02:52.390
Et typiquement, dans ces exemples, il y en a exactement un.

02:52.390 --> 02:58.360
Donc ici, tout ce que je fais est de prendre la vue, de la passer dans le Mini et d'initialiser le Mini.

02:58.390 --> 03:01.470
Exécutons maintenant la démo pour voir ce qui se passe exactement.

03:01.480 --> 03:02.820
Faites en sorte qu'elle soit belle et grande pour nous.

03:02.830 --> 03:10.030
Nous avons donc ici un champ A, un champ B, un champ de résultat, et nous pouvons les additionner et

03:10.030 --> 03:10.810
les réinitialiser.

03:10.810 --> 03:16.120
Remarquez que les options d'ajout et de réinitialisation sont grisées parce que vous n'avez pas saisi de champs ici.

03:16.120 --> 03:18.600
Il y a donc une validation très légère.

03:18.610 --> 03:21.910
Supposons que nous voulions ajouter deux plus trois.

03:21.940 --> 03:26.320
Le bouton Ajouter est maintenant disponible, nous cliquons dessus et le résultat est cinq.

03:26.320 --> 03:32.140
Je peux cliquer sur réinitialiser, je choisirai cinq et dix et je cliquerai à nouveau sur ajouter.

03:32.140 --> 03:34.180
Et nous voyons que le résultat est 15.

03:34.180 --> 03:41.950
Nous avons donc l'interface utilisateur affichée ici, puis une sorte de calcul effectué sur l'interface utilisateur, et enfin ces calculs.

03:41.950 --> 03:44.470
résultats des calculs sont renvoyés à l'interface utilisateur.

03:44.500 --> 03:53.110
L'exemple classique le plus fondamental de MVC consiste donc à diviser ce qu'un débutant pourrait faire

03:53.110 --> 04:00.010
une classe qui fait tout cela, qui a les vues, qui a l'interface utilisateur, qui fait les calculs, qui prend l'utilisateur en charge.

04:00.010 --> 04:02.110
l'utilisateur, la reflète.

04:02.110 --> 04:05.200
Mais dans le cadre d'un projet de plus grande envergure, cela ne serait pas possible.

04:05.620 --> 04:08.050
Voyons donc ce que, comment nous mettons en scène ici.

04:08.490 --> 04:15.300
Dans chacune de ces scènes, nous avons un objet de jeu World, qui est simplement un objet de jeu vide.

04:15.300 --> 04:18.000
qui contient quelques enfants, la caméra et l'éclairage.

04:18.000 --> 04:22.380
J'ai donc simplement caché ces objets, car il s'agit des éléments de base de chaque scène.

04:22.410 --> 04:24.260
Ensuite, nous avons la vue de la calculatrice.

04:24.270 --> 04:25.530
Jetons-y un coup d'œil.

04:25.530 --> 04:33.570
Cette vue utilise Unity UI, le système d'interface utilisateur le plus populaire, qui existe depuis des années.

04:33.600 --> 04:39.510
À ne pas confondre avec UI toolkit, qui est encore plus récent, mais il s'agit de l'interface utilisateur standard et nous avons

04:39.510 --> 04:42.690
les différents éléments de l'interface utilisateur, nous avons le système d'événements.

04:42.690 --> 04:44.820
Tout cela est assez banal.

04:45.540 --> 04:48.480
Et puis je vais me mettre ici.

04:48.480 --> 04:55.050
Nous avons donc le script d'affichage de la calculatrice, et c'est juste un script personnalisé que j'ai ajouté et qui prend

04:55.050 --> 04:56.990
chacun de ces éléments d'interface utilisateur.

04:57.000 --> 05:00.000
Ce que je fais avec ça, c'est...

05:00.910 --> 05:04.480
Les stocker et pouvoir y accéder.

05:04.480 --> 05:06.170
C'est ainsi que la vue est configurée.

05:06.190 --> 05:10.890
Ensuite, comme je l'ai mentionné, voici l'exemple lui-même et nous y faisons glisser la vue.

05:10.900 --> 05:18.010
Donc, chaque fois que dans de nombreux MVC, vous voulez avoir une vue qui étend Monobehaviour, qui est un super

05:18.010 --> 05:24.760
commun mais optionnel, alors vous voulez qu'elle soit accessible par le Mini lui-même.

05:24.760 --> 05:28.900
On passe donc la référence à la vue dans l'exemple.

05:28.900 --> 05:31.500
Nous voici à nouveau dans notre exemple.

05:31.510 --> 05:32.710
Voici la vue.

05:32.740 --> 05:33.790
Voici le Mini.

05:33.820 --> 05:35.680
Voyons comment cela se passe.

05:37.650 --> 05:39.180
A chaque fois.

05:40.180 --> 05:42.040
Nous nous amusons un peu avec notre zoom.

05:42.340 --> 05:42.670
D'accord.

05:42.820 --> 05:46.200
Voici donc le mini-modèle.

05:46.210 --> 05:52.750
Il étend le mini MVC AI intégré ici dans le constructeur.

05:52.750 --> 05:54.490
Il prend en charge cette vue.

05:54.670 --> 05:58.150
Ensuite, dans l'initialisation, il crée un contexte.

05:58.180 --> 06:05.410
Le contexte est la colle qui permet au modèle, à la vue et au contrôleur de communiquer dans le même contexte.

06:05.410 --> 06:06.040
système.

06:06.040 --> 06:10.600
Si vous aviez plusieurs contextes, vous auriez plusieurs minis.

06:10.600 --> 06:16.320
Mais en général, dans nos projets, y compris celui-ci, nous avons un mini, ce qui signifie que nous avons un seul contexte.

06:16.330 --> 06:20.500
On peut le considérer comme le petit canal radio qui permet à ces trois préoccupations différentes de se parler

06:20.500 --> 06:21.160
l'une à l'autre.

06:21.160 --> 06:25.060
Nous créons donc un contexte ici, en créant un simple contexte.

06:25.090 --> 06:30.250
Nous créons ensuite un modèle personnalisé qui contiendra nos valeurs spécifiques.

06:31.010 --> 06:33.680
Nous créons un contrôleur spécifique ici.

06:33.710 --> 06:38.780
Les contrôleurs sont la colle qui permet d'exécuter la logique métier.

06:38.780 --> 06:44.690
Je prends donc un modèle, je prends une vue et je suis capable de faire en sorte que les deux se parlent.

06:44.690 --> 06:50.000
Puis, comme c'est le cas habituellement, je fais ce qui suit.

06:51.570 --> 06:54.150
Initialiser tout explicitement.

06:54.150 --> 06:56.850
Vous pouvez donc voir ici que nous créons le contexte.

06:56.880 --> 06:58.320
Nous créons le modèle.

06:58.350 --> 06:59.760
Nous créons le contrôleur.

06:59.760 --> 07:02.820
Et après tout cela, nous initialisons chaque chose.

07:02.850 --> 07:05.760
Typiquement, c'est la phase d'initialisation.

07:05.760 --> 07:07.890
C'est à ce moment-là que les choses commencent vraiment à se passer.

07:07.890 --> 07:14.190
Si je ne les initialisais pas, elles resteraient là, peut-être connectées entre elles et prêtes à faire des choses

07:14.190 --> 07:16.340
mais ne lanceraient pas vraiment leur processus.

07:16.350 --> 07:20.670
Et comme je l'ai mentionné ici, l'ordre d'initialisation est souvent important.

07:20.670 --> 07:26.460
Je dois donc initialiser le modèle, la vue et le contrôleur, et ce n'est pas une règle explicite.

07:26.460 --> 07:33.120
tous les projets, mais vous constaterez qu'en fonction des dépendances, vous voudrez que le modèle, la vue et le contrôleur soient initialisés.

07:33.120 --> 07:37.050
les faire commencer par le plus simple et le plus facile à initialiser.

07:37.050 --> 07:40.380
En général, le contrôleur est initialisé en dernier.

07:40.560 --> 07:41.340
C'est super.

07:41.340 --> 07:42.900
Jetons un coup d'œil à chacun d'entre eux.

07:43.380 --> 07:45.240
Voici le modèle de la calculatrice.

07:46.010 --> 07:51.620
Dans le framework MVC, le modèle n'est qu'un simple stockage de données.

07:51.620 --> 07:57.350
Ici, je stocke le A, le B et le résultat que nous avons vus dans The View.

07:57.380 --> 08:04.700
J'utilise maintenant une classe personnalisée que j'ai créée et qui est incluse dans mini MVC, appelée Observable.

08:04.700 --> 08:09.910
Donc, chaque fois que vous voyez observable INT, pensez simplement qu'il s'agit d'une bonne vieille unité.

08:09.920 --> 08:16.100
INT Elle est destinée à stocker des nombres entiers, mais elle est dotée d'une petite puissance supplémentaire qui peut distribuer

08:16.130 --> 08:19.190
événements et être écouté et faire un peu de liaison de données.

08:19.190 --> 08:24.440
Ici, je stocke trois ints différents et je les initialise tous à 000.

08:24.440 --> 08:26.180
Voilà pour le modèle.

08:27.490 --> 08:28.900
Nous voici de retour ici.

08:28.900 --> 08:30.280
Regardons le contrôleur.

08:30.310 --> 08:33.070
Les contrôleurs ont tendance à être un peu plus complexes.

08:33.070 --> 08:37.030
J'utilise donc ici l'interface I du contrôleur.

08:37.960 --> 08:44.520
J'ai une référence au modèle que nous venons de voir et à la vue que je stocke ici.

08:44.530 --> 08:51.610
Et puis dans l'initialisation, ce que je fais c'est que j'écoute que chaque fois que le bouton d'ajout ou le bouton de réinitialisation sont

08:51.610 --> 08:56.140
je l'écoute et je regarde quelles sont les conséquences.

08:56.140 --> 09:03.460
Eh bien, chaque fois que le contrôleur, ici le bouton de vue, a été réinitialisé, ce que nous allons faire, c'est que nous allons

09:03.460 --> 09:05.260
réinitialiser les valeurs du modèle.

09:05.290 --> 09:06.160
C'est assez simple.

09:06.160 --> 09:07.030
Simple.

09:08.190 --> 09:13.890
Chaque fois que l'annonce est faite ici, ce sont les contrôleurs qui font le calcul.

09:13.890 --> 09:20.190
Il va donc dire que A plus B est le résultat et c'est tout.

09:20.220 --> 09:30.060
Maintenant, remarquez ici encore, parce que j'ai A, B et le résultat sont de type observable int vous avez toujours

09:30.060 --> 09:32.940
toujours à faire un dot value pour les définir.

09:32.940 --> 09:37.680
Vous pouvez donc jeter un coup d'œil au source de l'observable int et au repo git gratuit qui est lié dans la section

09:37.680 --> 09:38.310
chat.

09:38.550 --> 09:41.730
Mais vous verrez que le.

09:43.890 --> 09:51.030
Ce qui est intéressant ici, c'est qu'à chaque fois que vous définissez cette valeur, un événement est déclenché, ce qui permet à n'importe quel utilisateur d'avoir accès à l'information.

09:51.030 --> 09:52.290
système peut écouter.

09:52.320 --> 09:55.920
Encore une fois, nous commençons à parler d'une liaison de données légère.

09:56.070 --> 09:57.210
C'est tout.

09:57.210 --> 10:01.140
Parlons maintenant de la vue, qui est la dernière chose que nous n'avons pas encore étudiée.

10:01.140 --> 10:04.500
Nous allons donc passer à notre référence de The View.

10:07.150 --> 10:07.750
Très bien.

10:07.750 --> 10:10.810
La vue étend donc le monobehaviour.

10:10.810 --> 10:16.870
Il n'y a donc pas de règle selon laquelle les préoccupations des MVCs doivent étendre Monobehaviour.

10:18.310 --> 10:19.190
C'est à vous de voir.

10:19.210 --> 10:23.050
Chacun d'entre eux, ou tous, ou aucun ne peut étendre le comportement du modèle.

10:23.050 --> 10:26.740
Mais il est très courant que la vue étende le comportement du modèle.

10:26.740 --> 10:31.330
C'est parce qu'en général, la vue prend en compte les données de l'utilisateur.

10:32.180 --> 10:34.520
L'affichage et le rendu des graphiques à l'utilisateur.

10:34.520 --> 10:38.030
Et dans le monde de l'unité, le fait d'avoir un mana beaver permet de réaliser tout cela.

10:38.210 --> 10:42.710
Je crée donc des événements unity pour les boutons add et reset.

10:42.740 --> 10:44.330
Il y a un peu de configuration ici.

10:44.390 --> 10:52.010
J'écoute les éléments de l'interface utilisateur, donc j'utilise les événements unity ici pour écouter les changements de ces champs de texte.

10:53.090 --> 11:00.530
Chaque fois que l'un de ces champs de texte change, chaque fois que la valeur du modèle change.

11:00.530 --> 11:06.070
Donc ici j'écoute le A, ici j'écoute le B et ici j'écoute le résultat.

11:06.080 --> 11:11.030
Chaque fois que ces valeurs changent, je mets à jour les valeurs du texte.

11:11.030 --> 11:13.430
Voici donc notre liaison bidirectionnelle.

11:13.430 --> 11:20.810
Si l'utilisateur tape dans le champ de saisie, il est écouté ici et envoyé au modèle.

11:20.810 --> 11:26.840
modèle est modifié à cause de l'ajout ou de la réinitialisation, il le renvoie à la vue.

11:26.840 --> 11:29.360
C'est donc là que nous effectuons notre liaison de données.

11:29.360 --> 11:37.100
Et ici, je fais une petite étape supplémentaire pour griser le bouton de réinitialisation et griser le bouton d'ajout.

11:37.100 --> 11:42.170
S'il n'y a pas d'entrée valide dans les champs, je le vérifie ici.

11:43.380 --> 11:44.670
Y a-t-il autre chose à voir ici ?

11:44.670 --> 11:51.810
Oui, je suppose que lorsque l'utilisateur clique sur le bouton d'ajout, j'envoie l'événement d'ajout personnalisé.

11:52.080 --> 11:53.940
Exécutons à nouveau la démo.

11:55.330 --> 11:58.510
Je vais la faire belle et grande et...

12:01.400 --> 12:03.950
Eh bien, peut-être que je couvrais le code pour une grande partie de cela.

12:04.870 --> 12:05.150
Hmm.

12:05.640 --> 12:06.420
Oups.

12:06.430 --> 12:09.010
On va essayer de se mettre du bon côté ici.

12:09.130 --> 12:09.910
Donc.

12:10.850 --> 12:14.770
Essayons un plus un, puis je remettrai les compteurs à zéro.

12:14.950 --> 12:18.130
Et deux plus deux et j'ajoute.

12:18.250 --> 12:20.170
Voici donc le résultat que nous avons ici.

12:20.170 --> 12:22.210
Voilà pour la démonstration de la calculatrice.
