WEBVTT

00:00.200 --> 00:00.620
Très bien.

00:00.650 --> 00:06.410
Jetons ensuite un coup d'œil à la liaison de données dans Unity avec une architecture personnalisée.

00:09.280 --> 00:13.990
Voici donc la démo de liaison de données sur le côté.

00:14.590 --> 00:22.750
Dans la démo sur la liaison de données, nous allons voir comment, dans un projet auquel MVC a été ajouté, il serait possible de

00:22.750 --> 00:24.280
la liaison de données ?

00:24.280 --> 00:33.700
La liaison de données a pour but d'offrir un modèle facilement réutilisable pour synchroniser les valeurs entre différents domaines.

00:33.700 --> 00:41.560
Donc, si vous avez deux classes et qu'elles ont toutes deux une valeur de texte de message et que vous voulez que si l'une d'entre elles change

00:41.560 --> 00:46.720
la valeur pour que l'autre l'entende, et si la première l'entend, alors elle la modifie, alors

00:46.720 --> 00:47.650
le second l'entend.

00:47.650 --> 00:49.210
La liaison est donc bidirectionnelle.

00:49.210 --> 00:50.800
Voyons un exemple.

00:50.800 --> 00:52.780
Vous pouvez imaginer à quel point cela peut être utile.

00:53.470 --> 00:59.830
Cette démo fait partie du cours MVC architecture for Unity, dont vous trouverez le lien ci-dessous.

00:59.830 --> 01:07.000
Il s'agit d'un cours payant et il est actuellement en promotion car nous célébrons le fait d'avoir déjà plus de 6000 étudiants.

01:07.420 --> 01:10.790
Nous espérons qu'au moment où vous regarderez cette vidéo, vous verrez encore plus d'étudiants.

01:13.270 --> 01:20.200
Le cours lui-même couvre toutes sortes de sujets différents : unity, software, design, mini nvqs aussi.

01:20.200 --> 01:27.220
Dans le contenu supplémentaire, nous avons ajouté dix démos en plus de ce qui existait déjà.

01:27.220 --> 01:28.660
Nous allons en examiner une ici.

01:29.080 --> 01:31.260
Nous allons examiner la liaison des données ici.

01:31.270 --> 01:35.830
Jetons donc un coup d'œil à la liaison de données en sautant dans unity.

01:36.370 --> 01:38.800
Voici donc le projet dans Unity.

01:38.800 --> 01:44.980
Si vous suivez le lien git, le lien git gratuit qui contient l'ensemble du code source, vous pouvez introduire la fonction

01:44.980 --> 01:50.190
avec les instructions qui s'y trouvent, puis vous irez simplement dans samples et cliquerez sur import.

01:50.300 --> 01:53.140
Je l'ai déjà fait ici pour les besoins de ce cours.

01:54.340 --> 01:58.760
Allons dans le dossier more et regardons l'exemple de liaison de données.

01:58.780 --> 02:03.070
Prenons un moment pour examiner les données, la structure des dossiers ici.

02:03.070 --> 02:10.330
À l'intérieur de la liaison de données, j'ai un dossier pour Mini, car dans certaines démonstrations antérieures, j'ai une version

02:10.330 --> 02:11.380
sans mini.

02:11.410 --> 02:17.360
Si vous voulez voir une approche traditionnelle dans unity et ensuite avec Mini celle-ci je ne l'ai fait qu'avec

02:17.360 --> 02:19.100
Mini, ce qui est le cas ici.

02:19.220 --> 02:26.690
Ensuite, dans le dossier des ressources, j'ai quelques préfabriqués pour les deux vues différentes qui vont être utilisées.

02:26.690 --> 02:27.770
dans l'application.

02:28.670 --> 02:32.230
J'ai la scène, que je vais exécuter dans une seconde, puis le code source.

02:32.240 --> 02:40.580
Maintenant, comme c'est souvent le cas avec ces démos et les meilleures pratiques pour de nombreux MVC, chaque fois que vous exécutez une démo en

02:41.120 --> 02:46.600
Unity, vous voulez la structurer de manière à ce que les fichiers sources pour le contrôleur, le modèle, la vue et le service.

02:46.610 --> 02:48.920
Si vous l'avez, ont leur propre dossier dédié.

02:48.920 --> 02:53.960
De cette façon, vous pouvez facilement voir les différentes séparations des préoccupations.

02:54.790 --> 02:55.330
Cool.

02:55.930 --> 02:57.250
Exécutons donc la démo.

02:57.250 --> 02:58.450
Je vais l'agrandir.

03:00.280 --> 03:01.810
Voyons maintenant ce qu'il en est.

03:01.810 --> 03:04.150
Nous avons ici deux vues différentes.

03:04.150 --> 03:07.930
On pourrait penser qu'il s'agit d'une partie d'un seul modèle, mais il y a en fait deux préfabriqués.

03:07.930 --> 03:16.450
Nous les avons donc mis en place et nous voulons pouvoir modifier celui-ci et dire "Hello world" à partir de la gauche.

03:16.450 --> 03:20.500
Remarquez que les deux champs de texte sont mis à jour en temps réel.

03:20.980 --> 03:25.030
Passons à l'étape suivante et disons que je suis à droite.

03:25.570 --> 03:28.270
Et vous pouvez voir que les deux sont mis à jour.

03:28.270 --> 03:31.050
Nous avons donc une liaison bidirectionnelle dans les MVC.

03:31.060 --> 03:32.580
Voyons comment cela se passe.

03:32.590 --> 03:40.270
Maintenant, comme je l'ai peut-être mentionné dans une partie précédente de cette série de vidéos, Unity n'a historiquement pas

03:40.270 --> 03:41.920
supportait aucune liaison bidirectionnelle.

03:42.680 --> 03:49.370
Ils l'ont ensuite ajouté dans l'éditeur pour les outils d'édition, et à l'avenir, cela viendra dans le runtime,

03:49.520 --> 03:52.520
notamment dans le cadre de la boîte à outils de l'interface utilisateur.

03:52.520 --> 03:58.790
Je n'utilise donc pas la boîte à outils de l'interface utilisateur, et cette fonctionnalité de liaison bidirectionnelle par Unity n'est pas encore disponible.

03:58.790 --> 04:04.010
disponible au moment de cet enregistrement, donc j'ai fait une solution personnalisée ici, alors jetons un coup d'oeil

04:04.010 --> 04:04.520
à cela.

04:07.820 --> 04:13.550
Ici, dans la scène, j'ai The World, qui est un objet de jeu contenant simplement la caméra et l'éclairage.

04:13.550 --> 04:14.120
à l'intérieur.

04:14.330 --> 04:19.850
Ensuite, j'ai la vue de gauche, qui, si je déplace la gauche.

04:23.090 --> 04:23.930
Je ne peux même pas le faire.

04:25.330 --> 04:25.810
Très bien.

04:25.810 --> 04:27.700
Nous avons également la vue de droite.

04:27.730 --> 04:29.860
Nous avons ensuite l'exemple de liaison de données.

04:29.860 --> 04:33.620
La liaison de données prend une référence dans les vues gauche et droite.

04:33.640 --> 04:36.760
Commençons donc notre voyage dans le code.

04:37.690 --> 04:39.400
Voici donc le monobehaviour.

04:39.400 --> 04:42.500
Il s'agit d'un exemple qui exécute la scène entière.

04:42.520 --> 04:44.530
J'ai les deux champs sérialisés.

04:44.530 --> 04:47.790
Nous venons d'examiner la vue gauche et la vue droite.

04:47.800 --> 04:52.150
Et ici, au début, je vais créer un nouveau contexte.

04:52.180 --> 04:59.080
Nous n'avons pas vu cela dans les démonstrations précédentes et dans le cœur du cours, nous ne montrons pas ce contexte exact.

04:59.080 --> 05:02.470
mais ici, je crée.

05:08.140 --> 05:08.620
Ici.

05:08.620 --> 05:14.650
Je crée le contexte en dehors du Mini et je le passe ici.

05:15.010 --> 05:18.520
Ensuite, j'ai la vue gauche et la vue droite.

05:19.120 --> 05:25.120
J'ai donc créé l'extérieur et je passe la même valeur dans chacune d'entre elles.

05:26.060 --> 05:27.050
Préoccupations.

05:27.210 --> 05:33.200
Oh, en fait, maintenant que j'y pense, il y a une autre démo où nous avons plusieurs minis en

05:33.200 --> 05:35.960
le même projet et ceci est emprunté à cette démo.

05:35.960 --> 05:40.850
La création du contexte en dehors du mini n'est donc pas explicitement requise.

05:40.850 --> 05:46.460
La voici pour l'autre démo intitulée Multiple Minis, que vous pouvez consulter dans la série.

05:46.460 --> 05:50.020
Ce commentaire n'est donc pas forcément nécessaire ici.

05:50.030 --> 05:51.980
Regardons maintenant la Mini.

05:53.020 --> 06:01.150
Ici, ce que je fais, c'est que la liaison de données est configurée dans son propre mini, et le Mini ici va

06:01.150 --> 06:04.600
prendre les références pour la vue gauche et la vue droite et les stocker.

06:05.960 --> 06:10.010
Ensuite, ici dans le it's, c'est l'initialisation de la Mini.

06:10.950 --> 06:12.660
Je vais configurer le modèle.

06:12.840 --> 06:15.840
Il y a un modèle que je vais configurer The View.

06:15.870 --> 06:16.860
Il y a deux vues.

06:16.890 --> 06:18.060
Une gauche et une droite.

06:18.060 --> 06:24.730
Encore une fois, remarquez qu'il s'agit d'interfaces utilisateur distinctes et séparées, puis j'ai le contrôleur ici.

06:24.750 --> 06:31.320
Maintenant, le contrôleur va prendre une référence au modèle et aux deux vues et comme avec tous les minis,

06:31.320 --> 06:33.840
le contrôleur est le plus intelligent des préoccupations.

06:33.840 --> 06:38.490
Il prend donc une référence aux différentes parties et c'est le contrôleur qui va être capable d'avoir

06:38.490 --> 06:40.290
les faire fonctionner ensemble.

06:41.160 --> 06:42.660
Voici donc le contrôleur.

06:43.230 --> 06:46.560
Je pense que c'est la seule chose que nous verrons dans cette démo.

06:46.830 --> 06:49.920
Je prends la gauche et la droite, je les stocke ici.

06:49.920 --> 06:51.210
Je stocke le modèle.

06:51.480 --> 06:53.370
Puis ici.

06:54.400 --> 06:55.270
Ooh.

06:55.750 --> 06:58.100
Je m'attendais à ce qu'il y ait plus de logique ici.

06:58.120 --> 06:59.560
Laissez-moi y réfléchir une seconde.

07:01.690 --> 07:03.040
Oui, je suppose qu'il y en a.

07:03.190 --> 07:04.840
J'ai créé ceci il y a quelques temps.

07:05.800 --> 07:10.210
Souvent, vous savez, ce que je vais montrer dans les vues, c'est comment ils font la synchronisation.

07:10.210 --> 07:15.550
Mais vous pourriez faire couler les deux valeurs pour le champ de texte de gauche et le champ de texte de droite.

07:15.550 --> 07:16.990
droite dans le contrôleur.

07:16.990 --> 07:18.940
Je m'attendais donc à le voir ici.

07:18.940 --> 07:21.220
Mais jetons un coup d'œil aux autres problèmes.

07:21.220 --> 07:22.510
Voici donc le modèle.

07:24.060 --> 07:26.430
Et le modèle dans les MVC.

07:28.290 --> 07:30.450
Est la plus stupide des préoccupations.

07:30.450 --> 07:35.670
Donc, si le contrôleur est en quelque sorte le plus intelligent, le plus conscient, il a le contexte de l'ensemble du système.

07:35.670 --> 07:38.790
les modèles de situation sont les plus stupides.

07:38.790 --> 07:41.130
Ils ne font que stocker des données et c'est tout.

07:41.130 --> 07:44.040
Ici, il va donc stocker une chaîne de messages.

07:45.160 --> 07:47.950
Et il va commencer avec cette valeur initiale.

07:47.980 --> 07:50.110
Nous avons vu qu'il s'agit d'éditer ce texte.

07:50.110 --> 07:53.080
Nous allons lancer la démo une fois de plus pour que vous puissiez voir ce qui se passe.

07:54.460 --> 07:56.790
Examinons ensuite les vues gauche et droite.

07:56.800 --> 07:58.600
Voici donc la vue de gauche.

07:58.630 --> 08:05.820
Elle va utiliser le comportement mono comme nous voulons souvent le faire pour les problèmes liés à l'interface utilisateur.

08:05.830 --> 08:10.060
Il est facultatif d'étendre le comportement mono dans Mini, mais ici nous voulons le faire.

08:10.940 --> 08:13.820
Et puis ici, c'est ici que le binding va être mis en place.

08:13.820 --> 08:16.310
Je vais donc m'assurer que l'image est bien placée à l'écran.

08:16.310 --> 08:18.650
Encore une fois, nous sommes dans l'initialisation.

08:18.980 --> 08:22.970
Je veux juste pouvoir faire beaucoup de place ici pour en parler.

08:22.970 --> 08:23.410
D'accord.

08:23.420 --> 08:25.790
La première chose que je fais, c'est d'installer ceci.

08:25.790 --> 08:33.560
Ce que je fais, c'est que j'ai une référence au modèle dans MVCs.

08:33.800 --> 08:38.330
Le contrôleur peut toujours accéder aux autres préoccupations.

08:38.600 --> 08:45.410
Mais en tant que meilleure pratique, vous voulez limiter l'accès à partir d'autres modèles.

08:45.410 --> 08:48.440
Par exemple, à la vue et à la vue au modèle.

08:48.440 --> 08:50.360
Il faut en être très conscient.

08:50.360 --> 08:56.270
Ici, je fais un choix conscient pour que la vue, qui est la classe dans laquelle nous nous trouvons, reçoive un

08:56.270 --> 08:57.380
référence au modèle.

08:57.380 --> 09:03.590
Et la façon dont vous pouvez le faire est en demandant au contexte qui est implicitement disponible pour vous et

09:03.590 --> 09:08.630
Hey, model locator, go get me a reference to the model that's in the game.

09:08.660 --> 09:15.480
Cela ressemble un peu à l'injection de dépendance, cette ligne particulière ici, mais ce n'est pas tout à fait cela

09:15.480 --> 09:17.100
universelle de la solution.

09:17.130 --> 09:22.860
Le contexte comporte des localisateurs pour les modèles afin que tout le monde puisse les obtenir si nécessaire.

09:22.890 --> 09:25.650
Ici, dans la vue, nous obtenons simplement une référence à ce modèle.

09:25.800 --> 09:30.030
N'oubliez pas que ce modèle contient simplement la chaîne des messages affichés à l'écran.

09:30.880 --> 09:33.870
Nous allons ensuite procéder à la liaison ici.

09:33.880 --> 09:43.440
Ainsi, si le modèle de données du message change, nous allons l'écouter ci-dessous.

09:43.450 --> 09:47.500
Ainsi, chaque fois que le modèle de données change, nous l'entendons.

09:47.620 --> 09:51.940
Et chaque fois que la vue change, nous allons l'entendre.

09:51.940 --> 09:54.430
Nous allons donc voir ci-dessous la méthode pour chacun d'entre eux.

09:54.430 --> 09:55.420
Mais n'oubliez pas que nous écoutons.

09:55.420 --> 09:58.810
Si le modèle change ou si la vue change.

09:59.230 --> 10:02.800
Regardons d'abord celui-ci.

10:03.530 --> 10:10.100
Si le modèle de données change, nous mettrons à jour la vue.

10:11.800 --> 10:18.160
Et ici, si la vue change, nous mettrons à jour le modèle.

10:18.160 --> 10:24.490
Ainsi, chacun de ces deux éléments fait l'opposé de cette liaison bidirectionnelle et c'est tout.

10:24.760 --> 10:30.340
Les rouages de ce flux particulier ne sont donc pas propres à Mini.

10:30.370 --> 10:36.070
Vous pouvez faire cela en dehors de Mini, mais les classes qui permettent de réaliser tout cela sont incluses ici.

10:36.070 --> 10:43.540
Il s'agit d'un sujet particulièrement intéressant lorsque nous parlons de mini MVC, car la liaison de données est un élément majeur de la gestion des données.

10:43.540 --> 10:44.850
plus.

10:44.860 --> 10:50.440
Si vous disposez d'une liaison de données, l'utilisation d'un mini MVC est encore plus rapide et plus facile à mettre en place.

10:52.190 --> 10:54.020
Exécutons la démo une dernière fois.

10:57.940 --> 10:59.470
Je crois que j'ai décommenté quelque chose.

10:59.470 --> 11:00.880
C'est pourquoi nous recompilons ici.

11:00.910 --> 11:02.740
Ici encore, nous sommes en train de tourner.

11:02.740 --> 11:06.780
Nous chargeons à partir du service, l'édition de ce texte qui a été codé en dur.

11:06.790 --> 11:11.290
Nous avons la valeur codée en dur et si je tape dans la partie gauche, nous obtenons cela.

11:11.290 --> 11:14.260
Et si je dis bonjour sur le côté droit, c'est synchronisé.

11:14.260 --> 11:15.040
Voilà, c'est fait.

11:15.040 --> 11:19.900
C'est la liaison de données dans cette démo Unity MVC.
