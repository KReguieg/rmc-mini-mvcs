WEBVTT

00:00.180 --> 00:03.600
L'exemple de l'horloge avec beaucoup de MVC.

00:04.290 --> 00:06.390
Nous sommes ici dans un projet vide.

00:06.390 --> 00:10.800
J'ai ajouté le framework Mini et VCs et importé les échantillons.

00:11.010 --> 00:15.690
Ici, regardons la version de l'horloge avec plusieurs MVC.

00:15.930 --> 00:17.760
Je vais commencer par exécuter l'échantillon.

00:21.160 --> 00:21.460
Ici.

00:21.460 --> 00:27.820
Nous n'avons pas de véritable interface utilisateur, mais dans la console de débogage, nous avons quelques déclarations de débogage et

00:27.820 --> 00:32.020
ils montrent le temps écoulé depuis que la scène est ouverte.

00:32.440 --> 00:33.130
C'est tout.

00:33.130 --> 00:36.090
Il n'y a pas d'interface utilisateur, pas de fonctionnalité de saisie non plus.

00:36.100 --> 00:38.650
C'est la première fois que nous voyons la structure du fichier.

00:38.650 --> 00:42.760
J'ai le script d'exemple lui-même qui se trouve sur un objet de jeu dans la scène.

00:42.760 --> 00:48.130
J'ai la mini classe horloge qui est créée et qui contient toutes les préoccupations.

00:48.130 --> 00:54.940
Ensuite, j'ai des classes liées à chacune des préoccupations, modèle, vue, contrôleur et service.

00:54.940 --> 00:58.900
Un concept supplémentaire que nous n'avons pas encore abordé est le contexte.

00:58.900 --> 01:02.690
En examinant ce code, regardez le rôle du contexte.

01:02.710 --> 01:04.750
Voici le mini exemple lui-même.

01:08.980 --> 01:10.210
Il s'agit d'un comportement.

01:10.210 --> 01:15.090
Au démarrage, nous instancions l'objet de la classe mini et nous appelons initialize.

01:15.100 --> 01:16.830
Voici la mini classe horloge.

01:16.840 --> 01:20.200
Cette classe étend la classe cadre mini et VCs.

01:20.410 --> 01:24.990
Vous pouvez considérer cette classe comme l'objet parent qui contient les quatre préoccupations.

01:25.000 --> 01:31.990
Il s'agit d'une classe générique dans laquelle nous passons le type fort du contexte (modèle, vue, contrôleur).

01:31.990 --> 01:32.830
et du service.

01:32.830 --> 01:37.240
Voici l'initialisation avec la structure des mini MVC.

01:37.240 --> 01:41.980
Toutes les parties principales impliquées ont un appel explicite à l'initialisation.

01:41.980 --> 01:47.530
C'est un endroit idéal pour placer tout code qui doit se produire exactement une fois lorsque les systèmes se réveillent.

01:47.530 --> 01:49.110
Qu'est-ce qu'on fait ici ?

01:49.120 --> 01:55.900
Tout d'abord, nous nous assurons qu'il est initialisé, puis nous créons le modèle contextuel, la vue et le contrôleur.

01:55.900 --> 01:56.770
et le service.

01:56.800 --> 02:01.810
Remarquez que les constructeurs de chaque élément ne prennent aucun argument, à l'exception du contrôleur.

02:01.960 --> 02:09.940
Il s'agit de l'un des premiers exemples de code où nous voyons que le contrôleur est le plus puissant et le plus performant.

02:09.940 --> 02:15.820
des préoccupations, car le contrôleur sert de ciment au modèle, à la vue et à l'affichage.

02:15.820 --> 02:20.350
nous lui transmettons ces références pour qu'il sache comment les gérer et s'en occuper.

02:20.350 --> 02:25.150
Enfin, nous suivons la meilleure pratique en initialisant chacune des préoccupations.

02:25.180 --> 02:29.790
Remarquez que tout prend le contexte et que nous n'avons pas encore parlé du contexte.

02:29.800 --> 02:30.970
Jetons un coup d'œil.

02:31.000 --> 02:33.340
Le contexte est une classe cadre.

02:33.340 --> 02:39.100
Elle implémente l'interface du contexte AI et le reste du système recherche cette interface.

02:39.100 --> 02:45.190
Vous êtes donc libre de créer votre propre alternative au contexte en implémentant simplement cette interface.

02:45.190 --> 02:49.900
Mais je trouve que pour mon usage, cette implémentation de base répond généralement à mes besoins.

02:49.900 --> 02:52.000
Elle ne contient que deux choses.

02:52.000 --> 02:58.150
Elle comporte un localisateur de modèle et un gestionnaire de commandes, tous deux accessibles au public depuis l'extérieur, et

02:58.150 --> 02:59.950
ils sont créés lors de l'instanciation.

02:59.950 --> 03:01.600
Quel est donc le rôle du contact ?

03:01.600 --> 03:08.590
Vous pouvez considérer le contexte comme le système de messagerie auquel les quatre préoccupations font référence.

03:08.620 --> 03:10.720
Quelles sont les choses qu'une préoccupation peut faire avec le contexte ?

03:10.720 --> 03:16.150
Eh bien, en utilisant le gestionnaire de commandes, ils peuvent écouter n'importe quelle commande et invoquer n'importe quelle commande.

03:16.150 --> 03:18.880
Il s'agit de la partie messagerie et du localisateur de modèle.

03:18.880 --> 03:25.390
Un concept plus avancé vous permet d'enregistrer n'importe quel modèle et de le récupérer.

03:25.390 --> 03:31.690
Ainsi, chacune des préoccupations peut enregistrer un modèle ou écouter les événements du modèle.

03:31.690 --> 03:37.480
Ici, dans le constructeur, nous voyons que ces deux parties sont instanciées et, à titre expérimental, nous voyons que ces deux parties sont instanciées et, à titre expérimental, nous voyons que ces deux parties sont instanciées.

03:37.480 --> 03:40.300
j'ai un localisateur de contexte.

03:40.690 --> 03:48.430
Cela permet à n'importe quelle portée d'ajouter un contexte comme nous le voyons ici, et n'importe quelle autre préoccupation peut obtenir ce contexte

03:48.430 --> 03:49.000
si nécessaire.

03:49.000 --> 03:51.160
Dans des exemples plus complexes, nous verrons.

03:51.160 --> 03:57.130
Cela peut être utile si votre projet a deux axes mini MV différents et que vous voulez communiquer entre les axes mini MV.

03:57.130 --> 04:01.570
Pour ce premier exemple, nous n'entrerons pas dans cette complexité et vous pouvez donc ignorer ce détail.

04:01.570 --> 04:05.920
Voilà qui met fin à la discussion de haut niveau sur l'ensemble de cet exemple.

04:05.920 --> 04:12.490
Nous voyons que nous avons le mini-objet parent qui contient les quatre préoccupations, et que chacune d'entre elles a les caractéristiques suivantes

04:12.490 --> 04:14.890
une référence au contexte de haut niveau.

04:14.890 --> 04:17.800
Il est important de comprendre ces concepts de base.

04:17.800 --> 04:22.330
N'hésitez pas à revoir cette partie du cours pour mieux comprendre.

04:22.330 --> 04:25.720
Passons maintenant en revue chacune des préoccupations et voyons comment elles fonctionnent.

04:25.720 --> 04:28.600
Nous avons déjà examiné le contexte, alors regardons le modèle.

04:28.600 --> 04:31.030
C'est la première préoccupation que nous avons vue dans le code.

04:31.030 --> 04:36.910
Nous allons donc examiner plus en détail la façon dont il est construit et nous verrons que toutes les autres préoccupations dans cet échantillon

04:36.910 --> 04:41.080
et la plupart des autres préoccupations de l'autre échantillon suivent un schéma similaire.

04:41.080 --> 04:44.630
Dans les discussions à venir, nous n'aborderons donc pas ce point de manière aussi approfondie.

04:44.650 --> 04:47.790
Remarquez ici que le modèle de l'horloge étend le modèle de base.

04:47.800 --> 04:51.760
L'extension d'une classe de base est facultative.

04:51.760 --> 04:56.620
Elle s'accompagne d'une fonctionnalité gratuite, mais vous êtes libre de l'aborder d'une autre manière si vous le souhaitez.

04:56.620 --> 04:57.700
souhaitez plus de flexibilité.

04:57.700 --> 05:03.160
Une convention est donc proposée, mais vous avez la possibilité de trouver vos propres solutions.

05:03.160 --> 05:04.660
Examinons le modèle de base.

05:04.660 --> 05:08.920
Le modèle de base met en œuvre le modèle I, le modèle I met en œuvre, je m'en préoccupe.

05:08.920 --> 05:14.770
Il est possible que dans les versions futures du framework, nous fassions quelque chose de personnalisé ici pour le modèle, mais

05:14.770 --> 05:18.670
pour l'instant, cela imite simplement ce que n'importe quelle autre préoccupation est capable de faire.

05:18.670 --> 05:25.570
La préoccupation I est capable d'initialiser et d'accepter un contexte, de sorte que toute classe qui implémente cette interface

05:25.570 --> 05:32.080
est capable de s'initialiser en acceptant un contexte dans la méthode d'initialisation, puis elle est capable de stocker et d'accepter un contexte dans la méthode d'initialisation.

05:32.080 --> 05:35.620
maintenir une propriété publique de ce contexte.

05:35.620 --> 05:42.070
Voici donc ce que les quatre préoccupations sont capables de faire Maintenant, alors que les modèles d'utilisation suggérés de la façon dont

05:42.070 --> 05:47.560
d'utiliser un modèle est différent de celui d'utiliser un contrôleur, sachez que sous le capot, ils sont identiques.

05:47.560 --> 05:48.130
capable.

05:48.130 --> 05:50.350
Encore une fois, cela permet une grande flexibilité.

05:50.350 --> 05:55.720
Revenons en arrière et voyons comment le modèle d'horloge étend le modèle de base, que nous venons d'explorer.

05:55.720 --> 05:57.640
le reste du fonctionnement du modèle d'horloge.

05:57.640 --> 06:01.600
Vous pouvez considérer le modèle comme le magasin de données pour toutes les données d'exécution.

06:01.600 --> 06:03.640
De quoi l'exemple de l'horloge a-t-il besoin ?

06:03.640 --> 06:05.440
Eh bien, il a besoin de l'heure actuelle.

06:05.440 --> 06:08.200
Et dans notre exemple, elle maintient le délai.

06:08.300 --> 06:10.280
entre chaque tic-tac de l'horloge.

06:10.280 --> 06:17.160
Pour nous, ce sera une seconde, donc nous verrons qu'il affiche une seconde, puis 2 secondes, puis 3

06:17.160 --> 06:18.110
secondes et ainsi de suite.

06:18.110 --> 06:24.410
Le modèle, comme toute préoccupation, possède la fonction initialize et la seule fonctionnalité personnalisée que nous faisons ici est initialize

06:24.410 --> 06:26.960
la valeur de nos variables observables.

06:26.960 --> 06:28.280
C'est tout pour le modèle d'horloge.

06:28.280 --> 06:30.050
Examinons maintenant la vue de l'horloge.

06:30.050 --> 06:38.720
La vue horloge implémente la vue oeil et comme nous l'avons vu précédemment, la vue oeil est capable d'avoir un initialize

06:38.720 --> 06:41.060
et de prendre un contexte, c'est à peu près tout.

06:41.060 --> 06:42.530
Nous n'irons donc pas plus loin.

06:42.530 --> 06:46.310
Nous n'avons besoin d'aucune fonctionnalité de base, donc nous n'utilisons aucune classe de base ici.

06:46.310 --> 06:48.110
Nous implémentons simplement la vue nous-mêmes.

06:48.110 --> 06:52.730
Nous avons donc quelques propriétés, quelques champs et nous nous occupons de l'initialisation.

06:52.730 --> 06:56.450
Il s'agit d'un modèle de base pour toutes les préoccupations.

06:56.450 --> 06:59.720
La seule chose que nous faisons ici est d'utiliser le contexte.

06:59.720 --> 07:05.150
C'est notre première utilisation de voir que nous accédons au gestionnaire de commande à l'intérieur et que nous écoutons un contexte personnalisé.

07:05.150 --> 07:07.910
commande personnalisée appelée commande de changement d'heure.

07:07.910 --> 07:12.800
Chaque fois que le gestionnaire de commandes invoquera cette commande, nous pourrons l'écouter ici.

07:12.800 --> 07:15.590
Voici la première occasion de voir le gestionnaire de commandes en action.

07:15.590 --> 07:20.300
N'oubliez pas la différence essentielle entre les commandes et les événements avec commandes.

07:20.300 --> 07:24.260
Nous n'avons pas besoin de savoir qui enverra ce type de message.

07:24.260 --> 07:28.460
Nous souscrivons uniquement à l'intermédiaire du gestionnaire de commandes et nous le gérons de cette façon.

07:28.520 --> 07:30.230
C'est une solution découplée.

07:30.230 --> 07:31.640
Chaque préoccupation met en œuvre.

07:31.640 --> 07:33.800
Le requis est initialisé.

07:33.800 --> 07:40.700
Il s'agit plus d'une meilleure pratique que j'utilise que de quelque chose de spécifique aux frameworks MVC, mais j'ai juste

07:40.700 --> 07:46.070
une méthode qui vérifie facilement si nous sommes initialisés, et si ce n'est pas le cas, elle lève une exception.

07:46.070 --> 07:50.690
Nous verrons cette méthode utilisée en tête de presque toutes les méthodes de chaque préoccupation.

07:50.690 --> 07:55.250
C'est un grade simple pour vérifier que vos méthodes publiques ne sont pas appelées trop tôt.

07:55.250 --> 08:00.860
Maintenant, à chaque fois que le gestionnaire de commande envoie cet événement connexe, nous gérons cela ici, nous pouvons

08:00.860 --> 08:04.760
voir que la première chose que nous faisons est de nous assurer que nous sommes bien initialisés.

08:04.760 --> 08:08.600
Nous nous attendons à ce que chaque fois que la scène s'exécute, elle soit initialisée, d'accord.

08:08.600 --> 08:13.460
Il s'agit simplement d'un contrôle supplémentaire qui garantit que les cycles de vie fonctionnent correctement.

08:13.460 --> 08:17.000
La seule véritable fonctionnalité personnalisée que nous réalisons ici est le débogage.

08:17.000 --> 08:17.600
Déconnexion.

08:17.600 --> 08:22.430
Rappelez-vous, nous n'avons pas d'interface utilisateur à l'écran, nous n'utilisons pas de comportements de type "monte".

08:22.430 --> 08:26.960
Notre façon de parler à travers la vue est donc d'utiliser une déclaration de débogage.

08:26.960 --> 08:31.760
Cela ne veut pas dire que vous devez suivre ces étapes à chaque fois que vous déboguez dans vos projets.

08:31.760 --> 08:35.600
Vous le faites aussi librement que vous le feriez dans n'importe quel projet typique.

08:35.600 --> 08:43.070
C'est juste un exemple inventé, créé pour montrer une sorte de retour d'information de l'utilisateur sans aucun comportement mono.

08:43.070 --> 08:46.070
ou d'interface utilisateur, ce qui rend cet exemple très simple.

08:46.070 --> 08:47.900
Voyons maintenant le service d'horloge.

08:47.900 --> 08:50.330
Le service clock étend le service base.

08:50.330 --> 08:57.380
Comme pour toutes les préoccupations qui étendent une classe de base optionnelle, tout ce qu'il fait, c'est l'initialisation.

08:57.380 --> 09:01.280
et la mise en place du contexte que nous avons vu dans d'autres préoccupations.

09:01.280 --> 09:06.890
Ce service est conçu pour charger quelque chose et en informer le système.

09:06.890 --> 09:08.960
Nous avons donc un événement d'unité personnalisé ici.

09:08.960 --> 09:12.650
Les données réelles qui sont chargées à partir de ce service sont le délai.

09:12.650 --> 09:14.120
Ces données sont donc disponibles ici.

09:14.120 --> 09:17.930
À l'intérieur de l'initialisation, nous effectuons la configuration de base de la préoccupation.

09:17.930 --> 09:23.120
La seule chose vraiment personnalisée que nous faisons ici est d'initialiser ce délai à partir de quelque part en dehors de ceci

09:23.120 --> 09:24.830
scope load sera appelé.

09:24.830 --> 09:31.310
Et ce que nous voyons ici est très similaire à la fonctionnalité de la version non mini MVCs que nous avons examinée

09:31.310 --> 09:32.060
avant.

09:32.240 --> 09:36.470
Il charge simplement un fichier texte local, récupère la valeur de la chaîne de caractères.

09:36.470 --> 09:38.300
Il est int et le stocke pour nous.

09:38.300 --> 09:43.100
Il convient de noter qu'une fois les données chargées, l'événement loaded est déclenché.

09:43.100 --> 09:46.370
Nous n'avons pas encore vu quelle portée va consommer cet événement.

09:46.370 --> 09:46.670
Suivant.

09:46.670 --> 09:47.900
Regardons le contrôleur.

09:47.900 --> 09:53.510
Ce sera le point le plus complexe de cet échantillon et de la plupart des échantillons de contrôleurs où

09:53.510 --> 09:58.100
nous verrons le gros du code, le contrôleur d'horloge étend le contrôleur de base dans ce cas.

09:58.100 --> 10:01.640
Dans tous les cas où une classe de base est utilisée, elle est facultative.

10:01.640 --> 10:05.360
Vous pouvez bien sûr créer votre propre classe qui implémente le contrôleur.

10:05.360 --> 10:11.180
Mais ici, nous avons une fonctionnalité de base qui va gérer l'initialisation et la prise en charge des données.

10:11.180 --> 10:11.870
dans le contexte.

10:11.870 --> 10:17.090
Parce que le contrôleur d'horloge traite certains arguments spécifiques, j'ai décidé que le contrôleur de base est un

10:17.090 --> 10:22.670
générique et que vous passiez les valeurs fortement typées pour le modèle, la vue et le service.

10:22.670 --> 10:26.870
Dans le constructeur, nous passons la vue du modèle et le service à la classe de base.

10:26.870 --> 10:32.450
Dans l'initialisation, nous faisons la chose typique que toutes les préoccupations font, c'est-à-dire gérer l'initialisation et le service.

10:32.450 --> 10:34.250
prendre le contexte et le stocker.

10:34.430 --> 10:40.220
La seule chose vraiment personnalisée que nous faisons ici est d'écouter le modèle, de s'abonner à l'un des observables

10:40.220 --> 10:44.150
et d'écouter le service pour savoir quand il est chargé.

10:44.150 --> 10:49.040
Alors que nous avons parlé du concept d'observable et que nous avons vu le code source du modèle, voici ce qu'il en est

10:49.040 --> 10:55.220
le premier endroit où nous avons vu l'abonnement à l'événement Unity à partir de l'une des classes observables.

10:55.220 --> 11:03.140
Ainsi, à chaque fois que la valeur de l'heure du modèle est définie à partir de n'importe quel champ d'application, ce changement de valeur est déclenché.

11:03.410 --> 11:08.180
Encore une fois, l'utilisation d'observables est facultative mais recommandée pour tous.

11:08.510 --> 11:15.710
Les propriétés dans le modèle, vous obtenez ce paradigme automatique de pouvoir définir la valeur et d'être

11:15.710 --> 11:18.560
d'écouter quand cette valeur a été définie et modifiée.

11:18.560 --> 11:25.310
Ainsi, lorsque ce service est chargé, nous mettons à jour le modèle en fonction de ce que le service a obtenu de son serveur externe.

11:25.310 --> 11:25.700
données externes.

11:25.700 --> 11:27.530
Ensuite, le tic-tac de l'horloge commence.

11:27.530 --> 11:32.960
Le fonctionnement du tic-tac de l'horloge est très similaire à celui de la version non mini de NBC.

11:32.990 --> 11:34.700
Cependant, il y a une distinction essentielle.

11:34.700 --> 11:40.730
Plus tôt, j'ai parlé de la façon dont unity collapsait le modèle, la vue et le contrôleur dans plusieurs zones du moteur unity,

11:40.730 --> 11:45.590
L'un d'entre eux est que le comportement mono lui-même est assez puissant et couvre de nombreuses préoccupations.

11:45.590 --> 11:52.070
Dans l'exemple non mini MVC, j'ai utilisé une routine CO afin d'appeler du code répétable car ceci

11:52.070 --> 11:54.200
n'utilise pas de comportements mono.

11:54.200 --> 11:58.040
Je n'ai plus le même accès à la routine CO.

11:58.040 --> 12:00.140
Il y a beaucoup de façons de faire semblant.

12:00.140 --> 12:05.600
Ce que j'ai choisi de faire ici, c'est d'avoir une classe séparée dans laquelle vous êtes libre d'aller fouiller si vous le souhaitez.

12:05.600 --> 12:08.060
tout ce qu'elle fait, c'est appeler un code répétable.

12:08.060 --> 12:10.430
J'appelle cela pour cet exemple Clock Helper.

12:10.430 --> 12:15.110
Son fonctionnement sort du cadre de cet exemple, mais sachez qu'il s'agit d'une solution de contournement à l'appel de

12:15.110 --> 12:15.950
code répétable.

12:15.950 --> 12:17.900
Et c'est l'une des solutions que j'ai retenues.

12:17.900 --> 12:23.210
Il est important de noter qu'ici, dans le contrôleur, chaque fois que le délai se produit, c'est-à-dire

12:23.210 --> 12:26.030
toutes les secondes, je règle les données du modèle.

12:26.030 --> 12:29.210
Le contrôleur définit donc une valeur sur le modèle.

12:29.210 --> 12:34.760
Et parce que nous avons écouté l'événement unity à chaque fois que la valeur du modèle change, nous obtenons ceci

12:34.760 --> 12:35.270
callback.

12:35.270 --> 12:41.180
Nous voici donc dans le contrôleur, en train de souscrire aux changements de modèle et de les traiter, en les transformant en

12:41.180 --> 12:42.050
commandes.

12:42.050 --> 12:45.860
Il s'agit d'un modèle très courant que nous retrouverons dans l'ensemble du système MVC.

12:45.860 --> 12:52.910
Nous prenons un événement qui est quelque peu découplé et nous le traduisons en une commande qui est fortement découplée.

12:53.030 --> 12:59.570
Rappelez-vous que les commandes peuvent être observées et écoutées par n'importe quelle préoccupation, à condition qu'elles aient un niveau de sécurité suffisant.

12:59.570 --> 13:02.570
accès au contexte, ce qui est le cas de toutes nos préoccupations.

13:02.570 --> 13:10.190
Ainsi, chaque fois que vous voyez invoke command, vous pouvez penser qu'il s'agit d'un message comme une station de radio que toute préoccupation

13:10.190 --> 13:11.030
peut écouter.

13:11.030 --> 13:13.340
C'est un concept très puissant.

13:13.340 --> 13:18.620
Il vous offre la flexibilité de communiquer vers et à partir de n'importe quelle préoccupation.

13:18.620 --> 13:25.040
Bien que cela soit très flexible, nous voulons suivre les conventions de base où le contrôleur est l'élément principal.

13:25.040 --> 13:30.110
qui enverra et recevra ces commandes, il y aura des exceptions et nous les verrons

13:30.110 --> 13:35.900
dans les exemples, décider exactement comment vous utilisez les événements unity et comment vous utilisez les commandes dans votre projet est

13:35.900 --> 13:38.510
l'art d'utiliser MVC.

13:38.510 --> 13:41.180
Dans les diapositives précédentes, j'ai suggéré des conventions.

13:41.180 --> 13:42.770
Vous êtes libre de les suivre.

13:42.770 --> 13:46.490
Je vous recommande simplement d'être cohérent si vous appliquez des exceptions.

13:46.490 --> 13:47.210
Voilà, c'est tout.

13:47.210 --> 13:52.730
Nous avons couvert la création du contexte, du modèle, de la vue, du contrôleur et du service.

13:53.000 --> 13:55.910
Il ne nous reste plus qu'à les initialiser.

13:56.180 --> 14:02.240
Maintenant, du point de vue de la chronologie, nous avons un comportement de monarque dans la scène et, à son démarrage, il a

14:02.240 --> 14:05.630
a créé le mini à l'intérieur du minis initialize.

14:05.630 --> 14:11.660
Il a créé ce que nous voyons ici, en câblant toutes ces différentes pièces, puis en initialisant dans ceci

14:11.660 --> 14:17.450
exemple particulier, parce que je suis familier avec son fonctionnement, je sais que lorsque le contrôleur est initialisé,

14:17.450 --> 14:22.190
c'est ce qui déclenche le tic-tac et fait vraiment avancer cet exemple.

14:22.190 --> 14:23.960
C'est tout pour l'aperçu du code.

14:23.960 --> 14:27.740
Il s'agit probablement de l'exemple de code le plus dense.

14:27.740 --> 14:32.000
Bien qu'il s'agisse d'un exemple simple, nous avons beaucoup de concepts ici.

14:32.000 --> 14:36.770
Nous reprenons toute la théorie que nous avons vue dans les diapositives précédentes et nous la rassemblons.

14:36.770 --> 14:39.950
Jetons un coup d'œil à l'échantillon qui s'exécute une dernière fois dans la scène.

14:39.950 --> 14:46.700
J'ai sélectionné un objet de jeu, nous pouvons voir dans l'inspecteur que cet objet de jeu a juste l'exemple et je vais

14:46.700 --> 14:47.660
exécuter l'exemple.

14:51.590 --> 14:59.960
Comme il s'exécute à chaque délai, qui est de 1000 millisecondes, cela signifie que nous obtenons un tick par seconde.

15:00.710 --> 15:03.770
Et notre déclaration de débogage apparaît dans la console.

15:04.540 --> 15:06.430
Voilà l'exemple complet.

15:06.610 --> 15:11.020
Nous avons vu tous les concepts du service modèle-vue-contrôleur.

15:11.680 --> 15:17.230
Comment ils sont initialisés, comment le contexte est la colle qui aide à transmettre les messages entre eux.

15:17.230 --> 15:23.770
Et vous avez une excellente base pour voir la théorie que nous avons apprise appliquée dans le code C-sharp réel.

15:24.100 --> 15:26.740
Voilà donc notre premier échantillon complet.

15:26.740 --> 15:29.710
Voir le code fonctionner avec des mini MVC.

15:29.710 --> 15:36.520
Bien que le cas d'utilisation soit très simple, tout ce que nous faisons est de produire une déclaration de débogage toutes les secondes.

15:36.520 --> 15:39.730
Nous voyons que nous avons beaucoup de concepts pour y parvenir.

15:39.730 --> 15:46.240
C'est le premier exemple que vous verrez lorsque vous utilisez une architecture sur mesure, comme beaucoup de MVC,

15:46.270 --> 15:47.860
on a l'impression que c'est verbeux.

15:47.860 --> 15:54.160
On a l'impression que l'on n'aurait pas pu faire ça dans une seule classe, comme on l'a fait avec le MVC non mini.

15:54.160 --> 15:54.670
version ?

15:54.670 --> 15:58.060
Mais n'oubliez pas que nous voulons investir dans notre logiciel.

15:58.060 --> 16:04.360
Nous voulons utiliser ces meilleures pratiques et ce n'est pas dans un exemple de dix minutes que nous comprendrons vraiment...

16:04.360 --> 16:11.140
la pleine puissance dix jours après le début d'un projet, dix mois après le début d'un projet, en ayant une séparation correcte du code.

16:11.140 --> 16:15.780
qui vient avec un cadre sur mesure est incroyablement puissant et rapporte des dividendes.

16:15.790 --> 16:16.930
C'est tout pour l'instant.

16:16.930 --> 16:17.650
Merci à tous.
