WEBVTT

00:00.210 --> 00:02.340
L'aperçu des tests unitaires.

00:02.340 --> 00:04.220
Tout d'abord, un peu de contexte.

00:04.230 --> 00:11.790
Au fur et à mesure que vos projets s'enrichissent de scripts, de méthodes et de complexité, il peut s'avérer difficile de s'assurer de l'efficacité des tests unitaires.

00:11.790 --> 00:14.610
que le nouveau code ne casse pas l'ancien.

00:14.640 --> 00:20.020
Les tests automatisés peuvent vous aider à vous assurer que votre code fonctionne comme vous le souhaitez.

00:20.040 --> 00:26.640
Les tests automatisés nous aident à découvrir comment et où les bogues se produisent plus tôt dans le processus au lieu de

00:26.640 --> 00:31.140
l'option beaucoup plus coûteuse d'attendre que les utilisateurs finaux signalent ces bogues.

00:31.140 --> 00:37.650
Vous pouvez donc utiliser des architectures MVC sans tests et vous pouvez utiliser des tests sans architecture MVC.

00:37.650 --> 00:41.140
Pourquoi est-il important de parler de ces sujets ensemble ?

00:41.160 --> 00:46.860
C'est parce que la combinaison de ces deux technologies est incroyablement puissante en utilisant une architecture

00:46.860 --> 00:48.090
comme MVC.

00:48.120 --> 00:54.450
Elle permet de s'assurer que votre code est plus découplé, que chaque classe a un objectif unique et que les solutions sont plus faciles à mettre en œuvre.

00:54.450 --> 00:55.140
sont plus simples.

00:55.140 --> 00:58.060
Tous ces éléments sont également des caractéristiques d'un code plus facile à tester.

00:58.080 --> 01:04.740
L'ajout de tests à votre projet le rendra plus robuste, plus confiant et encouragera les solutions simples,

01:04.740 --> 01:09.090
surtout lorsqu'ils sont associés au développement piloté par les tests, dont nous allons parler.

01:09.090 --> 01:12.690
L'ajout de tests unitaires à votre projet et à votre flux de travail vous fera gagner du temps.

01:12.690 --> 01:15.620
Cela permet de gagner du temps au niveau de la planification, du développement et de la maintenance.

01:15.630 --> 01:21.450
Il ajoute plus de confiance à votre code et, grâce à cette confiance, vous pouvez faire preuve de plus d'audace dans vos projets.

01:21.450 --> 01:22.460
facteurs de risque.

01:22.470 --> 01:29.010
Pensez à exécuter tous vos tests avant un remaniement majeur, puis après, ce qui vous fera gagner du temps et vous donnera une plus grande confiance en vous.

01:29.010 --> 01:31.530
que le remaniement a bien fonctionné.

01:31.560 --> 01:33.750
Les tests sont à la fois un art et une science.

01:33.750 --> 01:38.480
Avec plus de recherche et de pratique, chaque développeur peut développer son propre art.

01:38.490 --> 01:43.050
Les tests de bas niveau consistent également à tester les choses au niveau de l'unité.

01:43.620 --> 01:49.200
Les méthodes individuelles, disons, et les pratiques et l'évolution de votre logiciel qui proviendront de

01:49.200 --> 01:56.370
Cela encourage également les discussions à un niveau plus élevé sur les choix architecturaux, les dépendances ou l'absence de dépendances.

01:56.370 --> 02:00.840
dans votre code et le degré de couplage ou de découplage de ces systèmes.

02:00.870 --> 02:06.980
Tout cela fait partie d'une conversation plus large qui invite à apporter une bonne organisation à votre logiciel.

02:06.990 --> 02:13.530
Notre premier objectif, surtout lorsque nous sommes novices en matière de tests, est de nous assurer qu'une méthode spécifique a l'effet désiré, c'est-à-dire qu'elle n'a pas d'effet négatif.

02:13.530 --> 02:14.300
résultats souhaités.

02:14.310 --> 02:21.060
Une fois que c'est fait, vous pouvez maintenant la tester dans des conditions inattendues et des cas particuliers qui peuvent donner lieu à des discussions

02:21.060 --> 02:24.390
et l'analyse de la structure de la classe elle-même.

02:24.390 --> 02:28.230
Vous pouvez ensuite examiner l'objectif du système dans lequel cette classe s'inscrit.

02:28.230 --> 02:35.430
Et comme je l'ai mentionné, ce type d'analyse nous donne l'occasion et la possibilité d'examiner les grandes catégories d'utilisateurs.

02:35.430 --> 02:37.290
solution à grande échelle que nous avons devant nous.

02:37.290 --> 02:37.980
En logiciel.

02:37.980 --> 02:43.250
Il existe de nombreux types de tests et, que vous le sachiez ou non, vous en faites déjà.

02:43.260 --> 02:46.980
Parmi les types de tests les plus courants, citons le test de fumée.

02:46.980 --> 02:50.730
Il s'agit d'un test plutôt décontracté qui consiste à se demander si cela fonctionne pour moi.

02:50.730 --> 02:55.380
Et pour beaucoup d'entre nous, c'est peut-être le seul type de test de projet que nous faisons.

02:56.030 --> 03:03.050
Chaque fois que vous créez un nouveau code, vous exécutez l'application comme un utilisateur ou jouez au jeu comme un joueur et vous

03:03.050 --> 03:08.300
voyez si ce chemin particulier à travers l'application ou le jeu fonctionne comme je l'attends ?

03:08.330 --> 03:14.210
Ensuite, il y a les tests utilisateurs où périodiquement, peut-être après une construction hebdomadaire, vous invitez quelques utilisateurs à participer au test.

03:14.210 --> 03:16.340
ou des joueurs à essayer le jeu.

03:16.370 --> 03:21.880
Vous ne cherchez pas seulement à savoir s'il y a des bogues, mais s'il répond aux attentes de l'utilisateur.

03:21.890 --> 03:23.840
Est-ce que c'est amusant de jouer à ce genre de choses ?

03:23.840 --> 03:30.320
Avec le test unitaire, vous examinez une toute petite partie de l'expérience, peut-être une seule

03:30.320 --> 03:34.790
appel de méthode ou une petite série d'appels au fur et à mesure que les systèmes fonctionnent ensemble.

03:34.790 --> 03:38.120
Et vous vous demandez si cela fonctionne comme prévu.

03:38.150 --> 03:43.280
Comme je l'ai mentionné, nous effectuons déjà des tests de fumée dans le cadre d'une approche fondamentale des projets.

03:43.280 --> 03:45.410
Imaginons un exemple simple.

03:45.410 --> 03:50.240
Si nous avions une application " cliquez sur le bouton ", qui a un bouton, et quand vous cliquez dessus, vous gagnez.

03:50.360 --> 03:52.730
Nous pourrions y ajouter du code.

03:52.730 --> 03:55.040
Compilez et exécutez l'expérience.

03:55.040 --> 03:59.670
Cliquez sur le bouton 1 et voyez si le texte de la victoire s'affiche.

03:59.690 --> 04:05.120
Il s'agirait d'un test de fumée que vous pourriez transmettre à l'utilisateur pour voir si cela fonctionne pour lui.

04:05.450 --> 04:11.470
Dans les deux cas, il s'agit d'un test assez coûteux à réaliser et d'une utilisation très restreinte du code.

04:11.480 --> 04:11.810
ici.

04:11.810 --> 04:17.570
Dans cet exemple simple, il peut sembler que nous pouvons capturer tous les cas d'utilisation, mais imaginez un jeu plus grand

04:17.570 --> 04:19.940
avec des boucles de base et des boucles métalliques.

04:20.210 --> 04:26.240
Vous ne pouvez pas compter sur le développeur ou l'utilisateur et l'utilisateur qui teste, teste tous les boutons, tous les

04:26.240 --> 04:30.200
fonctionnalité, toutes les entrées et tous les résultats potentiels.

04:30.200 --> 04:36.560
Lorsqu'ils sont effectués correctement, les tests unitaires permettent d'identifier plus rapidement un plus grand nombre de chemins dans le code, et vous pouvez ainsi

04:36.560 --> 04:40.550
pouvez exécuter cette suite de tests automatiquement plus fréquemment au fil du temps.

04:40.550 --> 04:44.690
Vous construisez une liste de tests permanents prêts à être exécutés.

04:44.690 --> 04:48.050
Vous savez ainsi que le nouveau code ne casse aucune ancienne fonctionnalité.

04:48.050 --> 04:54.440
Certaines équipes fonctionnent selon les principes de développement Agile, ce qui inclut une partie de votre calendrier appelée

04:54.440 --> 04:55.130
un sprint.

04:55.130 --> 05:01.910
Par exemple, toutes les deux semaines, l'équipe s'engage à ajouter de nouvelles fonctionnalités chaque heure, chaque jour, chaque semaine ou chaque mois.

05:01.910 --> 05:02.540
sprint.

05:02.540 --> 05:05.240
L'équipe peut à nouveau exécuter ces tests automatisés.

05:05.240 --> 05:07.610
C'est une excellente occasion de détecter les bogues.

05:07.610 --> 05:09.950
Comment exécutons-nous ces tests exactement ?

05:09.980 --> 05:13.730
Eh bien, Unity a un support de test dans l'éditeur Unity.

05:13.730 --> 05:19.660
Il y a une fenêtre dédiée que vous pouvez ouvrir et exécuter manuellement ces tests quand vous le souhaitez.

05:19.670 --> 05:21.220
C'est un bon point de départ.

05:21.230 --> 05:25.850
Bien sûr, l'automatisation est possible et recommandée pour les projets plus importants.

05:25.850 --> 05:32.150
Il y a des moyens de lier cela à votre contrôle de version de sorte que chaque fois que vous livrez ou livrez à une certaine

05:32.150 --> 05:34.460
branche, vous pouvez exécuter ces tests à nouveau.

05:34.760 --> 05:39.170
Unity lui-même offre certains services, notamment Unity Cloud build.

05:39.170 --> 05:45.170
Cela imite l'exécution de ces tests et la construction de votre jeu, mais sur un serveur qui le fait automatiquement

05:45.170 --> 05:47.960
une fois par jour ou à n'importe quelle fréquence.

05:47.960 --> 05:52.670
Maintenant, dans le développement général de unity, nous sommes familiers avec deux modes différents à l'intérieur de unity

05:52.670 --> 05:53.660
l'expérience.

05:54.020 --> 05:56.870
Avant d'appuyer sur le bouton de lecture, nous sommes en mode édition.

05:56.870 --> 06:01.430
Une fois que nous avons appuyé sur le bouton de lecture jusqu'à ce que la scène s'arrête, nous sommes en mode lecture.

06:01.730 --> 06:05.780
Avec unity testing, vous pouvez tester dans l'un ou l'autre de ces deux modes.

06:05.780 --> 06:07.970
Il y a ensuite plusieurs façons d'aborder la question.

06:08.450 --> 06:13.580
Certaines des idées de test que vous pourriez avoir ici seraient d'appeler une méthode et de voir si elle vous donne le

06:13.580 --> 06:14.720
résultat attendu.

06:14.720 --> 06:20.720
Supposons que nous ayons une classe de système mathématique avec une méthode ADD et qu'il suffise de passer des paramètres connus et de voir

06:20.720 --> 06:22.280
s'il correspond au résultat connu.

06:22.280 --> 06:27.200
Vous pouvez également avoir des tests qui posent des questions spécifiques sur la fonctionnalité de l'ED.

06:27.230 --> 06:33.920
La fenêtre ED s'est-elle affichée à la bonne taille, avec les objets du jeu ou la caméra dans la bonne position ?

06:33.920 --> 06:35.480
avant le début de la scène ?

06:35.480 --> 06:41.000
Faire des tests et passer en mode édition lorsque vous le pouvez est un excellent point de départ, c'est donc ce que nous faisons par défaut.

06:41.000 --> 06:41.540
Mode lecture.

06:41.570 --> 06:47.030
Les tests sont incroyablement utiles, mais ils s'accompagnent de la complexité supplémentaire du code d'exécution.

06:47.710 --> 06:52.900
Ici, vous ne testez pas seulement le retour et le résultat d'une méthode, mais vous le testez au sein même de la méthode.

06:52.900 --> 06:57.100
le cycle de vie plus large des objets du jeu et d'autres concepts de l'unité.

06:57.200 --> 07:03.850
Et si c'est le cas, vous pouvez tester le code qui s'appuie sur une mise à jour de démarrage de réveil, etc. des choses qui n'exécutent que

07:03.850 --> 07:04.520
au moment de l'exécution.

07:04.540 --> 07:11.320
Quelques idées de tests ici sont de voir si un préfabriqué une fois instancié exécute sa méthode de démarrage correctement.

07:11.320 --> 07:12.720
Sans aucune exception.

07:12.730 --> 07:14.860
Vous pouvez tester le code dans le temps.

07:15.580 --> 07:17.890
Cette boucle s'exécute-t-elle correctement ?

07:17.890 --> 07:19.280
Après quelques secondes.

07:19.300 --> 07:21.940
Vous pouvez vérifier les interactions physiques en cours d'exécution.

07:21.940 --> 07:28.850
Combien de rebonds une balle aura-t-elle dans votre jeu 3D avant qu'elle ne cesse de tester le facteur de rebond ?

07:28.870 --> 07:30.430
Un peu plus de contexte ici.

07:30.430 --> 07:36.970
Historiquement, unity n'offrait pas de test intégré à l'éditeur à l'aide de la fenêtre ou de l'exécution de test.

07:36.970 --> 07:37.480
Nous verrons bien.

07:37.480 --> 07:43.360
Au cours des nombreuses années qui se sont écoulées depuis le lancement d'Unity, cette fonctionnalité a été progressivement ajoutée et étendue.

07:43.360 --> 07:45.220
Depuis la dernière version d'Unity.

07:45.220 --> 07:50.650
Nous avons tout ce qu'il faut pour exécuter les types de tests que nous voulons de la manière dont nous le voulons.

07:50.650 --> 07:56.020
Il n'y a jamais eu de meilleur moment pour ajouter des tests unitaires à votre flux de travail, et nous allons voir ensemble comment...

07:56.020 --> 07:56.830
de le faire.

07:57.250 --> 07:58.090
Merci à tous.
