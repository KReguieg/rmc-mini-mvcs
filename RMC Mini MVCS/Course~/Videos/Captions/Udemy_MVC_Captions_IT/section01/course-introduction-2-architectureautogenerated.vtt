WEBVTT

00:00.510 --> 00:03.090
Panoramica dell'architettura MVC.

00:03.090 --> 00:08.430
Continuando con la panoramica del corso, diamo un'occhiata a ciò che impareremo dai fondamenti di MVC

00:08.430 --> 00:09.120
stessi.

00:09.120 --> 00:14.130
Quando si parla di architettura e di progettazione del software, ci sono molti termini diversi.

00:14.130 --> 00:20.100
Alcuni di questi termini possono essere già noti e si può avere una solida padronanza di quali sono i termini più comuni.

00:20.100 --> 00:22.080
che vedete qui sono nuovi per voi.

00:22.110 --> 00:25.740
O forse ne avete un'idea, ma non una definizione completa.

00:25.740 --> 00:31.260
Vedrete termini come questi utilizzati nel corso del corso, e quando introdurrò un nuovo termine, lo farò

00:31.260 --> 00:33.660
spiegherò di cosa si tratta e ne fornirò il contesto.

00:34.080 --> 00:37.740
Alla fine di questo corso, avrete una padronanza più solida del vocabolario.

00:37.770 --> 00:41.440
Immaginate una scala di crescita professionale attraverso la vostra carriera.

00:41.520 --> 00:47.670
Alcuni di questi principi sono stati introdotti in una fase precedente del percorso di crescita e sarebbero necessari nelle fasi junior e intermedie della carriera.

00:47.670 --> 00:48.510
posizioni lavorative.

00:48.510 --> 00:52.830
La comprensione delle classi e della programmazione orientata agli oggetti è fondamentale.

00:52.830 --> 00:59.940
Nel corso del tempo, gli sviluppatori esperti lavorano sui design pattern, astraendo i concetti, rendendo il loro codice più

00:59.940 --> 01:04.980
modulare e riutilizzabile, nonché sull'apprendimento, sui test e sulle architetture.

01:04.980 --> 01:10.620
Questo corso si concentra sull'architettura e affronterà anche molti di questi concetti, tra cui

01:10.620 --> 01:12.900
il test della progressione di un gioco.

01:12.900 --> 01:19.950
La carriera di sviluppatore può avere molti titoli di lavoro diversi, a seconda della cultura del paese dell'azienda in cui ci si trova.

01:19.950 --> 01:20.670
in cui si lavora.

01:20.700 --> 01:22.440
La crescita potrebbe essere molto diversa.

01:22.440 --> 01:27.780
Ecco un esempio di alcuni dei diversi lavori che si possono svolgere nel corso di una lunga carriera.

01:27.780 --> 01:28.710
nello sviluppo di videogiochi.

01:28.710 --> 01:34.590
Sebbene l'esperienza nei concetti architettonici sia sempre importante nello sviluppo di software e videogiochi.

01:34.590 --> 01:41.640
sviluppo, è particolarmente cruciale nella fase intermedia del passaggio a posizioni di sviluppo senior.

01:41.640 --> 01:47.520
In questo grafico specifico si possono vedere anche posizioni di architetto del software dedicate, oltre a una posizione di

01:47.520 --> 01:49.440
posto per portare la propria esperienza.

01:49.440 --> 01:56.190
In definitiva, l'architettura di un software è l'organizzazione fondamentale di tutte le sue parti.

01:56.190 --> 02:02.610
Si basa su un insieme di principi di progettazione e di modelli di progettazione, di cui parleremo nel corso.

02:02.610 --> 02:09.060
Alcuni dei vantaggi dell'applicazione consapevole di un'architettura alla propria applicazione o gioco sono

02:09.060 --> 02:10.890
basata su concetti comprovati.

02:10.890 --> 02:14.910
Sarà in grado di garantire sicurezza, prestazioni e scalabilità ai vostri progetti.

02:14.910 --> 02:21.120
Le architetture sono tipicamente agnostiche rispetto ai linguaggi, il che significa che i principi sono più elevati e più teorici.

02:21.120 --> 02:26.670
e possono essere applicati a diversi linguaggi di programmazione e piattaforme di programmazione come Unity.

02:26.670 --> 02:27.300
Motore di gioco.

02:27.300 --> 02:33.060
Ora, anche se c'è una curva di apprendimento, i team che adottano l'architettura troveranno lo sviluppo in grado di muoversi

02:33.060 --> 02:37.860
e soprattutto la manutenzione dei progetti sarà molto più veloce.

02:37.860 --> 02:40.740
Nel corso toccheremo diversi tipi di architettura.

02:40.740 --> 02:43.740
C'è innanzitutto l'approccio senza architettura.

02:43.740 --> 02:49.860
È quello che usano soprattutto i principianti nei progetti o anche i veterani nei prototipi di progetti.

02:49.860 --> 02:56.580
In questo caso, per motivi di velocità e flessibilità, i team possono scegliere un framework particolare e andare avanti.

02:56.790 --> 03:01.860
Spesso in questi esempi ci si mette nei guai per quanto riguarda la scalabilità e l'aggiunta di funzionalità alla fine del progetto.

03:01.860 --> 03:02.940
diventa molto difficile.

03:02.940 --> 03:08.580
I team più esperti possono scegliere architetture personalizzate, adottando i diversi principi e schemi che

03:08.580 --> 03:11.460
di cui parleremo in questo corso e applicarli da soli.

03:11.460 --> 03:14.340
Ci sono dei vantaggi, in particolare la personalizzazione.

03:14.340 --> 03:19.800
Ci sono architetture consolidate, progetti che possiamo prendere dallo scaffale e portare nella nostra azienda.

03:19.800 --> 03:20.640
progetto.

03:20.640 --> 03:24.840
Questi includono MVC, Nvme e MVP.

03:24.870 --> 03:30.810
Questo corso si concentrerà sul pattern MVC o model view controller, quindi perché non procedere con il nostro

03:30.810 --> 03:34.950
progetti con un approccio senza architettura, facendo ciò che ci sembra giusto al momento?

03:34.950 --> 03:40.800
Beh, anche se all'inizio può essere più veloce e un po' più libero e flessibile nel modo in cui lo si approccia, si

03:40.800 --> 03:45.780
ci saranno più dibattiti su come e dove aggiungere le singole funzionalità, sia che si tratti di una singola persona che di un'altra.

03:45.780 --> 03:47.610
o di un team più ampio.

03:47.610 --> 03:50.400
Ogni sviluppatore può affrontare e risolvere questo problema in modo diverso.

03:50.400 --> 03:56.190
Questa incoerenza renderà il codice più difficile da leggere e il progetto più difficile da mantenere.

03:56.190 --> 04:01.170
E quando si aggiungono o si tolgono talenti al progetto, può essere difficile portare nuove persone

04:01.170 --> 04:01.470
su.

04:01.470 --> 04:06.750
C'è più formazione da fare e quando qualcuno lascia il vostro team, ci sono più informazioni personalizzate

04:06.750 --> 04:10.080
alle loro soluzioni specifiche prima che partano.

04:10.080 --> 04:15.300
Per molti sviluppatori, l'approccio senza architettura può sembrare la soluzione migliore, ma indubbiamente

04:15.300 --> 04:17.300
bug e complessità.

04:17.310 --> 04:20.400
Mi viene in mente questa citazione e la parafraserò.

04:20.730 --> 04:26.280
Ogni decisione che prendiamo mentre lavoriamo ai nostri progetti software è un investimento, e ogni investimento è un investimento.

04:26.280 --> 04:27.420
ha un costo.

04:27.420 --> 04:33.180
C'è effettivamente una curva di apprendimento, ma affrontiamo l'investimento confidando nel fatto che porterà con sé

04:33.180 --> 04:34.560
benefici lungo il percorso.

04:34.560 --> 04:40.230
È così che suggerisco di considerare le architetture con un costo e con benefici a lungo termine.

04:40.230 --> 04:46.350
Molte volte noi sviluppatori abbiamo l'impressione che il processo di sviluppo del software e dei videogiochi sia tutto incentrato su

04:46.350 --> 04:48.660
aggiungere nuove caratteristiche e funzionalità.

04:48.660 --> 04:51.170
Tuttavia, non è necessariamente così.

04:51.180 --> 04:57.960
Le ricerche dimostrano che in genere solo il 20% dello sforzo produttivo è destinato all'aggiunta di nuove caratteristiche e funzionalità.

04:57.960 --> 04:59.820
spendiamo la maggior parte del tempo.

05:00.000 --> 05:06.090
del nostro tempo e delle nostre energie a mantenere queste funzionalità, ad aggiornare i diversi strumenti e framework che utilizziamo,

05:06.390 --> 05:12.660
rispondere ai feedback degli utenti, ridurre le aree di intervento e, naturalmente, risolvere i bug.

05:12.660 --> 05:19.560
Creare codice manutenibile paga, stabilendo una struttura e un'architettura fin dall'inizio.

05:19.680 --> 05:26.640
con un modo coerente e personalizzato di aggiungere le nuove funzionalità sarà di grande aiuto durante questo 80% del lavoro.

05:26.640 --> 05:27.750
vita del software.

05:27.750 --> 05:31.800
Quando facciamo manutenzione, correggendo i bug e rispondendo ai feedback.

05:31.800 --> 05:33.630
Prendiamo ad esempio i bug.

05:33.630 --> 05:39.060
Lo stesso bug riscontrato all'inizio dello sviluppo è molto, molto più economico da risolvere.

05:39.060 --> 05:41.850
Richiede meno tempo agli sviluppatori e meno test.

05:41.850 --> 05:47.700
È una buona pratica catturare questi bug presto e spesso, così come correggere i bug prima di aggiungerne di nuovi.

05:47.700 --> 05:48.360
funzionalità.

05:48.360 --> 05:53.640
Oltre a creare un codice manutenibile che ci aiuti a raggiungere questi obiettivi, possiamo anche aumentare la

05:53.640 --> 05:55.260
quantità di automazione e test.

05:55.260 --> 05:56.190
Insieme al progetto.

05:56.190 --> 06:00.030
Vedremo come le architetture ci consentano di eseguire i test più facilmente.

06:00.030 --> 06:06.990
L'aumento dell'automazione e dei test porta fiducia, robustezza e stabilità anche ai nostri progetti.

06:06.990 --> 06:12.810
In che modo un framework come l'architettura model view controller ci aiuta con i test?

06:12.810 --> 06:19.380
In sostanza, l'utilizzo di un framework come MVC ci invita a separare le diverse aree di interesse.

06:19.390 --> 06:27.150
dei nostri progetti, in modo che questi aspetti siano separati, disaccoppiati nel modo in cui comunicano e anche

06:27.150 --> 06:30.440
invitare a responsabilità più piccole all'interno di ciascuna classe.

06:30.450 --> 06:36.000
Tutte queste qualità rendono il codice più testabile nell'ambito dei test, soprattutto quando utilizziamo qualcosa di

06:36.000 --> 06:39.030
chiamato sviluppo guidato dai test, che tratteremo nel corso.

06:39.030 --> 06:42.870
Il test stesso sarà parte integrante del modo in cui facciamo funzionare le nostre soluzioni.

06:42.870 --> 06:49.560
Vedremo che pensare ai test in anticipo ci aiuta a creare progetti con soluzioni più semplici.

06:49.560 --> 06:53.370
Possiamo certamente creare un progetto NVQ senza aggiungere i test.

06:53.520 --> 06:58.890
E per chi ha fatto dei test, sa che l'architettura MVC non è necessaria.

06:58.890 --> 07:01.350
Allora perché si parla di unire le due cose?

07:01.350 --> 07:05.430
Perché la combinazione di questi due concetti è incredibilmente potente.

07:05.430 --> 07:10.920
In questo corso, vedremo come l'utilizzo di un'architettura consolidata come MVC porterà molti vantaggi a

07:10.920 --> 07:12.510
sviluppo del nostro progetto Unity.

07:12.510 --> 07:17.910
Nel complesso, sono incredibilmente entusiasta di portare questi concetti e queste pratiche nelle mani di un maggior numero di sviluppatori.

07:17.910 --> 07:23.370
Il pubblico degli sviluppatori di Unity abbraccia un'incredibile quantità di tipi diversi di sviluppatori.

07:23.370 --> 07:28.800
Ci sono hobbisti che creano progetti per divertimento e sviluppatori professionisti di tutti i livelli di competenza.

07:28.800 --> 07:29.820
che utilizzano unity.

07:30.120 --> 07:34.910
Unity è molto flessibile e questo è uno dei vantaggi più interessanti del suo utilizzo.

07:34.920 --> 07:39.060
Tuttavia, a volte questa flessibilità può permetterci di creare soluzioni sbagliate.

07:39.060 --> 07:44.850
L'applicazione delle migliori pratiche che tratteremo in questa sede vi aiuterà a pensare in modo nuovo all'approccio

07:44.850 --> 07:45.750
i vostri progetti.

07:45.750 --> 07:51.990
Sono certo che gli argomenti che tratteremo qui saranno utili a tutti voi nello sviluppo dei vostri progetti.

07:51.990 --> 07:56.760
In sintesi, questo corso si concentra sull'architettura MVC di Unity.

07:56.790 --> 07:59.220
Abbiamo trattato i contenuti del corso.

07:59.490 --> 08:05.460
Abbiamo visto un po' come l'architettura può aiutarci a creare progetti migliori, e ho anche accennato

08:05.460 --> 08:11.130
che la potente combinazione di test e architettura può produrre risultati entusiasmanti.

08:11.130 --> 08:15.750
Nella prossima sezione parleremo di Unity come piattaforma.

08:16.260 --> 08:22.260
Faremo un rapido riepilogo dei motivi per cui scegliere Unity, delle sue caratteristiche e dei suoi servizi,

08:22.260 --> 08:25.200
e una breve panoramica delle sue parti principali.

08:25.380 --> 08:26.130
Grazie.
