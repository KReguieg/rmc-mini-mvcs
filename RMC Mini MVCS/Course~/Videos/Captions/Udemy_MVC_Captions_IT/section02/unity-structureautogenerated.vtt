WEBVTT

00:00.720 --> 00:02.340
La struttura dell'unità.

00:02.340 --> 00:05.260
Questo corso è suddiviso in diversi percorsi di apprendimento.

00:05.280 --> 00:10.770
In teoria, faremo un passo indietro e vedremo alcuni dei fondamenti del software e del game design.

00:10.770 --> 00:17.070
Parlando di ED, analizzeremo Unity, lo strumento di ED stesso, che è ciò che noi sviluppatori

00:17.070 --> 00:19.170
aprono e utilizzano come software.

00:19.170 --> 00:24.450
Nelle sezioni dedicate al codice, esamineremo il linguaggio di programmazione C-sharp e come si applica ai giochi unity.

00:24.450 --> 00:25.230
sviluppo di un gioco.

00:25.290 --> 00:26.910
Iniziamo con la teoria.

00:26.910 --> 00:34.200
Il ciclo di vita dello sviluppo del software comprende molte fasi, che ci portano da un'idea a un prodotto finito.

00:34.200 --> 00:40.470
Questo comprende i requisiti, l'analisi, la pianificazione del progetto, la progettazione del concept e così via.

00:40.470 --> 00:43.710
allo sviluppo, ai test e alla distribuzione.

00:43.710 --> 00:51.180
Sebbene unity sia uno strumento potente in molte di queste fasi, ci concentriamo sull'uso di unity nello sviluppo,

00:51.180 --> 00:53.370
test e nelle fasi di distribuzione.

00:53.370 --> 00:55.350
Il mondo di unity.

00:55.350 --> 01:02.970
I concetti sono strutturati come segue All'interno di un progetto ci sono una o più scene, all'interno di ogni scena.

01:02.970 --> 01:06.570
Ci sono oggetti di gioco con componenti collegati.

01:06.570 --> 01:14.100
Questi componenti possono gestire elementi come il rendering delle mesh, il collider, l'audio, il corpo rigido per la fisica,

01:14.100 --> 01:17.520
sistemi di particelle e, naturalmente, script personalizzati.

01:17.520 --> 01:21.960
Gli oggetti di gioco sono un pezzo fondamentale del puzzle di unity.

01:21.960 --> 01:28.950
Si tratta di tutto ciò che è visivo e non visivo su cui appoggiamo i nostri componenti personalizzati e le funzionalità di Unity.

01:28.950 --> 01:30.520
di Unity.

01:30.540 --> 01:33.750
Guardate questo screenshot di gameplay come esempio.

01:34.440 --> 01:39.870
Qui abbiamo una scena di gioco suddivisa in diversi prefabbricati.

01:39.870 --> 01:46.070
Si può pensare a un prefabbricato come a un oggetto di gioco con uno o più componenti che viene memorizzato per essere riutilizzato.

01:46.080 --> 01:51.540
Per esempio, qui vediamo più monete, ognuna con una posizione e una rotazione uniche.

01:51.540 --> 01:59.070
Tuttavia, la moneta ha alcune caratteristiche comuni, forse la funzionalità, il rilevamento delle collisioni, come

01:59.070 --> 02:06.180
e queste caratteristiche comuni sono conservate nel prefabbricato quando si organizza il progetto e si decide

02:06.180 --> 02:07.290
sulla struttura.

02:08.080 --> 02:14.100
I team spesso scelgono tra scene e prefabbricati per l'organizzazione di alto livello.

02:14.110 --> 02:17.830
L'oggetto di gioco è il concetto fondamentale di ogni scena.

02:17.830 --> 02:23.470
Sebbene ci possano essere molti componenti diversi in un oggetto di gioco, il componente transform è sempre

02:23.470 --> 02:30.250
presente il componente di trasformazione memorizza e manipola gli aspetti di come quell'oggetto si colloca nel mondo.

02:30.250 --> 02:34.750
Che l'oggetto abbia o meno una grafica, ha un oggetto transform.

02:34.750 --> 02:38.710
Il codice che utilizziamo è il linguaggio di istruzioni del software.

02:38.710 --> 02:43.480
Le radici storiche di Unity sono legate al progetto mono.

02:43.480 --> 02:47.140
Si trattava di una versione open source del framework DOT net.

02:47.350 --> 02:53.860
Il termine mono è ancora utilizzato nelle API di Unity, compreso il comportamento mono.

02:53.860 --> 02:57.490
Mentre in passato Unity offriva diversi linguaggi di programmazione.

02:57.490 --> 03:03.760
C-sharp è l'unica scelta di programmazione ora, e anche se Unity supporta C-sharp, non dipende da

03:03.760 --> 03:04.920
dal framework DOT net.

03:04.930 --> 03:12.370
La versione di Unity di C-sharp è piuttosto robusta e presenta molti dati, concetti e strutture diverse.

03:12.370 --> 03:18.550
Il namespace principale che utilizziamo all'interno di Unity è il motore di Unity per il codice di runtime.

03:18.550 --> 03:26.560
L'editor di Unity per l'Edit Time Code e lo spazio dei nomi System, che include molte funzionalità diverse.

03:26.560 --> 03:32.290
non specificamente legate a Unity, ma abbastanza utili, tra cui matematica, librerie, ecc.

03:32.290 --> 03:36.610
Ecco un esempio di script personalizzato in C-sharp da usare in unity.

03:36.610 --> 03:39.280
Partendo dall'alto, vediamo le dichiarazioni di utilizzo.

03:39.280 --> 03:43.990
Queste inseriscono gli spazi dei nomi che dobbiamo usare in questo particolare file di classe.

03:44.590 --> 03:50.950
Poi vediamo uno spazio dei nomi che ci aiuta a dichiarare e organizzare la posizione di questo codice nel nostro progetto.

03:50.950 --> 03:55.810
Quindi, dichiariamo la classe pubblica o l'interfaccia che definisce questo tipo.

03:55.810 --> 03:59.200
Notate che stiamo estendendo o ereditando il comportamento del monarca.

03:59.200 --> 04:04.630
Ora, da questo ambito, possiamo accedere a tutte le funzionalità del comportamento monarch.

04:04.630 --> 04:07.360
Alcune caratteristiche specifiche dell'unità da notare.

04:07.360 --> 04:11.470
La possibilità di serializzare i campi usando l'attributo "campo serializzato".

04:11.470 --> 04:18.310
Questo può prendere un valore pubblico o privato e renderlo all'ispettore unity, in modo che mentre

04:18.310 --> 04:21.570
mentre il gioco è in corso, possiamo modificare l'impostazione.

04:21.580 --> 04:24.730
Questo ci aiuta nella prototipazione e nella progettazione del gameplay.

04:24.730 --> 04:30.040
Il comportamento del monitor è dotato di molti eventi chiave a cui si può attingere dando un nome a uno dei metodi.

04:30.040 --> 04:30.670
Sveglia.

04:30.670 --> 04:36.460
Si cattura l'evento di quando l'oggetto viene risvegliato per la prima volta nel mondo.

04:36.460 --> 04:39.160
Questo avviene solo una volta in seguito.

04:39.160 --> 04:40.930
Qui viene richiamato il metodo start.

04:40.930 --> 04:46.210
È bene impostare eventuali dipendenze con altri oggetti e poi viene richiamato il metodo update ogni

04:46.210 --> 04:47.500
fotogramma successivo.

04:47.500 --> 04:52.210
Questo è un luogo ideale per l'input, la logica e l'aggiornamento della grafica.

04:52.930 --> 04:58.690
Questi sono solo alcuni degli eventi o delle sovrascritture di metodi che si possono sfruttare, ma sicuramente questi

04:58.690 --> 05:00.970
sono alcuni dei ringraziamenti più importanti.
