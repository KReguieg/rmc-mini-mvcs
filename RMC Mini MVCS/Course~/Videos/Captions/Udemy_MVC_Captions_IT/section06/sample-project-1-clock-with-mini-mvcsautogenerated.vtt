WEBVTT

00:00.180 --> 00:03.600
The clock example with many MVCs.

00:04.290 --> 00:06.390
Here we are inside an empty project.

00:06.390 --> 00:10.800
I added the Mini and VC framework and imported the examples.

00:11.010 --> 00:15.690
Let's take a look at the clock version with many MVCs.

00:15.930 --> 00:17.760
I will start with the sample execution.

00:21.160 --> 00:21.460
Here.

00:21.460 --> 00:27.820
There is no real user interface, but there are some debug log statements in the debug log console and

00:27.820 --> 00:32.020
show the elapsed time since the scene is open.

00:32.440 --> 00:33.130
This is.

00:33.130 --> 00:36.090
There is no user interface, no input functionality.

00:36.100 --> 00:38.650
This is the first time we see the file structure.

00:38.650 --> 00:42.760
I have the example script that is on a game object in the scene.

00:42.760 --> 00:48.130
I have the clock mini-class that is created and contains all the concerns.

00:48.130 --> 00:54.940
Then I have the classes related to each concern, model, view, controller and service.

00:54.940 --> 00:58.900
An additional concept that we haven't discussed yet is context.

00:58.900 --> 01:02.690
As we take a look at this code, let's look at the role of context.

01:02.710 --> 01:04.750
Here is the mini example itself.

01:08.980 --> 01:10.210
This is about behavior.

01:10.210 --> 01:15.090
At startup, we instantiate the mini-class object and call initialize.

01:15.100 --> 01:16.830
Here is the clock mini-class.

01:16.840 --> 01:20.200
This extends the mini framework class and VCs.

01:20.410 --> 01:24.990
You can think of this object as a parent object that contains all four concerns.

01:25.000 --> 01:31.990
This is a generic class in which we pass the strong type of the context model, view, controller.

01:31.990 --> 01:32.830
and service.

01:32.830 --> 01:37.240
Here is the initialization with the mini MVC structure.

01:37.240 --> 01:41.980
All the main parts involved have an explicit initialization call.

01:41.980 --> 01:47.530
This is a great place to enter the code that needs to happen exactly once when the system wakes up.

01:47.530 --> 01:49.110
What do we do here?

01:49.120 --> 01:55.900
First, we make sure it is already initialized and then we create the context model, view and controller.

01:55.900 --> 01:56.770
And the service.

01:56.800 --> 02:01.810
Note that the constructors of each accept no parameters except the controller.

02:01.960 --> 02:09.940
This is one of the first code examples where we see that the controller is the most powerful and capable.

02:09.940 --> 02:15.820
Of the concerns, because the controller is the glue that holds the view and the model together

02:15.820 --> 02:20.350
let's pass these references so that it knows how to handle and treat them.

02:20.350 --> 02:25.150
Finally, we follow the best practice: each concern is initialized.

02:25.180 --> 02:29.790
Notice that everything takes context and we haven't talked about context yet.

02:29.800 --> 02:30.970
Let's take a look.

02:31.000 --> 02:33.340
Context is a class in the framework.

02:33.340 --> 02:39.100
It implements the AI context interface and the rest of the system looks for that interface.

02:39.100 --> 02:45.190
Then you are free to create your own alternative to the context by simply implementing that interface.

02:45.190 --> 02:49.900
But for my uses, I find that this basic implementation usually serves my needs.

02:49.900 --> 02:52.000
It has only two things in it.

02:52.000 --> 02:58.150
It has a model locator and a command manager, both of which are publicly available from the outside, and

02:58.150 --> 02:59.950
are created at instantiation time.

02:59.950 --> 03:01.600
What is the role of the contact?

03:01.600 --> 03:08.590
You can think of the context as the messaging system that all four concerns refer to.

03:08.620 --> 03:10.720
What are the things that each concern can do with it?

03:10.720 --> 03:16.150
Using the command manager, they can listen and invoke any command.

03:16.150 --> 03:18.880
This is the messaging part and the model locator.

03:18.880 --> 03:25.390
While a more advanced concept allows any model to be registered and retrieved.

03:25.390 --> 03:31.690
So any of the problems could register a pattern or listen for pattern events.

03:31.690 --> 03:37.480
Below, in the constructor, we see that these two parts are instantiated and, as an experiment

03:37.480 --> 03:40.300
experimental, I have a context locator.

03:40.690 --> 03:48.430
This allows any scope to add a context like the one we see here, and any other scope can get that context

03:48.430 --> 03:49.000
if necessary.

03:49.000 --> 03:51.160
In more complex examples, we will see.

03:51.160 --> 03:57.130
This might be useful if your project has two different mini MV axes and you want to communicate between

03:57.130 --> 04:01.570
For this first example, we will not deal with this complexity, so you can ignore this detail.

04:01.570 --> 04:05.920
This concludes the high-level discussion of the entire example.

04:05.920 --> 04:12.490
We see that we have the parent mini-object that has the four concerns within it, and each of them has

04:12.490 --> 04:14.890
A reference to the high-level context.

04:14.890 --> 04:17.800
It is important to understand these basic concepts.

04:17.800 --> 04:22.330
Review this part of the course for better understanding.

04:22.330 --> 04:25.720
Now let's look at each of the problems and see how they work.

04:25.720 --> 04:28.600
We've already seen the context, so let's look at the model.

04:28.600 --> 04:31.030
This is the first concern we saw in the code.

04:31.030 --> 04:36.910
Let us then take a closer look at how it is constructed and see that all the other concerns in this sample

04:36.910 --> 04:41.080
and most of the other problems in the other sample follow a similar pattern.

04:41.080 --> 04:44.630
So in future discussions, we will not cover this in such detail.

04:44.650 --> 04:47.790
Note that the clock model extends the basic model.

04:47.800 --> 04:51.760
Now, the extension of any base class is optional.

04:51.760 --> 04:56.620
It comes with some free functionality, but you are free to approach it in an alternative way if you wish

04:56.620 --> 04:57.700
you desire more flexibility.

04:57.700 --> 05:03.160
So we have suggested a convention, but there is the possibility of finding your own solutions.

05:03.160 --> 05:04.660
Let's take a look at the basic model.

05:04.660 --> 05:08.920
The base model implements the I model, the I model implements the I model.

05:08.920 --> 05:14.770
It is possible that future versions of the framework will do something custom for the model, but

05:14.770 --> 05:18.670
for now merely mimics what any other concern is capable of doing.

05:18.670 --> 05:25.570
The I concern is able to initialize and accept a context, so any class that implements this interface

05:25.570 --> 05:32.080
is able to initialize itself by accepting a context in the initialized method, and thus is able to store and

05:32.080 --> 05:35.620
maintain a public property to that context.

05:35.620 --> 05:42.070
This is what all four concerns are able to do Now, while the suggested usage patterns of how to

05:42.070 --> 05:47.560
of usage pattern is different from that of a controller, know that under the hood they are equally

05:47.560 --> 05:48.130
capable.

05:48.130 --> 05:50.350
Again, there is maximum flexibility.

05:50.350 --> 05:55.720
Taking a step back, we see that the clock model extends the basic model, which we have just explored.

05:55.720 --> 05:57.640
The rest of the operation of the clock model.

05:57.640 --> 06:01.600
You can think of the model as the repository of all runtime data.

06:01.600 --> 06:03.640
What does the clock example need?

06:03.640 --> 06:05.440
It needs the current time.

06:05.440 --> 06:08.200
And then, in our example, it keeps the delay.

06:08.300 --> 06:10.280
Between each tick of the clock.

06:10.280 --> 06:17.160
For us it will be one second, so we will see that one second is displayed, then 2 seconds, then 3

06:17.160 --> 06:18.110
seconds and so on.

06:18.110 --> 06:24.410
The model, like any concern, has initialization and the only custom functionality we do here is initialize

06:24.410 --> 06:26.960
The value of our observable variables.

06:26.960 --> 06:28.280
That's it for the clock model.

06:28.280 --> 06:30.050
Let us now look at the clock view.

06:30.050 --> 06:38.720
The clock view implements the eye view, and just as we saw earlier, the eye view is able to have an initialization

06:38.720 --> 06:41.060
And take a context, that's all.

06:41.060 --> 06:42.530
So we won't explore that further.

06:42.530 --> 06:46.310
We don't need any base functionality, so we don't use any base class.

06:46.310 --> 06:48.110
We implement the view on our own.

06:48.110 --> 06:52.730
We have some properties, some fields, and we handle the initialization.

06:52.730 --> 06:56.450
This is basic material for any problems.

06:56.450 --> 06:59.720
The only custom thing we do here is to use context.

06:59.720 --> 07:05.150
This is our first use of seeing that we access the command handler inside and listen to a custom context

07:05.150 --> 07:07.910
called the "time changed" command.

07:07.910 --> 07:12.800
Whenever the command handler invokes this command, we will be able to listen to it here.

07:12.800 --> 07:15.590
This is the first opportunity to see Command Manager in action.

07:15.590 --> 07:20.300
Recall the basic difference between commands and events with commands.

07:20.300 --> 07:24.260
We do not need to know who will send this type of message.

07:24.260 --> 07:28.460
We subscribe only to the command handler intermediary and handle it that way.

07:28.520 --> 07:30.230
It is a decoupled solution.

07:30.230 --> 07:31.640
Every concern implements.

07:31.640 --> 07:33.800
The request is initialized.

07:33.800 --> 07:40.700
This is more of a best practice that I use, rather than something specific to MVC frameworks, but I limit myself to

07:40.700 --> 07:46.070
a method that easily checks to see if we are initialized and if not, throws an exception.

07:46.070 --> 07:50.690
We will see this used at the beginning of almost every method of every concern.

07:50.690 --> 07:55.250
This is a simple method to check that public methods are not called too early.

07:55.250 --> 08:00.860
Now, whenever the command handler sends the related event, we are handling it here, we can

08:00.860 --> 08:04.760
we can see that the first thing we do is make sure that we are actually initialized.

08:04.760 --> 08:08.600
We expect every time the scene is executed to be initialized, good.

08:08.600 --> 08:13.460
This is just an additional check that ensures that the lifecycles are running correctly.

08:13.460 --> 08:17.000
The only real custom functionality is debugging.

08:17.000 --> 08:17.600
Disconnect.

08:17.600 --> 08:22.430
Remember that we don't have an on-screen UI and we're not using any Mount behavior.

08:22.430 --> 08:26.960
So our way to talk through the View is to use a debug log statement.

08:26.960 --> 08:31.760
This does not mean that you need to perform these steps every time you debug log in your projects.

08:31.760 --> 08:35.600
You do this as freely as in any typical project.

08:35.600 --> 08:43.070
This is just a contrived example, created to show some sort of user feedback without any mono behavior.

08:43.070 --> 08:46.070
or user interface, so the example is quite simple.

08:46.070 --> 08:47.900
Let's next take a look at the clock service.

08:47.900 --> 08:50.330
The clock service extends the basic service.

08:50.330 --> 08:57.380
As with all problems that extend an optional base class, all it does is initialize

08:57.380 --> 09:01.280
and the context setting that we have seen in other problems.

09:01.280 --> 09:06.890
This service is designed to load something and then notify the system when it has been loaded.

09:06.890 --> 09:08.960
We then have a custom unity event.

09:08.960 --> 09:12.650
The actual data that is loaded by this service is the time delay.

09:12.650 --> 09:14.120
This is made available here.

09:14.120 --> 09:17.930
Within initialize, we do the basic configuration of concerns.

09:17.930 --> 09:23.120
The only really custom thing we do here is initialize the time delay somewhere outside of this

09:23.120 --> 09:24.830
Will be called the scope load.

09:24.830 --> 09:31.310
What we see here is very similar to the functionality of the non-mini MVC version that we saw

09:31.310 --> 09:32.060
before.

09:32.240 --> 09:36.470
It simply loads a local text file, extracts the string value and types it in.

09:36.470 --> 09:38.300
It is an int and stores it for us.

09:38.300 --> 09:43.100
One thing to note is that once the data is loaded, the loaded event is triggered.

09:43.100 --> 09:46.370
We have not yet seen what scope this event will consume.

09:46.370 --> 09:46.670
Next.

09:46.670 --> 09:47.900
Let's take a look at the controller.

09:47.900 --> 09:53.510
This will be the most complex aspect of this example and most controller examples where

09:53.510 --> 09:58.100
we will see most of the code, the clock controller extends the basic controller in this case.

09:58.100 --> 10:01.640
In all cases where a base class is used, this is optional.

10:01.640 --> 10:05.360
Of course, you can create your own class that implements the controller.

10:05.360 --> 10:11.180
But here we have a basic functionality that will take care of initialization and data acquisition.

10:11.180 --> 10:11.870
In context.

10:11.870 --> 10:17.090
Since the clock controller deals with some specific topics, I decided that the basic controller is a

10:17.090 --> 10:22.670
generic and you pass the strong type values for the view and model service.

10:22.670 --> 10:26.870
In the constructor, we pass the model view and service to the base class.

10:26.870 --> 10:32.450
In the initializer, we do the typical thing that all concerns do, that is, we handle the initialization and the

10:32.450 --> 10:34.250
And take the context and store it.

10:34.430 --> 10:40.220
The only really custom thing we are doing here is listening to the model, subscribing to one of the observables

10:40.220 --> 10:44.150
and listening to the service, so we know when the service is loaded.

10:44.150 --> 10:49.040
Now, as we talked about the concept of observables and saw the source code of the model, this is

10:49.040 --> 10:55.220
the first place where we saw Unity event subscribing from one of the observable classes.

10:55.220 --> 11:03.140
So whenever the value of the time model is set by any scope, this event on changing the value is triggered.

11:03.410 --> 11:08.180
Once again, the use of observables is optional but recommended for everyone.

11:08.510 --> 11:15.710
With properties within the model, you get this automatic paradigm of being able to set the value and be

11:15.710 --> 11:18.560
able to listen when that value has been set and changed.

11:18.560 --> 11:25.310
So when the service is loaded, we update the model based on what the service got from its external server.

11:25.310 --> 11:25.700
data.

11:25.700 --> 11:27.530
And then we start the clock ticking.

11:27.530 --> 11:32.960
The clock ticking works in a very similar way to how we have seen it do in the non-mini version of NBC.

11:32.990 --> 11:34.700
However, there is a key distinction.

11:34.700 --> 11:40.730
Earlier I talked about how unity collapses the model view controller in different areas of the unity engine,

11:40.730 --> 11:45.590
one of which is the behavior of mono itself, which is quite powerful and spans many aspects.

11:45.590 --> 11:52.070
Now, in the non-mini MVC example, I used a CO routine to call repeatable code, because this

11:52.070 --> 11:54.200
example does not use mono behaviors.

11:54.200 --> 11:58.040
I no longer have the same access to the CO routine.

11:58.040 --> 12:00.140
There are many ways I could fake it.

12:00.140 --> 12:05.600
I chose to have a separate class, in which you can go into more detail if you like, and

12:05.600 --> 12:08.060
all it does is call repeatable code.

12:08.060 --> 12:10.430
For this example I call it Clock Helper.

12:10.430 --> 12:15.110
The operation is outside the scope of this example, but know that this is a workaround for calling the code

12:15.110 --> 12:15.950
repeatable code.

12:15.950 --> 12:17.900
And that was one of the workarounds I chose.

12:17.900 --> 12:23.210
One key thing to note is that here in the controller, whenever the delay occurs, which is

12:23.210 --> 12:26.030
every second, I am setting the pattern data.

12:26.030 --> 12:29.210
So the controller sets a value on the model.

12:29.210 --> 12:34.760
And since we listened to the unity event for each time the value of the model changes, we get this

12:34.760 --> 12:35.270
callback.

12:35.270 --> 12:41.180
So here we are in the controller, subscribing to the model changes and handling them, turning them into

12:41.180 --> 12:42.050
commands.

12:42.050 --> 12:45.860
This is a very common pattern that we will see throughout MVC.

12:45.860 --> 12:52.910
We take a somewhat decoupled event and translate it into a highly decoupled command.

12:53.030 --> 12:59.570
Recall that commands can be observed and heard from any concern, as long as they have a single function.

12:59.570 --> 13:02.570
access to context, which all our concerns do.

13:02.570 --> 13:10.190
So whenever you see a command invoked, you can think of it as a message like a radio station that any concern

13:10.190 --> 13:11.030
can listen to.

13:11.030 --> 13:13.340
It is a very powerful concept.

13:13.340 --> 13:18.620
It provides the flexibility to communicate to and from any interest.

13:18.620 --> 13:25.040
Now, although this is very flexible, we want to follow the basic conventions, where the controller is the main part

13:25.040 --> 13:30.110
that will send and receive these commands, there will be exceptions and we will see them

13:30.110 --> 13:35.900
in the examples, deciding exactly how to use unity events and how to use commands in your project is

13:35.900 --> 13:38.510
part of the art of using MVC.

13:38.510 --> 13:41.180
In the previous slides I suggested conventions.

13:41.180 --> 13:42.770
You are free to follow them.

13:42.770 --> 13:46.490
I just recommend being consistent if exceptions apply.

13:46.490 --> 13:47.210
So that's it.

13:47.210 --> 13:52.730
We have addressed the creation of the context, model, view, controller and service.

13:53.000 --> 13:55.910
Then we initialize them all.

13:56.180 --> 14:02.240
So from the timeline point of view, we have a monarch behavior in the scene and on its initialization

14:02.240 --> 14:05.630
created the minis within the minis initialize.

14:05.630 --> 14:11.660
It created what we're seeing here, connecting all these different pieces and then initializing like this

14:11.660 --> 14:17.450
particular example, because I'm familiar with how it works, I know that when the controller is initialized,

14:17.450 --> 14:22.190
that's what starts the ticking and starts the example.

14:22.190 --> 14:23.960
That's it for the code overview.

14:23.960 --> 14:27.740
This is probably the densest code example.

14:27.740 --> 14:32.000
Although it is a simple example, there are many concepts here.

14:32.000 --> 14:36.770
We are taking all the theory that we have seen in the previous slides and putting it together.

14:36.770 --> 14:39.950
Let's take another look at the sample running here in the scene.

14:39.950 --> 14:46.700
I selected a game object, as we can see in the inspector, which contains the sample.

14:46.700 --> 14:47.660
run the example.

14:51.590 --> 14:59.960
Execution occurs at each time delay, which is 1000 milliseconds, which means you get one tick per second.

15:00.710 --> 15:03.770
Our debug log statement is displayed in the console.

15:04.540 --> 15:06.430
This is the complete example.

15:06.610 --> 15:11.020
We have seen all the concepts of model view controller service.

15:11.680 --> 15:17.230
How they are initialized, how the context is the glue that helps the messages to each other.

15:17.230 --> 15:23.770
And you have a very good basis for seeing the theory we learned applied in real C-sharp code.

15:24.100 --> 15:26.740
This is our first complete example.

15:26.740 --> 15:29.710
See the code running with mini MVCs.

15:29.710 --> 15:36.520
Although the use case is very simple, all we are doing is running a debug log statement every second.

15:36.520 --> 15:39.730
We see that we have many concepts to do this.

15:39.730 --> 15:46.240
This is the first example you see when you use a tailored architecture, like many MVCs,

15:46.270 --> 15:47.860
looks verbose.

15:47.860 --> 15:54.160
It feels like we can't do it in one class, like we did with the non-mini MVC.

15:54.160 --> 15:54.670
version?

15:54.670 --> 15:58.060
But remember, we want to invest in our software.

15:58.060 --> 16:04.360
We want to use these best practices, and it won't be in a ten-minute example that we really understand

16:04.360 --> 16:11.140
full power ten days into a project, ten months into a project, having the correct code separation

16:11.140 --> 16:15.780
that you get with a tailored framework is incredibly powerful and pays off.

16:15.790 --> 16:16.930
That's it for now.

16:16.930 --> 16:17.650
Thank you.
