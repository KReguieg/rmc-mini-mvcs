WEBVTT

00:00.090 --> 00:01.410
Impostiamo la nostra vista.

00:01.920 --> 00:05.040
Creo un nuovo oggetto di gioco e lo inserisco nella gerarchia della scena.

00:05.400 --> 00:09.360
Lo faccio perché sappiamo che la vista utilizzerà un'interfaccia utente di unity.

00:09.540 --> 00:13.850
L'interfaccia Unity si comporta bene avendo in uso i comportamenti mono.

00:13.860 --> 00:16.080
Inizierò creando un canvas unity.

00:16.080 --> 00:20.730
Posso fare clic con il tasto destro del mouse nella gerarchia della scena e scegliere di creare il canvas stesso e poi all'interno del canvas

00:20.730 --> 00:24.330
canvas avremo bisogno di alcuni campi di input e di un pulsante.

00:24.780 --> 00:26.310
Quindi tutte queste cose ora.

00:27.320 --> 00:28.340
All'interno del canvas.

00:28.340 --> 00:33.680
Ho creato un pannello che ci dà il quadrato grigio fluttuante che occupa la maggior parte della visuale di gioco.

00:33.710 --> 00:41.270
Poi ho aggiunto tre campi di input e due pulsanti, in modo da avere l'input per A, per B e per il risultato,

00:41.570 --> 00:45.470
e poi i pulsanti per aggiungere, cancellare e resettare l'applicazione.

00:45.500 --> 00:47.930
Attualmente, tutti questi elementi dell'interfaccia utente hanno la stessa posizione.

00:47.930 --> 00:49.190
Sono centrati sullo schermo.

00:49.640 --> 00:51.020
Ora lo aggiusterò.

00:51.880 --> 00:52.060
Qui.

00:52.060 --> 00:56.410
Ho posizionato ogni elemento dell'interfaccia utente e gli ho dato un nome nella gerarchia della scena.

00:56.410 --> 01:00.760
Quindi abbiamo un campo di input per A, B e il risultato?

01:01.460 --> 01:04.730
Oltre a un pulsante per l'aggiunta e l'azzeramento.

01:04.730 --> 01:06.990
Ora la base di questa struttura è il canvas.

01:07.010 --> 01:13.210
Mi piace rinominare canvas in modo che corrisponda al nome della mia vista e aggiungere la classe personalizzata.

01:13.220 --> 01:18.560
Qui, aggiungo la classe della vista calcolatrice e passo a impostare il codice perché la calcolatrice

01:18.560 --> 01:20.280
utilizza l'interfaccia utente Unity.

01:20.300 --> 01:23.180
Abbiamo esteso il comportamento mono di questa parte.

01:23.180 --> 01:27.170
Implementeremo la vista oculare e i membri mancanti.

01:27.170 --> 01:28.510
Utilizzeremo tutti i valori predefiniti.

01:28.520 --> 01:30.020
Impostiamo la nostra inizializzazione.

01:30.030 --> 01:31.950
Questo è un buon inizio per l'inizializzazione.

01:31.970 --> 01:38.330
Ora serializzeremo tutti i campi dell'interfaccia utente di cui abbiamo bisogno e osserveremo gli eventi necessari per ciascuno di essi.

01:38.330 --> 01:43.610
Quindi qui, nei campi, abbiamo creato campi serializzati per ciascuno degli elementi dell'interfaccia utente di cui abbiamo bisogno e nel file

01:43.610 --> 01:46.040
inizializzazione stiamo ascoltando alcuni eventi chiave.

01:46.040 --> 01:52.880
Ogni volta che l'utente modifica i campi di input per A o B, faremo qualcosa qui e un po' più tardi

01:52.880 --> 01:57.310
implementeremo la conseguenza di un clic su Aggiungi o di un clic su Reset.

01:57.320 --> 02:00.160
Torniamo alla gerarchia della scena e colleghiamo la vista.

02:00.170 --> 02:05.270
Quindi, nella vista calcolatrice, colleghiamo i campi serializzati agli elementi dell'interfaccia utente.

02:05.270 --> 02:07.730
Inizieremo con il campo di input A.

02:09.110 --> 02:12.830
Per essere il campo di input il risultato.

02:14.280 --> 02:15.570
Si aggiunge il pulsante.

02:16.840 --> 02:17.980
E il pulsante di reset.

02:17.980 --> 02:20.720
La gerarchia della scena è quasi completa.

02:20.740 --> 02:26.020
Un'ultima cosa da fare, però, è passare la vista della calcolatrice nel mini stesso.

02:26.020 --> 02:30.280
Nel file di esempio serializzeremo un campo e lo passeremo nella mini calcolatrice.

02:30.280 --> 02:33.610
Abbiamo creato il campo e lo abbiamo passato nel costruttore.

02:33.610 --> 02:34.720
Aggiorniamo la classe.

02:34.720 --> 02:37.270
Quindi si aspetta che venga inserito nel costruttore.

02:37.270 --> 02:42.160
Non avevamo un costruttore prima, quindi creiamone uno, accettiamo la vista della calcolatrice e memorizziamola.

02:42.160 --> 02:44.470
la vista calcolatrice nella gerarchia delle code.

02:44.470 --> 02:49.390
Trasciniamo un riferimento dalla vista Calcolatrice al nuovo campo serializzato.

02:49.390 --> 02:52.810
Ora quasi tutto ciò che serve per la scena è pronto.

02:52.810 --> 02:55.030
Salviamo la scena e torniamo al codice.

02:55.030 --> 02:58.090
A questo punto, abbiamo un progetto abbastanza ben impostato.

02:58.090 --> 03:05.920
Abbiamo almeno una forma di implementazione per la mini-classe, il modello, la vista e il controllore.

03:05.920 --> 03:11.140
Non abbiamo ancora finito, ma abbiamo una scena abbastanza buona e abbiamo compilato il codice da qui in poi.

03:11.140 --> 03:12.460
la mini-classe della calcolatrice.

03:12.460 --> 03:19.030
Pensiamo a ciò che viene dopo qui nell'inizializzazione, vediamo che abbiamo impostato il contesto e il modello.

03:19.150 --> 03:23.500
Non stiamo facendo qualcosa con la vista, ma sappiamo di averla collegata bene.

03:23.500 --> 03:28.840
Abbiamo il controllore, che ha bisogno di essere implementato, e stiamo facendo un po' di inizializzazione.

03:28.840 --> 03:31.720
Torniamo al nostro caso d'uso per aiutarci a fare un brainstorming.

03:31.720 --> 03:39.190
Ricordiamo che volevamo accettare due valori int, fare un'addizione e visualizzare il risultato.

03:39.190 --> 03:40.570
Ecco i nostri progressi finora.

03:40.570 --> 03:45.340
Abbiamo impostato la nostra vista con i requisiti, ma non abbiamo il modello o il controllore.

03:45.340 --> 03:47.980
Possiamo scegliere liberamente a quale di questi vogliamo dedicarci.

03:47.980 --> 03:52.780
Dal momento che ritengo che l'implementazione del modello sarà più semplice, concludiamo il

03:52.780 --> 03:55.840
e terminiamo la nostra codifica lavorando sul controllore.

03:55.840 --> 03:59.680
Nel modello sappiamo che vogliamo memorizzare alcuni ints Ora, anche se opzionali.

03:59.680 --> 04:04.600
Finora, nei nostri esempi, abbiamo usato la classe observable, che ci fornisce non solo la funzionalità

04:04.600 --> 04:09.940
di un INT per la memorizzazione, ma anche un modo simpatico per ascoltare qualsiasi modifica al valore memorizzato.

04:09.940 --> 04:11.140
Utilizziamolo ora.

04:11.140 --> 04:15.130
Creiamo una proprietà A per a, B e il risultato e un campo.

04:15.130 --> 04:20.950
Ora il mio approccio è che tutti i progetti X abbiano una proprietà pubblica con un valore privato sotto di essa.

04:20.950 --> 04:21.850
che è opzionale.

04:21.850 --> 04:24.040
Si può invece avere solo un campo pubblico.

04:24.040 --> 04:29.110
Come per gli altri esempi visti, useremo l'initialize del modello per impostare alcuni valori predefiniti

04:29.110 --> 04:31.360
a seconda di quali siano i valori predefiniti.

04:31.390 --> 04:34.150
Potrebbe non essere necessario, ma credo sia un'ottima pratica.

04:34.150 --> 04:39.910
Poiché il modello di calcolatore estende il modello di base, i modelli di base gestiscono già l'inizializzazione.

04:39.910 --> 04:45.160
Quindi, proprio come nella programmazione orientata agli oggetti, possiamo sovrascrivere un metodo genitore.

04:45.160 --> 04:49.390
Richiamiamo il metodo base per ottenere la funzionalità di base e impostare in questo modo i nostri valori predefiniti.

04:49.390 --> 04:51.580
Completato questo, diamo un'occhiata al controllore.

04:51.580 --> 04:54.520
L'implementazione del controllore è il nostro ultimo pezzo del puzzle.

04:54.520 --> 04:56.950
Abbiamo impostato una vista e un modello.

04:56.950 --> 04:59.920
Ora il controllore deve essere il collante che riunisce tutto.

04:59.920 --> 05:04.360
Per prima cosa, ho creato un costruttore per accogliere tutte le preoccupazioni di cui vogliamo occuparci.

05:04.360 --> 05:09.190
In questo caso, il controllore si occuperà delle altre preoccupazioni, ovvero del modello di calcolatrice

05:09.190 --> 05:10.060
e la vista della calcolatrice.

05:10.060 --> 05:15.400
Li memorizzerò come campi, quindi aggiornerò l'inizializzazione per eseguire i passaggi più comuni, come il controllo se

05:15.400 --> 05:17.680
se si è inizializzati e memorizzare il contesto.

05:17.680 --> 05:20.530
Quali sono le cose che dobbiamo fare qui nel controllore?

05:20.740 --> 05:25.990
Primo, ora che abbiamo un riferimento al modello, vogliamo osservare qualsiasi modifica a tale modello

05:25.990 --> 05:30.970
e ora che abbiamo un riferimento alla vista della calcolatrice, vogliamo osservare qualsiasi cambiamento importante

05:30.970 --> 05:32.290
eventi che provengono dalla vista.

05:32.290 --> 05:33.490
Configuriamolo ora.

05:34.200 --> 05:40.770
Quindi qui, nell'inizializzazione, voglio ascoltare l'evento reset e l'evento ADD in arrivo

05:40.770 --> 05:41.640
dalla vista.

05:41.940 --> 05:43.440
Creiamo ora questi eventi.

05:44.410 --> 05:47.410
Qui, nella parte superiore di The View, creiamo questi due eventi.

05:47.440 --> 05:50.470
Nessuno dei due deve inviare informazioni.

05:50.740 --> 05:53.230
Quindi possiamo usare gli eventi unitari di base.

05:53.970 --> 06:00.120
Ho creato gli eventi on add e on reset nella stessa classe.

06:00.120 --> 06:06.360
Quando ascoltiamo l'interfaccia utente e catturiamo il clic su uno dei pulsanti, inviamo questo evento personalizzato.

06:07.990 --> 06:14.650
A titolo di esempio, poiché il controllore ha un riferimento alla vista e questi elementi della vista sono

06:14.650 --> 06:16.750
pubblici in questo caso particolare.

06:16.960 --> 06:22.810
Potremmo invece fare in modo che il controllore ascolti direttamente gli eventi dell'interfaccia utente, anziché creare questo

06:22.810 --> 06:24.330
con eventi personalizzati.

06:24.340 --> 06:29.620
Quello che mostriamo qui è un approccio più disaccoppiato e potete decidere nel vostro progetto quale sia il migliore

06:29.620 --> 06:30.220
meglio per voi.

06:30.220 --> 06:35.200
Quindi, nel controllore, ho collegato questi due eventi, impostando un gestore per ciascuno di essi.

06:35.380 --> 06:39.670
Pensiamo per un attimo a quale conseguenza vogliamo che abbia ciascuno di questi eventi.

06:39.940 --> 06:46.030
Ogni volta che si fa clic sul pulsante di reset, si dovrebbe cancellare ogni campo dal campo A, da

06:46.030 --> 06:48.490
campo B e dal campo dei risultati.

06:48.490 --> 06:50.260
E cosa vogliamo che accada quando aggiungiamo?

06:50.260 --> 06:56.080
Vogliamo che il campo dei risultati sia la somma del campo A e del campo B.

06:56.080 --> 06:58.720
In molti MVC c'è flessibilità.

06:58.720 --> 07:01.120
Parliamo quindi di alcuni modi diversi per farlo.

07:01.120 --> 07:07.210
Probabilmente il modo più diretto è che il controllore modifichi i campi direttamente nella vista.

07:07.240 --> 07:08.560
Vediamo come si presenterebbe.

07:08.560 --> 07:14.800
Quindi, iniziando con l'approccio più diretto qui in Reset, entriamo nella vista e impostiamo i campi

07:14.800 --> 07:16.900
valori dell'interfaccia utente a stringa vuota.

07:16.900 --> 07:22.630
Poi, in ADD, recuperiamo questi valori, li sommiamo e aggiorniamo direttamente la vista.

07:22.630 --> 07:24.430
Eseguiamo la scena e vediamo come si comporta.

07:24.430 --> 07:26.290
Eccoci nella scena in esecuzione.

07:26.290 --> 07:28.960
Aggiungiamo alcuni valori di esempio e facciamo clic su reset.

07:28.960 --> 07:30.610
Sembra che il reset avvenga correttamente.

07:30.610 --> 07:33.550
Aggiungiamo di nuovo alcuni valori e facciamo clic sul pulsante Aggiungi.

07:37.620 --> 07:38.330
Sembra tutto a posto.

07:38.340 --> 07:41.220
Pensiamo a questo e riflettiamo sulla nostra struttura.

07:41.220 --> 07:47.520
A questo punto, abbiamo il controllore che accede direttamente alla vista entro i confini suggeriti da

07:47.520 --> 07:48.860
come ci comportiamo qui.

07:48.870 --> 07:49.880
Non c'è problema.

07:49.890 --> 07:55.140
Va bene che il controllore abbia un riferimento, che lo visualizzi e che lo aggiorni direttamente quando il controllore

07:55.140 --> 07:56.940
aggiorna direttamente la vista.

07:56.970 --> 07:58.620
Stiamo bypassando il modello.

07:58.620 --> 08:03.480
In sostanza, stiamo memorizzando i dati del modello direttamente nella vista.

08:03.480 --> 08:09.510
Da un punto di vista fondamentale, stiamo uscendo dalla separazione delle preoccupazioni MVC.

08:09.510 --> 08:14.880
Cerchiamo di iterare su questo punto e di portare nel codice un po' di principi più solidi.
