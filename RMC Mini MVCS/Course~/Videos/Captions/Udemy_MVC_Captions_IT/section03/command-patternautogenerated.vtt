WEBVTT

00:00.180 --> 00:02.800
Vediamo il modello di progettazione dei comandi.

00:02.820 --> 00:05.390
Command è un design pattern comportamentale.

00:05.400 --> 00:09.210
È in qualche modo simile all'osservatore, ma abbastanza diverso.

00:09.210 --> 00:11.340
Si qualifica come modello a sé stante.

00:11.430 --> 00:17.730
Alcuni dei vantaggi del suo utilizzo includono la possibilità di eseguire e annullare le funzionalità.

00:17.730 --> 00:23.360
Spesso molti team lo utilizzano per avere la funzionalità di annullamento nell'interfaccia utente.

00:23.370 --> 00:30.600
Ma anche senza questo paradigma, ha comunque un enorme successo nel fornire i vantaggi dell'osservatore

00:30.600 --> 00:37.530
con un po' più di disaccoppiamento e di astrazione rispetto al modello dell'osservatore, qui non abbiamo bisogno di un riferimento

00:37.530 --> 00:40.020
al mittente del messaggio.

00:40.020 --> 00:47.790
Invece, sia il mittente che l'osservatore sono a conoscenza di una sorta di sistema di messaggistica che si trova fra

00:47.790 --> 00:48.240
loro.

00:48.480 --> 00:51.510
Nel codice successivo, vedremo questo sistema chiamato command manager.

00:51.510 --> 00:57.780
Finché gli scopi possono raggiungere il command manager, questo funge da intermediario tra loro e la comunicazione.

00:57.780 --> 01:03.990
E come l'osservatore, questo consente lo scambio di dati e la comunicazione, che è isolata da, beh..,

01:03.990 --> 01:07.410
se uno cambia, l'altro deve necessariamente cambiare?

01:07.410 --> 01:11.720
È possibile aggiungere e rimuovere facilmente osservatori multipli.

01:11.730 --> 01:12.270
Vedremo.

01:12.270 --> 01:15.600
Un parallelo con l'esempio dell'osservatore visto in precedenza.

01:15.600 --> 01:22.640
Le tre parti fondamentali sono la creazione del sistema di comando, l'aggiunta di un ascoltatore e la sua invocazione.

01:22.650 --> 01:28.230
Ora, in genere si inviano comandi tra due o più classi, ma per brevità ho inserito

01:28.230 --> 01:29.760
in un unico file di classe.

01:29.760 --> 01:33.380
In questo modo possiamo vedere rapidamente un esempio funzionale completo.

01:33.390 --> 01:37.710
Ora menzionerò alcuni altri modelli, ma andrò un po' più veloce.

01:37.860 --> 01:44.730
I prossimi due che mostrerò sono cose che vedremo nello spirito delle architetture MVC.

01:44.730 --> 01:45.570
sono organizzate.

01:45.570 --> 01:48.960
Un modello che forse conoscete già è quello dei singleton.

01:48.960 --> 01:55.710
Ogni volta che si vuole avere un sistema creato esattamente una volta all'interno del codice e avere accesso globale a esso,

01:55.710 --> 01:57.990
è un ottimo posto per il pattern Singleton.

01:57.990 --> 02:05.010
I recenti aggiornamenti di Unity prevedono alcune soluzioni native per questo, ma tradizionalmente abbiamo utilizzato la comunità

02:05.010 --> 02:13.440
basate su classi di comportamento mono singleton basate sulla comunità, che ci aiutano ad accedere globalmente a un determinato comportamento mono o ad alcune classi di comportamento mono.

02:13.440 --> 02:14.420
altro tipo di dati.

02:14.430 --> 02:21.450
In secondo luogo, il pattern facade ci aiuta a ridurre la complessità percepita di una serie di sottosistemi.

02:21.540 --> 02:28.050
Supponiamo di avere un sistema di input, un sistema di rendering e un sistema di fisica, tutti creati per il vostro

02:28.050 --> 02:29.790
gioco invece che per il giocatore.

02:29.790 --> 02:35.940
Conoscendo i dettagli di questi sistemi, il giocatore potrebbe interagire con una facciata che a sua volta richiama questi sistemi.

02:35.940 --> 02:39.960
sistemi individuali o selezionare sottosezioni di ciò che possono fare.

02:39.960 --> 02:43.890
Spesso, nel linguaggio degli sviluppatori, chiamiamo questa funzionalità wrapping.

02:43.890 --> 02:49.560
Quindi si potrebbe dire che ho racchiuso tre sistemi in un'unica classe per facilitarne l'uso.

02:49.560 --> 02:53.010
Mediatore e proxy sono due modelli aggiuntivi.

02:53.010 --> 02:59.700
Sono effettivamente distinti, ma posso usare i termini in modo intercambiabile sia per la mediazione che per la delega.

02:59.700 --> 03:05.130
Cioè, avere una sorta di intermediario che si frappone tra la comunicazione, alcuni dei benefici

03:05.130 --> 03:09.330
sono che si possono facilmente apportare modifiche a una delle due classi.

03:09.330 --> 03:15.150
In questo esempio, basta modificare l'intermediario per non dover rifattorizzare in modo massiccio il sistema.

03:15.150 --> 03:17.070
Quindi è un modo per mitigare il cambiamento.

03:17.070 --> 03:19.980
Vedremo alcuni di questi concetti nelle architetture più avanti.

03:19.980 --> 03:26.280
Quindi, con una breve panoramica sui design pattern, vediamo che si tratta di soluzioni riutilizzabili che

03:26.280 --> 03:30.540
ci aiutano a risolvere le sfide progettuali che si presentano spesso nello sviluppo dei giochi.

03:30.540 --> 03:36.030
Sebbene Singleton sia uno degli elementi con cui si ha maggiore familiarità in Unity, come spesso viene discusso, l'osservatore

03:36.030 --> 03:42.840
è probabilmente il più utile per uno sviluppatore alle prime armi per elevare un po' il proprio gioco e

03:42.840 --> 03:47.820
alcuni di questi altri pattern che ho citato specificamente perché più avanti, quando esamineremo le architetture,

03:47.820 --> 03:51.600
potrò usare questi termini e voi avrete un po' più di familiarità.

03:51.900 --> 03:57.150
In sintesi, in questa sezione abbiamo esaminato alcuni concetti di progettazione software di alto livello.

03:57.150 --> 04:04.470
Abbiamo esaminato i principi di progettazione come filosofie per risolvere le sfide, l'UML come metodo di diagramma e comunicazione.

04:04.470 --> 04:05.790
sulle nostre idee.

04:05.790 --> 04:11.580
E abbiamo esaminato alcuni modelli di progettazione, in particolare observer e command, che torneranno a

04:11.580 --> 04:12.180
più tardi.

04:12.180 --> 04:15.640
Sono un ottimo modo per disaccoppiare la comunicazione all'interno del progetto.

04:15.660 --> 04:17.880
Parliamo poi dell'architettura.

04:17.880 --> 04:23.430
Esamineremo alcune delle soluzioni disponibili, i pro e i contro di ciascuna di esse e restringeremo il campo di applicazione.

04:23.430 --> 04:28.290
ad alcuni dei framework più diffusi che possiamo utilizzare specificamente per unity.

04:28.440 --> 04:29.370
Grazie.
