WEBVTT

00:00.330 --> 00:03.630
La arquitectura del mini MDC para Unity.

00:03.630 --> 00:08.820
Después de años de experiencia en Unity, he creado la arquitectura de mini MVCs.

00:08.820 --> 00:12.740
A lo largo del curso, me referiré a ella como mini o mini MVCs.

00:12.750 --> 00:17.580
Cuando lo creé, apliqué los aprendizajes que tenía de anteriores marcos arquitectónicos.

00:17.580 --> 00:23.910
Estos aprendizajes incluyen el uso de genéricos, con fuerte tipado, utilizando el patrón de comandos y el observador

00:23.910 --> 00:26.550
para un sistema de comunicación de dos niveles.

00:26.550 --> 00:32.670
Al igual que con otras arquitecturas basadas en MVC, tenemos beneficios incluyendo que es una solución probada.

00:32.670 --> 00:34.080
Es agnóstica al lenguaje.

00:34.080 --> 00:39.300
Puedes encontrar materiales sobre este tipo de enfoque en muchos idiomas y plataformas diferentes.

00:39.300 --> 00:45.300
El uso de MINI proporciona un entorno más comprobable que permite un desarrollo más rápido y más directo.

00:45.300 --> 00:46.650
mantenimiento de tus proyectos.

00:46.650 --> 00:49.080
Algunas características incluyen Esto es ligero.

00:49.080 --> 00:53.310
Parte de por qué se llama MINI es que hay muy pocas clases y conceptos involucrados.

00:53.310 --> 00:56.820
Además, se trata específicamente de comportamiento no monetario.

00:56.820 --> 00:58.560
Los comportamientos monetarios son opcionales aquí.

00:58.560 --> 01:04.140
Las preocupaciones centrales extienden una interfaz y no hay cantidad de comportamientos requeridos.

01:04.530 --> 01:09.180
Los comportamientos se vuelven opcionales y puedes usarlos para las cuatro preocupaciones.

01:09.180 --> 01:13.590
Ninguna de las preocupaciones o cualquier combinación que funcione mejor para tu proyecto.

01:13.590 --> 01:17.280
Esto demuestra otra característica que este es un marco de trabajo de opinión.

01:17.280 --> 01:22.770
Hay una ruta sugerida, pero también es bastante flexible en función de las necesidades de tu proyecto.

01:22.770 --> 01:26.370
Puedes masajear este sistema y obtener los mejores resultados para tu caso de uso.

01:26.370 --> 01:32.670
Este marco es ideal para los casos de uso de producción en su proyecto y, además, es ideal para la educación

01:32.670 --> 01:33.360
educativos.

01:33.360 --> 01:37.650
Por eso en este curso me centro en él para enseñar los conceptos de MVC.

01:37.650 --> 01:42.300
Echemos un vistazo a este diagrama UML de alto nivel que muestra las clases involucradas.

01:42.300 --> 01:47.520
Aquí vemos las preocupaciones principales familiares de modelo, vista, controlador y servicio.

01:47.550 --> 01:51.090
Observa que no tenemos dependencias directas del motor unity.

01:51.090 --> 01:53.220
Ya no es necesario el comportamiento mono.

01:53.220 --> 01:55.530
Hay flexibilidad en cómo implementarlo.

01:55.530 --> 02:01.740
Pero aquí en este ejemplo de mi código, estoy subclases, el Mini y VCs proyecto para empezar.

02:01.740 --> 02:07.110
Así que cuando se mira en este marco o cualquier otro marco específico de la unidad, algunas de las consideraciones

02:07.110 --> 02:08.610
que podéis preguntaros están aquí.

02:08.610 --> 02:12.030
¿Tiene alguna característica específica de unity en este caso?

02:12.030 --> 02:12.450
No.

02:12.450 --> 02:16.560
He elegido no depender y requerir el comportamiento de unity.

02:16.560 --> 02:19.470
Por ejemplo, puedes añadirlo tú mismo.

02:19.470 --> 02:25.110
El sistema es flexible para usar cosas como mono behavior y script able object, pero no son necesarios.

02:25.110 --> 02:26.340
partes del núcleo del framework.

02:26.340 --> 02:28.170
Esto fue un deseo de mantener las cosas ligeras.

02:28.170 --> 02:30.150
¿Cuál es el papel de los comportamientos mono?

02:30.150 --> 02:31.230
Bueno, son opcionales.

02:31.230 --> 02:33.030
Para cada una de tus cuatro preocupaciones.

02:33.030 --> 02:35.250
Puedes extender el comportamiento mono o no.

02:35.250 --> 02:39.390
Entonces, ¿cómo maneja las preocupaciones, las convenciones en la comunicación?

02:39.390 --> 02:43.560
Bien, imagina que dentro de tu proyecto puedes tener uno o más minis por defecto.

02:43.560 --> 02:48.180
Supondría que añadirías una al proyecto, pero podrías dividirlo en más y hacer que se comunicaran

02:48.180 --> 02:50.280
juntos para un enfoque más modular.

02:50.280 --> 02:54.240
Puedes tener cero o más de cada una de las preocupaciones principales.

02:54.240 --> 03:00.390
Imagino que como mínimo tendrás un mini y un controlador, pero luego puedes tener varios más.

03:00.390 --> 03:05.730
controladores, multiples vistas si quieres, multiples modelos y multiples servicios.

03:05.730 --> 03:07.560
Así que se adapta a tus necesidades.

03:07.560 --> 03:10.470
Está diseñado de tal forma que las convenciones que sigas.

03:10.470 --> 03:16.860
Las sugerencias son mucho más importantes que cualquier tipo de configuración o requisito.

03:16.860 --> 03:22.500
Esto permite flexibilidad, pero aún así os animo a que estéis atentos a separar vuestras preocupaciones

03:22.500 --> 03:27.360
y ver cómo se comunican entre las preocupaciones que le dará un proyecto más escalable.

03:27.360 --> 03:31.650
Y hablando de comunicación, el sistema soporta dos niveles de comunicación.

03:31.650 --> 03:34.830
Tiene tanto eventos como comandos.

03:34.830 --> 03:39.370
Disponer de ambas opciones es increíblemente potente, como veremos.

03:39.390 --> 03:42.900
Y por último, ¿cuál es el equilibrio entre rigidez y flexibilidad?

03:42.900 --> 03:48.900
Bueno, una de las principales filosofías de este marco es que sea lo más flexible y ligero posible.

03:48.900 --> 03:54.210
Pero para mantener muchos de los beneficios que obtenemos de la utilización de una arquitectura, hay algunas reglas que

03:54.210 --> 03:58.800
se sugieren y como sea que las apliques, te sugiero que las apliques consistentemente.

03:58.800 --> 04:05.520
Así que para los propósitos de este curso y nuestra discusión elegiremos Mini y VC como nuestra unidad elegida

04:05.520 --> 04:10.590
marco para seguir adelante, y un componente clave de cómo esta información se está entregando en el curso

04:10.590 --> 04:16.440
independientemente del framework MVC que elijas o si decides crear tu propio framework.

04:16.440 --> 04:23.190
Los principios de diseño, los patrones de diseño, el uso de los diagramas de los que hablamos, y la experiencia

04:23.190 --> 04:28.380
que veremos cuando profundicemos en esto, puedes llevar todos estos aprendizajes a cualquier arquitectura que tu

04:28.380 --> 04:28.890
elijas.

04:28.890 --> 04:30.240
Así que empecemos.

04:30.240 --> 04:34.560
Voy a dar un poco de contexto de cómo y por qué elegí los mini MVC para este curso.

04:34.560 --> 04:39.780
Después de pasar años aprendiendo y aplicando arquitecturas a diferentes proyectos y queriendo enseñar

04:39.780 --> 04:44.340
más sobre esos conceptos, me di cuenta de que es un gran tema y hay mucho que aprender.

04:44.340 --> 04:51.390
Sugiero que la mejor manera de aprender es utilizar realmente estos conceptos en sus proyectos, Crear ejemplo

04:51.390 --> 04:55.260
proyectos desde cero, trae estos conceptos a tus proyectos existentes.

04:55.260 --> 04:59.760
Sólo entonces conseguirás realmente sentir y aprender los beneficios de estas soluciones.

05:00.060 --> 05:05.400
Analicé todas las opciones que existen desde la perspectiva de la unidad sobre las mejores arquitecturas.

05:05.400 --> 05:10.200
Hay un montón de grandes opciones por ahí, pero a menudo son complejas aprender la idiosincrasia de

05:10.200 --> 05:10.950
cada marco.

05:10.950 --> 05:16.410
Así que creé los mini MVC como una forma fácil de iniciarse en los conceptos de MVC.

05:16.440 --> 05:20.790
De hecho, está listo para la producción, pero en realidad está diseñado para fines educativos.

05:20.790 --> 05:26.340
Así que disfruta a medida que profundizamos en él, vemos muestras basadas en él y sigues las asignaciones usando

05:26.340 --> 05:27.000
el marco.

05:27.000 --> 05:32.310
Es mi esperanza que al final del curso, ya sea esta solución en particular u otra arquitectura,

05:32.310 --> 05:37.230
que veas los beneficios de usar una arquitectura y tengas las habilidades para aplicarlos.

05:37.620 --> 05:38.460
Gracias.
