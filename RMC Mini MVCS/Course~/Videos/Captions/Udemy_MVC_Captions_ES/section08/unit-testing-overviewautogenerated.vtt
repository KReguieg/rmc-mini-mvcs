WEBVTT

00:00.210 --> 00:02.340
El resumen de las pruebas unitarias.

00:02.340 --> 00:04.220
Primero, un poco de contexto.

00:04.230 --> 00:11.790
A medida que tus proyectos crecen con más scripts, más métodos, más complejidad, puede ser difícil asegurar

00:11.790 --> 00:14.610
que el nuevo código no rompe el antiguo.

00:14.640 --> 00:20.020
Las pruebas automatizadas pueden ayudar a asegurar que tu código funciona como esperas.

00:20.040 --> 00:26.640
Las pruebas automatizadas nos ayudan a descubrir cómo y dónde se producen los errores antes en el proceso, en lugar de

00:26.640 --> 00:31.140
la opción mucho más cara de esperar a que los usuarios finales informen de estos errores.

00:31.140 --> 00:37.650
Así que puedes usar arquitecturas MVC sin pruebas y puedes usar pruebas sin arquitectura MVC.

00:37.650 --> 00:41.140
¿Por qué es importante hablar de estos temas juntos?

00:41.160 --> 00:46.860
Es porque la combinación de estas dos tecnologías es increíblemente poderosa mediante el uso de una arquitectura

00:46.860 --> 00:48.090
como MVC.

00:48.120 --> 00:54.450
Ayuda a asegurar que tu código está más desacoplado, que cada clase tiene un único propósito y que las soluciones

00:54.450 --> 00:55.140
sean más simples.

00:55.140 --> 00:58.060
Todos estos son rasgos para un código más comprobable también.

00:58.080 --> 01:04.740
Añadir pruebas a tu proyecto añadirá robustez, más confianza y fomentará soluciones simples,

01:04.740 --> 01:09.090
especialmente cuando se activa con el desarrollo dirigido por pruebas, que vamos a discutir.

01:09.090 --> 01:12.690
La adición de pruebas unitarias a su proyecto y flujo de trabajo le ahorrará tiempo.

01:12.690 --> 01:15.620
Ahorra planificación, desarrollo y mantenimiento.

01:15.630 --> 01:21.450
Añade más confianza a tu código, y con esa confianza puedes tener mucha más audacia en tu

01:21.450 --> 01:22.460
factores de riesgo.

01:22.470 --> 01:29.010
Piensa en ejecutar todas tus pruebas antes de una refactorización importante, y después te ahorrará tiempo y te dará

01:29.010 --> 01:31.530
más confianza en que la refactorización funcionó bien.

01:31.560 --> 01:33.750
Probar es tanto un arte como una ciencia.

01:33.750 --> 01:38.480
Con más investigación y más práctica, cada desarrollador puede desarrollar su propio arte.

01:38.490 --> 01:43.050
También pruebas de bajo nivel, es decir, probar cosas a nivel de unidad.

01:43.620 --> 01:49.200
Métodos individuales, digamos, y las prácticas y la evolución de su software que vendrá de

01:49.200 --> 01:56.370
que fomenta el debate a alto nivel sobre las opciones arquitectónicas, las dependencias o la falta de ellas.

01:56.370 --> 02:00.840
de las mismas a través de tu código y cómo de acoplados o desacoplados están estos sistemas.

02:00.870 --> 02:06.980
Todo esto forma parte de una conversación más amplia que invita a llevar una buena organización a tu software.

02:06.990 --> 02:13.530
Nuestro primer objetivo, especialmente los nuevos en las pruebas, es asegurarnos de que un método específico tiene la deseada

02:13.530 --> 02:14.300
deseados.

02:14.310 --> 02:21.060
Una vez hecho esto, ahora puedes probarlo con condiciones inesperadas y casos de esquina que pueden invitar a la discusión

02:21.060 --> 02:24.390
y análisis sobre la estructura de la propia clase.

02:24.390 --> 02:28.230
Entonces puedes mirar el propósito del sistema en el que se asienta esa clase.

02:28.230 --> 02:35.430
Y como he mencionado, este tipo de análisis nos da una oportunidad y un formato para mirar a la gran

02:35.430 --> 02:37.290
solución a gran escala que tenemos ante nosotros.

02:37.290 --> 02:37.980
En software.

02:37.980 --> 02:43.250
Hay muchos tipos diferentes de pruebas y, lo sepas o no, ya estás haciendo pruebas.

02:43.260 --> 02:46.980
Algunos de los tipos de pruebas más comunes son la prueba de humo.

02:46.980 --> 02:50.730
Se trata de una prueba más bien informal de ¿funciona para mí?

02:50.730 --> 02:55.380
Y para muchos de nosotros, este puede ser el único tipo de prueba de proyecto que hagamos.

02:56.030 --> 03:03.050
Cada vez que haces algo de código nuevo, ejecutas la aplicación como un usuario o juegas al juego como un jugador y tú

03:03.050 --> 03:08.300
¿Ves si ese camino en particular a través de la aplicación o el juego funciona como yo espero que lo haga?

03:08.330 --> 03:14.210
Luego están las pruebas de usuario, en las que periódicamente, tal vez después de una compilación semanal, invitas a algunos usuarios

03:14.210 --> 03:16.340
o jugadores a probar el juego.

03:16.370 --> 03:21.880
Aquí lo que buscas no es sólo si tiene errores, sino si cumple las expectativas del usuario.

03:21.890 --> 03:23.840
¿Es divertido jugar a cosas así?

03:23.840 --> 03:30.320
Y con la prueba de unidad, estás mirando una sección muy pequeña de la experiencia, tal vez sólo una sola

03:30.320 --> 03:34.790
o una pequeña serie de llamadas mientras los sistemas trabajan juntos.

03:34.790 --> 03:38.120
Y te preguntarás, ¿funciona como se pretende que funcione?

03:38.150 --> 03:43.280
Como he mencionado, ya estamos haciendo pruebas de humo como una forma fundamental de abordar los proyectos.

03:43.280 --> 03:45.410
Así que vamos a imaginar un ejemplo sencillo aquí.

03:45.410 --> 03:50.240
Si tuviéramos una aplicación de pulsar el botón, que tiene un botón, y cuando lo pulsas, ganas.

03:50.360 --> 03:52.730
Podríamos añadir algo de código a eso.

03:52.730 --> 03:55.040
Compila y ejecuta la experiencia.

03:55.040 --> 03:59.670
Haga clic en el botón uno y ver si se muestra el texto de la victoria de usted gana.

03:59.690 --> 04:05.120
Eso sería una prueba de humo y podrías pasársela al usuario y ver si le funciona.

04:05.450 --> 04:11.470
En ambos casos, esta es una prueba bastante cara de realizar y es un uso muy limitado del código

04:11.480 --> 04:11.810
aquí.

04:11.810 --> 04:17.570
En este sencillo ejemplo, puede parecer que podemos capturar todos los casos de uso, pero imagina un juego más grande

04:17.570 --> 04:19.940
con bucles de núcleo y bucles de metal.

04:20.210 --> 04:26.240
No puedes contar con el desarrollador o el usuario y el usuario probando, probando todos los botones, todos los

04:26.240 --> 04:30.200
funcionalidad, todas las entradas y todos los resultados potenciales.

04:30.200 --> 04:36.560
Cuando se hace correctamente, las pruebas unitarias pueden capturar más caminos a través del código más rápidamente, y usted

04:36.560 --> 04:40.550
puede ejecutar ese conjunto de pruebas de forma automática con más frecuencia en el tiempo.

04:40.550 --> 04:44.690
Estás creando una lista de pruebas permanentes listas para ser ejecutadas.

04:44.690 --> 04:48.050
Así sabrás que el nuevo código no rompe ninguna funcionalidad antigua.

04:48.050 --> 04:54.440
Algunos equipos operan bajo los principios del desarrollo ágil, que incluye una parte de su calendario llamada

04:54.440 --> 04:55.130
un sprint.

04:55.130 --> 05:01.910
Por ejemplo, cada dos semanas el equipo se compromete a añadir algunas nuevas características cada hora, día, semana o

05:01.910 --> 05:02.540
sprint.

05:02.540 --> 05:05.240
El equipo puede ejecutar esas pruebas automatizadas de nuevo.

05:05.240 --> 05:07.610
Es una gran oportunidad para detectar cualquier error.

05:07.610 --> 05:09.950
Entonces, ¿cómo estamos ejecutando estas pruebas exactamente?

05:09.980 --> 05:13.730
Bueno, Unity tiene soporte de pruebas dentro del editor de Unity.

05:13.730 --> 05:19.660
Hay una ventana dedicada que puedes abrir y ejecutar manualmente esas pruebas cuando quieras.

05:19.670 --> 05:21.220
Es un buen punto de partida.

05:21.230 --> 05:25.850
Por supuesto, automatizar esto es posible y recomendable para proyectos más grandes.

05:25.850 --> 05:32.150
Hay maneras de atar esto con su control de versiones para que cada vez que se comprometen o se comprometen a un determinado

05:32.150 --> 05:34.460
rama, puede ejecutar las pruebas de nuevo.

05:34.760 --> 05:39.170
El propio Unity ofrece algunos servicios, incluyendo Unity Cloud build.

05:39.170 --> 05:45.170
Esto imita la ejecución de esas pruebas y la construcción de su juego, pero hecho en un servidor automáticamente haciéndolo

05:45.170 --> 05:47.960
una vez al día o con la frecuencia que tenga sentido.

05:47.960 --> 05:52.670
Ahora, en el desarrollo general de unity, estamos familiarizados con dos modos diferentes dentro de unity

05:52.670 --> 05:53.660
experiencia.

05:54.020 --> 05:56.870
Antes de pulsar el botón de reproducción, estamos en modo de edición.

05:56.870 --> 06:01.430
Una vez que le damos al play hasta que la escena se detiene, estamos en modo reproducción.

06:01.730 --> 06:05.780
Con unity testing, puedes probar en cualquiera de esos dos modos.

06:05.780 --> 06:07.970
Entonces hay varias maneras diferentes de enfocar eso.

06:08.450 --> 06:13.580
Algunas de las ideas de prueba que tendrías aquí sería llamar a un método y ver si te da el

06:13.580 --> 06:14.720
resultado esperado.

06:14.720 --> 06:20.720
Digamos que tenemos una clase de sistema de matemáticas con un método ADD y que acaba de pasar en los parámetros conocidos y ver

06:20.720 --> 06:22.280
si coincide con el resultado conocido.

06:22.280 --> 06:27.200
También puede tener pruebas que hacen preguntas específicas acerca de la funcionalidad de ED.

06:27.230 --> 06:33.920
¿Apareció la ventana Ed con el tamaño adecuado donde nuestros objetos de juego o la cámara en la posición adecuada

06:33.920 --> 06:35.480
antes de que comience la escena?

06:35.480 --> 06:41.000
Hacer pruebas y editar en modo edición cuando puedas es un buen punto de partida, así que hazlo por defecto.

06:41.000 --> 06:41.540
Modo reproducción.

06:41.570 --> 06:47.030
Probar es increíblemente útil, pero viene con la complejidad añadida del código en tiempo de ejecución.

06:47.710 --> 06:52.900
Aquí, estás probando no sólo como un determinado método de retorno y resultado, sino que estás probando que dentro de

06:52.900 --> 06:57.100
el ciclo de vida de los objetos del juego y otros conceptos de unity.

06:57.200 --> 07:03.850
Y si aquí es, usted puede probar el código que se basa en una actualización de inicio de vigilia, etc cosas que sólo se ejecutan

07:03.850 --> 07:04.520
en tiempo de ejecución.

07:04.540 --> 07:11.320
Algunas ideas de prueba aquí son para ver si un prefab una vez instanciado ejecuta su método de inicio correctamente.

07:11.320 --> 07:12.720
Sin ninguna excepción.

07:12.730 --> 07:14.860
Puedes probar el código a lo largo del tiempo.

07:15.580 --> 07:17.890
¿Este bucle se ejecuta correctamente?

07:17.890 --> 07:19.280
Después de unos segundos.

07:19.300 --> 07:21.940
Puedes comprobar las interacciones físicas en tiempo de ejecución.

07:21.940 --> 07:28.850
¿Cuántos rebotes tendrá una pelota en tu juego 3D antes de que deje de comprobar el factor de rebote?

07:28.870 --> 07:30.430
Un poco más de contexto aquí.

07:30.430 --> 07:36.970
Así que históricamente, la unidad no ofrece pruebas integradas en el editor utilizando la prueba de ejecución o ventana.

07:36.970 --> 07:37.480
Veremos.

07:37.480 --> 07:43.360
En los muchos años transcurridos desde el lanzamiento de Unity, esta funcionalidad se ha ido añadiendo y ampliando poco a poco.

07:43.360 --> 07:45.220
A partir de la última versión de Unity.

07:45.220 --> 07:50.650
Tenemos todo lo que necesitamos para ejecutar los tipos de pruebas que queremos de la manera que queremos.

07:50.650 --> 07:56.020
Nunca ha habido un mejor momento para añadir pruebas unitarias en su flujo de trabajo, y juntos vamos a ver cómo

07:56.020 --> 07:56.830
hacerlo.

07:57.250 --> 07:58.090
Gracias.
