WEBVTT

00:00.150 --> 00:04.260
Primero, veamos la versión sin muchos, MVCs añadidos.

00:05.180 --> 00:08.070
Aquí estamos dentro de un proyecto unity vacío.

00:08.090 --> 00:13.370
Ya he añadido el mini NPCs framework e importado los samples.

00:13.670 --> 00:15.650
Vamos a abrir la muestra de inicio de sesión.

00:16.830 --> 00:22.710
Aquí está la estructura de archivos para la versión de esta muestra que no tiene el mini MVC añadido.

00:23.280 --> 00:29.820
En la sección de recursos, tengo el prefab que se utiliza para la interfaz de usuario, así como el archivo de texto que obtiene

00:29.820 --> 00:32.550
cargado simulando la capa de servicio.

00:33.180 --> 00:38.700
Tengo una escena y en esa escena tenemos un archivo de ejemplo que lo inicia todo.

00:39.090 --> 00:40.920
Vamos a empezar ejecutando el ejemplo.

00:41.220 --> 00:44.550
Este ejemplo es una simulación offline de inicio de sesión.

00:45.030 --> 00:50.460
Usamos el patrón familiar de introducir un nombre de usuario y una contraseña.

00:50.940 --> 00:52.560
Haciendo clic en el botón de inicio de sesión.

00:52.560 --> 00:57.330
Normalmente, un servicio de back-end validaría si estos campos coinciden correctamente.

00:58.290 --> 01:03.300
En este caso, estoy cargando un archivo local y comprobando que la contraseña local coincide con la que he introducido.

01:03.330 --> 01:04.260
escrito aquí.

01:04.710 --> 01:07.890
Vamos a seguir adelante y hacer un ejemplo de trabajo.

01:19.820 --> 01:23.960
Como el texto en pantalla insinúa allí, la contraseña es evidente.

01:30.490 --> 01:35.890
Cuando pulso iniciar sesión, hay un breve retraso y luego tenemos éxito que he iniciado sesión correctamente.

01:53.070 --> 01:57.540
Ahora he cerrado la sesión y voy a entrar usando una contraseña obviamente incorrecta.

02:00.680 --> 02:02.640
Y vemos que el mensaje ha fallado.

02:02.660 --> 02:04.410
Así que todo está funcionando bien aquí.

02:04.430 --> 02:06.950
Veamos todo el código para que esto suceda.

02:06.950 --> 02:09.500
Y empezaremos con el archivo de ejemplo de alto nivel.

02:10.380 --> 02:12.380
Aquí está el código para el archivo de ejemplo.

02:12.390 --> 02:17.310
Empezaré por desplazarme por él y luego lo revisaré línea por línea.

02:44.380 --> 02:49.690
No empezamos con el fichero principal de la clase de ejemplo, sino con un objeto de datos de ayuda.

02:51.310 --> 02:56.260
Este objeto de datos de usuario contiene el nombre de usuario y la contraseña a punto de ser enviados.

02:56.530 --> 03:01.780
Aquí está el ejemplo en sí, y como con todos los ejemplos, extendemos montaje de comportamiento para que podamos adjuntar

03:01.780 --> 03:03.080
a un objeto del juego.

03:03.100 --> 03:07.990
Entonces vemos campos serializados para todos los diferentes elementos de interfaz de usuario dentro del inicio.

03:07.990 --> 03:14.380
Aquí nos suscribimos a algunos eventos de unity para la interfaz de usuario, y luego imitamos el clic de cierre de sesión

03:14.380 --> 03:17.160
llamando a la función de cierre de sesión.

03:17.170 --> 03:19.870
Esto sólo limpia la interfaz de usuario y empezamos de nuevo.

03:19.900 --> 03:26.890
A continuación, cada vez que esos dos campos de entrada se editan, esto se llama y simplemente actualizamos.

03:26.890 --> 03:28.840
¿Ya puede enviar?

03:28.840 --> 03:33.670
Esta es una comprobación muy simple, pero sólo digo que si los campos están vacíos, no se puede enviar.

03:33.670 --> 03:36.610
Si hay algo en los campos puedes enviar.

03:36.760 --> 03:40.510
Esto es lo que sucede cuando hacemos clic en iniciar sesión y hay bastante aquí.

03:40.510 --> 03:44.200
Este es el método más significativo, así que iré sección por sección.

03:44.350 --> 03:48.430
Primero, creo un nuevo dato de usuario basado en lo que el usuario ha escrito en los campos.

03:48.430 --> 03:54.500
A continuación, conmuto la intratabilidad, ver, o si está desactivado o no para cada uno de los elementos de la interfaz de usuario.

03:54.520 --> 04:00.820
Ahora, como hemos visto con el ejemplo anterior, simulamos una llamada de back-end en línea con sólo cargar un archivo

04:00.820 --> 04:02.080
archivo de texto local.

04:02.200 --> 04:05.320
Esto hace alguna operación asíncrona.

04:05.320 --> 04:12.190
Son datos externos, así que una vez que hablamos de capas de servicio, esto tiene sentido para un componente de capa de servicio

04:12.250 --> 04:17.950
y podemos ver al final que lo que estamos obteniendo es la representación en texto de la contraseña válida

04:17.950 --> 04:20.710
y lo estamos comprobando con lo que el usuario envió.

04:21.970 --> 04:23.050
Asumiendo que hay una coincidencia.

04:23.050 --> 04:25.180
Llamamos a esto un inicio de sesión exitoso.

04:25.420 --> 04:31.570
Actualizamos la UI para que vuelva a estar habilitada según corresponda, y mostramos un mensaje de éxito o fracaso

04:31.570 --> 04:32.380
en la pantalla.

04:32.410 --> 04:38.770
Por último, en cualquier momento si el usuario pulsa el botón de cierre de sesión y luego también imitamos esto en el método de inicio

04:38.770 --> 04:39.560
llamando a este formulario.

04:39.580 --> 04:42.280
Inicialmente, esto sólo limpia la interfaz de usuario.

04:42.310 --> 04:43.890
Vamos a ejecutar el ejemplo de nuevo.

04:43.900 --> 04:48.790
Lo rellenaré con información de trabajo que funcione correctamente y la demo estará completa.
