WEBVTT

00:04.590 --> 00:06.900
Aquí estamos en nuestro navegador favorito en Unity.

00:07.620 --> 00:10.220
Aquí vamos a descargar el editor de Unity y empezar.

00:10.230 --> 00:13.380
El Get started tiene varios planes de precios diferentes aquí.

00:13.380 --> 00:18.870
Unity, personal o Unity estudiante son una gran opción para empezar de forma gratuita para uso profesional.

00:18.870 --> 00:20.640
También hay otros planes disponibles.

00:20.640 --> 00:23.430
Estoy en una máquina Windows, así que lo descargaré para Windows.

00:23.730 --> 00:29.730
He descargado Unity, abre el instalador y continuaremos con la instalación.

00:29.730 --> 00:32.610
Una vez completada la instalación, abriré el Hub de Unity.

00:32.610 --> 00:39.600
El Unity Hub nos ayuda a instalar el editor de Unity en diferentes versiones si lo deseamos, así como crear un open

00:39.600 --> 00:40.350
proyectos.

00:40.350 --> 00:41.880
Voy a crear un nuevo proyecto.

00:41.880 --> 00:44.250
Unity ofrece muchas plantillas diferentes.

00:45.130 --> 00:51.340
La clave aquí es que queremos usar la última versión de unity llamada ELTs.

00:51.370 --> 00:57.340
Esto cambia con el tiempo, pero unity muestra claramente que esta es la versión que recibe soporte a largo plazo.

00:57.340 --> 00:59.890
Y normalmente es la última versión pública.

00:59.890 --> 01:01.870
La plantilla por defecto que muestra unity.

01:01.870 --> 01:03.910
Aquí está el núcleo de las tres D.

01:03.940 --> 01:09.100
Muchos MVCs son compatibles con muchas de estas plantillas diferentes, por lo que podemos elegir libremente.

01:09.220 --> 01:10.690
Pero voy a ir con el valor predeterminado aquí.

01:10.690 --> 01:14.950
Llamaré al proyecto calculadora mini y lo instalaré en mi carpeta favorita.

01:14.950 --> 01:20.140
Cada vez que cree un nuevo proyecto, Unity hará que todos los archivos de instalación y las dependencias se establezcan

01:20.140 --> 01:24.820
siguiendo la URL proporcionada en el curso en la sección de recursos.

01:25.240 --> 01:28.190
Vamos a venir aquí a GitHub y haga clic en el botón de código.

01:28.210 --> 01:34.390
Queremos capturar esta URL git que vamos a utilizar para importar el mini y VCs en la unidad.

01:34.390 --> 01:38.600
Una vez creado el proyecto, Unity se abre y nos da la pantalla por defecto.

01:38.620 --> 01:42.040
Esta plantilla viene con una escena de ejemplo, que es un buen lugar para empezar.

01:42.040 --> 01:45.810
A continuación, abriremos el gestor de paquetes e instalaremos Mini y VCs.

01:45.820 --> 01:50.110
Añadiremos un paquete desde la URL get pegaremos la URL que obtuvimos de GitHub.

01:50.110 --> 01:56.350
Una vez que mini NBC's está instalado, puedes instalar opcionalmente las muestras también, especialmente cuando obtengas

01:56.350 --> 01:56.790
empezar.

01:56.800 --> 01:58.420
Recomiendo encarecidamente hacerlo.

01:58.420 --> 02:03.880
Puedes encontrar que una de las muestras es lo suficientemente similar a tus objetivos y puedes empezar con

02:03.880 --> 02:07.380
ya sea copiando y pegando o usándola como referencia.

02:07.390 --> 02:11.380
En nuestro caso, no vamos a importar las muestras, vamos a trabajar desde cero.

02:11.380 --> 02:12.400
Con una excepción.

02:12.400 --> 02:18.070
Voy a utilizar un archivo de plantilla que puedo copiar y pegar sólo para mantener nuestras clases de aspecto coherente y

02:18.070 --> 02:18.580
legibles.

02:18.580 --> 02:21.790
El paquete del mini NBC viene con una plantilla.

02:21.790 --> 02:28.090
Lo copiaré en nuestra carpeta de activos y lo abriré usando estándares de codificación consistentes o una plantilla de codificación

02:28.090 --> 02:29.650
esto es opcional.

02:29.650 --> 02:32.800
Recomiendo que cada equipo lo considere en función de sus propios objetivos.

02:32.800 --> 02:38.110
Para los propósitos de esta discusión, lo estoy usando sólo para mantener mi código consistente y para hacerlo más

02:38.110 --> 02:39.010
legible para ti.

02:39.010 --> 02:41.530
Copiaré y pegaré esto para empezar nuevas clases.

02:41.530 --> 02:46.540
Tiene la definición de la clase una propiedad de ejemplo y un campo de ejemplo y más.

02:46.540 --> 02:48.940
Pensemos en la estructura de archivos de nuestro proyecto.

02:48.940 --> 02:50.140
Me gusta la carpeta de escena.

02:50.140 --> 02:51.580
Cambiaré el nombre de nuestra escena.

02:51.580 --> 02:58.450
Mi convención es que creo una carpeta script en los assets y creo una carpeta runtime editor y test

02:58.450 --> 02:58.930
dentro.

02:58.930 --> 03:03.940
Entonces, porque estamos trabajando con muchos, me gusta crear carpetas dedicadas para la mini estructura como

03:03.940 --> 03:07.210
así como una carpeta para el modelo vista controlador y servicio.

03:07.210 --> 03:11.590
En este caso, no vamos a crear un servicio, pero voy a dejar la carpeta allí en caso de que en

03:11.590 --> 03:12.340
en el futuro.

03:12.340 --> 03:14.060
Añadir un servicio tiene sentido ahora.

03:14.060 --> 03:16.540
Estableceré la jerarquía de escenas y crearé nuestro primer script.

03:16.540 --> 03:21.670
La estructura de escena por defecto proporcionada por Unity es una cámara principal y una luz direccional.

03:21.700 --> 03:27.310
Mi preferencia personal es ponerlos en un objeto de juego del mundo para poder ocultar la complejidad allí.

03:27.310 --> 03:30.010
Ahora crea un objeto de juego para el ejemplo.

03:30.010 --> 03:33.370
Ese es el comportamiento mono que inicia el proceso.

03:33.370 --> 03:37.900
Le daré el nombre de calculadora, mini ejemplo y le daré un script con el mismo nombre.

03:37.900 --> 03:39.790
Aquí está el punto de partida para el nuevo archivo.

03:39.790 --> 03:43.680
Cuando Unity lo cree, pegaremos esa plantilla de clase y la actualizaremos correctamente.

03:43.690 --> 03:44.710
Aquí está el archivo actualizado.

03:44.710 --> 03:45.460
Echemos un vistazo.

03:45.460 --> 03:48.310
Le he dado un espacio de nombres específico para este proyecto de ejemplo.

03:48.310 --> 03:53.290
Hago coincidir el nombre de la clase con el nombre del archivo y pienso qué código necesitaré para empezar aquí.

03:53.290 --> 03:56.830
Sólo necesitaremos un método de inicio en el que vamos a crear el mini.

03:56.830 --> 03:59.380
Vamos a crear el archivo de clase para el Mini y volvemos.

03:59.380 --> 04:03.370
Duplicaré la plantilla de la clase y crearé la mini clase de la calculadora.

04:03.370 --> 04:05.350
Aquí estamos en la mini clase calculadora.

04:05.350 --> 04:08.170
Ahora usaremos las primeras clases de nuestro framework.

04:08.170 --> 04:16.690
Tenemos una opción aquí para la mini principal si queremos extender la mini clase base MVCs o utilizar una interfaz.

04:17.510 --> 04:22.580
Ahora, debido a que no estamos utilizando ninguna capa de servicio, tiene sentido utilizar una interfaz que nos da más

04:22.580 --> 04:23.330
flexibilidad.

04:23.330 --> 04:26.430
Así que aquí implementaremos AI Mini y VCs.

04:26.450 --> 04:29.060
Cada editor de código lo expresa de una manera diferente.

04:29.090 --> 04:32.740
Aquí, en mi editor, aparece un garabato rojo indicando que algo va mal.

04:32.750 --> 04:37.760
Voy a comprobar el menú contextual porque he elegido implementar una interfaz, pero en realidad no he hecho

04:37.760 --> 04:39.160
la implementación todavía.

04:39.170 --> 04:44.120
El editor de código ofrece hacer eso por mí, y a medida que avanzamos, voy a hacer este flujo de trabajo.

04:44.120 --> 04:46.340
Elegiré implementar esos miembros que faltan.

04:46.340 --> 04:48.200
Dejaré todo marcado por defecto.

04:48.200 --> 04:49.580
Veamos el resultado.

04:49.580 --> 04:54.140
Tenemos una propiedad inicializada y algunos métodos relacionados con la inicialización.

04:54.140 --> 04:58.850
Ahora tenemos suficiente código en la calculadora mini para volver al ejemplo y terminarlo.

04:58.850 --> 05:03.290
Así que aquí en el ejemplo de la calculadora mini en su método de inicio, terminaremos de codificar.

05:03.290 --> 05:03.530
Aquí.

05:03.530 --> 05:06.890
Hemos creado una instancia de la calculadora mini y llamado a inicializar.

05:06.890 --> 05:07.940
Eso es todo lo que necesitamos aquí.

05:07.940 --> 05:12.110
En este archivo de ejemplo, vamos a seguir en la calculadora mini clase en sí.

05:12.110 --> 05:17.180
Así que como te estás acostumbrando a usar el mini y el framework VCs, esta es una gran oportunidad para que tomes

05:17.180 --> 05:21.590
echar un vistazo a otros proyectos de ejemplo sólo para seguir adelante y ver cómo es la estructura.

05:21.590 --> 05:22.760
Pero voy a pensar en voz alta.

05:22.760 --> 05:26.900
Lo que necesitamos del Mini es de qué preocupaciones se va a ocupar.

05:27.050 --> 05:32.330
Así que tendremos que declararlos, inicializarlos y si es necesario, los conectaremos.

05:32.330 --> 05:32.840
juntos.

05:32.840 --> 05:34.070
Voy a seguir adelante y hacer eso ahora.

05:34.070 --> 05:37.130
Así que si aún no estamos inicializados, lo haremos.

05:37.130 --> 05:42.050
Y luego puse algunos comentarios temporales donde irá el código.

05:42.290 --> 05:45.470
Creamos el modelo, el controlador y los inicializamos.

05:46.570 --> 05:52.930
Puede que recuerdes de proyectos de ejemplo anteriores que debido a que nuestra vista va a extender el comportamiento mono

05:52.930 --> 05:56.600
y se sientan en la jerarquía de la escena, vamos a configurar de una manera diferente.

05:56.620 --> 06:01.660
Aquí mi editor de código está indicando rojo, lo que significa, hey, esas clases no existen, así que vamos a ir

06:01.660 --> 06:02.050
a crearlas.

06:02.050 --> 06:02.370
Ahora.

06:02.380 --> 06:06.110
Copiaré la plantilla de la clase para la estructura básica de lo que necesitamos.

06:06.130 --> 06:09.420
He creado las clases para la vista del modelo y el controlador.

06:09.430 --> 06:10.270
Vamos a echar un vistazo.

06:10.270 --> 06:11.470
Aquí está la clase modelo.

06:11.470 --> 06:16.300
Le he dado un espacio de nombres y actualizado el título de la clase, pero no he añadido la implementación todavía.

06:16.300 --> 06:20.190
Aquí está la clase vista de la calculadora y aquí está la clase controlador de la calculadora.

06:20.200 --> 06:23.680
Ahora que al menos tenemos las bases de esas clases construidas.

06:24.370 --> 06:29.180
Volvamos atrás y corrijamos cualquier error del compilador aquí en la mini clase calculadora.

06:29.200 --> 06:32.200
Tenemos algunos errores que resolver mientras creamos estas clases.

06:32.200 --> 06:34.030
Ahora todavía no se puede localizar.

06:34.030 --> 06:38.860
Hacemos click derecho y vemos que el editor las reconoce pero necesita una sentencia using.

06:38.860 --> 06:42.700
Ahora esas clases funcionan correctamente, pero les falta el initialize.

06:42.700 --> 06:47.350
Vamos a empezar a poner algo de código real en cada uno de esos archivos de clase porque el modelo de calculadora tiene base

06:47.350 --> 06:48.400
funcionalidad.

06:48.760 --> 06:50.020
Extenderemos el modelo base.

06:50.020 --> 06:51.760
El modelo base viene con initialize.

06:51.760 --> 06:53.140
Así que eso es todo lo que tenemos que hacer aquí.

06:53.140 --> 06:58.210
Por ahora para el controlador de la calculadora, vamos a querer alguna funcionalidad personalizada de nuevo porque

06:58.210 --> 06:59.680
no estamos utilizando el servicio.

06:59.680 --> 07:05.470
Por otro lado, podríamos utilizar el controlador base y crear un servicio vacío

07:05.470 --> 07:06.640
y realmente no lo necesitamos.

07:06.640 --> 07:10.210
Si piensas que en el futuro definitivamente vas a necesitar un servicio en algún momento.

07:10.210 --> 07:11.470
No es una mala solución.

07:11.470 --> 07:16.360
Pero por el bien de este proyecto, porque sabemos que no necesitamos un servicio en este momento, voy a utilizar una interfaz

07:16.360 --> 07:20.620
en lugar de implementar mi controlador, elijo implementar los miembros que faltan.

07:20.620 --> 07:24.310
Voy a dejar la configuración por defecto aquí y vamos a echar un vistazo a los resultados que obtenemos.

07:24.310 --> 07:27.970
Inicializar contexto y algunos métodos de inicialización.

07:27.970 --> 07:29.080
Esto es todo lo que necesitamos por ahora.

07:29.080 --> 07:34.810
A medida que avancemos, iremos añadiendo las implementaciones necesarias, volviendo siempre al método

07:34.810 --> 07:40.990
concepto principal, la Calculadora Mini, y veremos cuál es el siguiente paso lógico para su implementación.

07:40.990 --> 07:46.000
Un enfoque alternativo sería desarrollar completamente el modelo, luego desarrollar completamente la vista

07:46.000 --> 07:49.870
en el controlador y luego hacer el mini MVC como paso final.

07:49.870 --> 07:54.250
Usted puede proceder de cualquier manera que tenga sentido para usted, pero para el propósito de esta discusión, vamos a

07:54.250 --> 07:57.400
volveremos a esta clase y resolveremos los problemas que surjan.

07:57.400 --> 08:02.350
Así que tanto el modelo como el controlador están esperando un contexto, así que vamos a crearlo ahora pasando en

08:02.350 --> 08:06.070
esos valores de contexto, creo que hemos resuelto todos los errores del compilador.

08:06.070 --> 08:09.070
Por ahora, volvamos a unity y comprobemos nuestro progreso.

08:09.070 --> 08:12.190
Aquí estamos en unity sin errores de compilación.
