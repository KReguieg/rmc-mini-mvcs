WEBVTT

00:03.200 --> 00:04.700
Aquí estamos dentro de Unity.

00:04.700 --> 00:10.490
Tengo un proyecto nuevo en el que he instalado el framework mini VCs y he importado las muestras.

00:10.520 --> 00:13.960
Aquí está la estructura de archivos para la versión que tiene muchos.

00:13.970 --> 00:19.660
Tenemos recursos, incluyendo ese archivo de texto que vamos a cargar para simular una llamada a la capa de servicio.

00:19.670 --> 00:23.750
Tenemos una carpeta de ciencia con nuestra escena y luego tenemos los scripts de ejecución.

00:23.750 --> 00:29.210
Todavía no hemos echado un vistazo a la estructura del código MVCs en una muestra, así que vamos a hacer eso.

00:29.210 --> 00:34.370
Ahora, a partir de la parte inferior, tenemos el propio archivo de ejemplo que se adjunta a un objeto de juego en el

00:34.370 --> 00:34.880
escena.

00:34.880 --> 00:37.010
Luego tenemos el registro en la mini clase.

00:37.010 --> 00:40.880
Esta es la estructura de más alto nivel del mundo MVCs.

00:40.880 --> 00:47.900
Luego, según la convención típica, creo una carpeta para cada modelo, vista, controlador y servicio.

00:47.900 --> 00:50.750
Dentro de la vista, hay una clase, la vista de inicio de sesión.

00:50.750 --> 00:54.140
Dentro del servicio, hay una clase, el servicio de login.

00:54.140 --> 00:55.250
Dentro del modelo.

00:55.250 --> 01:02.210
Tenemos dos clases, una clase de datos de usuario, así como el modelo principal en sí para el inicio de sesión dentro de la

01:02.210 --> 01:03.200
carpeta del controlador.

01:03.200 --> 01:07.070
Tengo el controlador de inicio de sesión, que es el controlador principal del proyecto.

01:07.160 --> 01:12.050
También es apropiado tener una subcarpeta aquí para todos los comandos de un proyecto.

01:12.050 --> 01:16.970
Voy a hablar un poco más sobre los comandos, ya que no hemos echado un vistazo a ellos todavía en el código anterior

01:16.970 --> 01:17.770
sesiones.

01:17.780 --> 01:22.940
Ahora bien, aunque este es un ejemplo relativamente simple, sería razonable en un proyecto de producción

01:22.940 --> 01:29.330
seguir la misma estructura de carpetas y veríamos cada una de las carpetas pobladas con múltiples modelos,

01:29.330 --> 01:36.680
múltiples vistas y servicios, un montón de controladores, probablemente, así como una carpeta robusta real lleno de

01:36.680 --> 01:37.490
comandos.

01:37.490 --> 01:44.330
Puedes pensar en el gestor de comandos como una estación de radio capaz de emitir a cualquiera de las preocupaciones.

01:44.330 --> 01:50.510
Así que los mensajes de alto nivel que son apropiados allí, cosas como en este caso, inicio de sesión, inicio de sesión

01:50.510 --> 01:51.920
salir, limpiar la pantalla.

01:51.920 --> 01:55.730
Si tuviéramos una función de este tipo, que se sientan aquí como comandos individuales.

01:55.730 --> 01:58.340
Así que aquí estamos ejecutando el mini ejemplo.

01:58.340 --> 02:01.070
Como muestra la pista, hay una contraseña sugerida.

02:01.070 --> 02:03.410
Esa es la única contraseña aceptable aquí.

02:03.440 --> 02:05.570
Estamos comprobando un archivo local.

02:05.570 --> 02:09.170
Tengo los datos correctos allí y voy a enviar y vemos el éxito.

02:09.170 --> 02:14.090
Lo que está pasando es que la capa de servicio carga un archivo de texto local y se asegura de que lo que hay en él es correcto.

02:14.090 --> 02:17.990
el usuario ha escrito en la interfaz de usuario coincide con lo que hay en ese archivo de texto.

02:17.990 --> 02:23.960
Es un sustituto muy simplificado de algún tipo de interacción compleja.

02:25.330 --> 02:28.260
Profundicemos en el código, empezando por el ejemplo de alto nivel.

02:28.270 --> 02:32.800
Aquí está el ejemplo en sí, que es un comportamiento que se encuentra en un objeto del juego en la escena.

02:32.830 --> 02:37.570
Ahora, muchos MVCs no requieren que ninguna de sus preocupaciones sean comportamientos honrados.

02:37.570 --> 02:45.070
Pero en este ejemplo específico, como es probablemente común en tu trabajo también, tienes la vista b amount

02:45.070 --> 02:45.880
de comportamiento.

02:46.000 --> 02:52.840
Así que una manera fácil de traer que en el redil aquí es tener que sentarse como cantidad de comportamiento en un juego

02:52.840 --> 02:58.240
en la escena, arrastrarlo como una referencia serializada aquí, y luego ser capaz de pasar en el

02:58.240 --> 03:00.260
mini constructor de registro como vemos aquí.

03:00.280 --> 03:03.310
Vamos a echar un vistazo rápido a la escena para ver cómo está configurada.

03:03.310 --> 03:05.950
Así que aquí en la escena tengo que entrar en Ver seleccionado.

03:05.950 --> 03:11.360
Puedes ver en la ventana del Inspector que hay un script de inicio de sesión de vista que está sentado en este objeto de juego.

03:11.380 --> 03:17.110
Ahora, con el ejemplo seleccionado, podemos ver un campo serializado esperando una referencia

03:17.110 --> 03:18.270
al registro en la vista.

03:18.280 --> 03:22.300
Ese es realmente el único cableado que necesitamos en la propia escena.

03:22.570 --> 03:28.420
Hay formas alternativas de hacer esto, pero es muy familiar para nosotros tener comportamientos mono como una vista

03:28.420 --> 03:32.230
sentarse en la escena y arrastrar una referencia a un campo serializado aquí.

03:32.230 --> 03:38.080
De vuelta en el ejemplo aquí dentro del inicio, después de crear la clase y pasar en la vista que simplemente

03:38.080 --> 03:39.070
inicializamos.

03:39.070 --> 03:40.510
Eso es todo desde este nivel.

03:40.510 --> 03:42.340
Echemos un vistazo a la siguiente clase.

03:42.820 --> 03:45.100
Aquí estamos dentro de la mini clase log in.

03:45.490 --> 03:51.490
Este ejemplo es bastante convencional en el sentido de que toma un contexto, un modelo, un controlador de vista y un servicio

03:51.490 --> 03:54.970
uno de cada para que pueda tomar ventaja de la clase base aquí.

03:54.970 --> 04:02.830
Muchos NPCs la extienden y pasan los tipos fuertes para cada una de las preocupaciones que quiero dentro del constructor

04:02.830 --> 04:07.210
Yo solo paso la vista y dentro del initialize hago la mayor parte del trabajo.

04:07.210 --> 04:10.970
Aquí creo el contexto, el modelo, la vista y el controlador.

04:10.990 --> 04:15.340
Observa que el controlador es el único constructor que toma varios argumentos.

04:15.340 --> 04:21.400
Esto nos da una pista aquí de que el controlador es un poco más conocedor y más significativo en la estructura.

04:21.400 --> 04:23.880
Y finalmente inicializamos cada una de sus partes.

04:23.890 --> 04:25.360
Eso es todo para esta clase.

04:25.360 --> 04:30.940
Ahora, en el código de ejemplo anterior pasamos a través de cada uno de los modelos vista controlador y servicio.

04:30.940 --> 04:34.510
En aras de la brevedad aquí, la capa de servicio es muy similar.

04:34.510 --> 04:38.830
Por favor, echa un vistazo al código si quieres y también al modelo.

04:38.830 --> 04:42.670
Así que los aspectos únicos aquí son la vista y el controlador.

04:42.670 --> 04:43.900
Echemos un vistazo a cada uno.

04:44.200 --> 04:45.460
Aquí está la vista de inicio de sesión.

04:45.460 --> 04:48.790
Así que recuerda que esto está sentado en un objeto de juego en la escena.

04:48.790 --> 04:54.010
No se crea sobre la marcha como algunas de las otras preocupaciones en esta demo en particular.

04:54.010 --> 04:58.720
Me desplazaré hacia abajo aquí para que podamos echar un vistazo al alto nivel de la clase y luego voy a pasar a través de

04:58.720 --> 04:59.740
línea por línea.

05:32.460 --> 05:34.990
En primer lugar, tenemos algunos eventos unity personalizados.

05:35.010 --> 05:38.960
Esto no es realmente un flujo específico para este mini MVC.

05:38.970 --> 05:40.580
Es una práctica general.

05:40.590 --> 05:46.800
Cada vez que quieras enviar un evento dentro de Unity y quieras enviar un tipo largo a parámetros,

05:46.800 --> 05:52.800
siempre subclase como vemos aquí, no es realmente importante que nos fijamos en los detalles de las clases

05:52.800 --> 05:55.140
aquí porque no hay implementación.

05:55.140 --> 06:01.610
Sólo declaramos la clase como una forma de darle un nombre y declarar qué subtipo tendría dentro.

06:01.620 --> 06:08.490
Por ejemplo, el evento Unity de inicio de sesión acepta los datos del usuario cada vez que es invocado y pasa esa información

06:08.490 --> 06:08.970
solo.

06:08.970 --> 06:12.340
Así que esta es la primera vista que hemos visto que extiende el comportamiento mono.

06:12.360 --> 06:17.910
Recuerde que con muchos MVCs, el uso de comportamientos montados es completamente opcional, pero probablemente en cada uno

06:17.910 --> 06:24.270
ejemplo de cualquier complejidad y ciertamente en un caso de uso de producción, extenderías el comportamiento mono para

06:24.270 --> 06:25.190
tus vistas.

06:25.200 --> 06:30.600
Eso es porque el papel de la vista es tratar con la entrada del usuario y los elementos de la interfaz de usuario.

06:30.600 --> 06:34.540
Y en Unity, tiene más sentido tener comportamientos mono involucrados.

06:34.560 --> 06:38.040
A continuación, declaramos las propiedades y aquí los campos.

06:38.430 --> 06:44.610
Ahora observa que estos elementos UI son los mismos que la versión no mini MVC que vimos antes.

06:44.640 --> 06:48.330
La idea es que se vean y se comporten igual cada una de las muestras.

06:48.330 --> 06:53.040
Así que vas a ver un montón de código familiar aquí desde la última sección aquí en la inicialización.

06:53.040 --> 06:55.080
Tenemos un par de cosas interesantes sucediendo.

06:55.080 --> 07:02.340
Así que primero tenemos un bloque de botones de interfaz de usuario y estamos suscribiendo a los eventos de unidad que veríamos en

07:02.340 --> 07:03.960
una versión no mini MVCs.

07:03.960 --> 07:05.100
Esto es bastante estándar.

07:05.100 --> 07:09.630
Cada vez que quieras saber algo de la UI de Unity, suscríbete a sus eventos unity.

07:09.630 --> 07:12.890
Pero esta segunda sección es única para este framework.

07:12.900 --> 07:17.520
Aquí utilizamos el contexto que está disponible desde cualquier preocupación y acceso.

07:17.520 --> 07:18.640
El gestor de comandos.

07:18.660 --> 07:24.450
Ahora de nuevo, voy a hablar un poco más sobre el gestor de comandos aquí durante esta muestra en particular para profundizar.

07:24.540 --> 07:29.910
El gestor de comandos se sienta en el contexto y el contexto se pasa a todas las preocupaciones.

07:29.910 --> 07:37.290
Una de las cosas que puedes hacer con el gestor de comandos es suscribirte para escuchar diferentes notificaciones

07:37.290 --> 07:38.910
que llegan como comandos.

07:39.390 --> 07:41.310
La otra es que puedes invocarlos.

07:41.310 --> 07:48.240
Ahora recuerda, ninguna de las preocupaciones que o bien las añade o las invoca necesita saber quién está escuchando

07:48.240 --> 07:54.000
o quién más está invocando el gestor de comandos es el intermediario que se encuentra entre las dos capas de

07:54.000 --> 07:55.500
el observador y el emisor.

07:55.710 --> 08:01.560
Así que lo bueno de esto es que puedes enviar mensajes a ciegas a algo como una emisora de radio que es

08:01.560 --> 08:03.480
emitiendo hacia el cielo.

08:03.480 --> 08:08.910
Y en cualquier lugar que alguien sintonice esa frecuencia o ese comando específico, reciben

08:08.910 --> 08:09.690
el mensaje.

08:09.690 --> 08:15.450
Y algo que vemos a medida que bajamos por debajo de las líneas de código en esta clase, a menudo usamos la vista para preguntar

08:15.450 --> 08:15.900
unidad.

08:15.900 --> 08:20.880
UI se hizo clic en algo y luego lo traducimos en un comando.

08:20.880 --> 08:22.410
Veremos cómo se hace aquí.

08:22.440 --> 08:27.510
Al igual que con el ejemplo anterior, cada vez que el usuario escribe en los campos de texto o lo borra, es sólo

08:27.510 --> 08:29.410
actualiza el botón de inicio de sesión.

08:29.430 --> 08:33.960
La idea es que valide si el envío del usuario es potencialmente correcto.

08:33.960 --> 08:38.760
Simplemente comprobamos si el campo está vacío o no.

08:38.760 --> 08:43.920
Cada vez que se hace clic en el botón de inicio de sesión, lo traducimos a un evento de vista y lo enviamos.

08:43.920 --> 08:47.520
No sabemos desde este ámbito quién está escuchando o si alguien está escuchando.

08:47.520 --> 08:51.360
Pero cuando entremos en la siguiente sección, veremos quién es el suscriptor aquí.

08:51.900 --> 08:52.500
Lo mismo.

08:52.500 --> 08:55.290
Cuando se hace clic en el botón de cierre de sesión, enviamos ese mensaje.

08:55.290 --> 08:59.790
Así que estamos traduciendo una especie de evento de unidad local a un evento de vista personalizada.

09:00.640 --> 09:02.560
Como parte de una mejor práctica general.

09:02.560 --> 09:07.210
Cualquier cosa a la que nos suscribamos dentro del destroy, aquí la desuscribimos.

09:07.510 --> 09:12.820
Ahora, arriba en esta clase, nos suscribimos para escuchar el comando Logout y aquí la vista dice

09:12.820 --> 09:20.110
En cualquier momento cualquier preocupación envía el comando de cierre de sesión, voy a capturar que y voy a limpiar mis campos y yo

09:20.110 --> 09:22.360
Actualizaré mi botón "Click".

09:22.630 --> 09:25.750
Y la Vista también está escuchando el inicio de sesión.

09:25.960 --> 09:31.660
Cada vez que eso sucede, se prepara la interfaz de usuario para la presentación y las vistas también escuchando siempre que

09:31.660 --> 09:32.950
se complete el inicio de sesión.

09:33.250 --> 09:38.440
Este es el método más grande creo que en esta clase en particular, pero funciona exactamente igual que el no mini

09:38.440 --> 09:39.040
versión.

09:39.040 --> 09:42.940
Así que usted puede ir a ver que uno y ver cómo describo los detalles aquí.

09:42.940 --> 09:44.650
Realmente estamos haciendo las mismas cosas.

09:45.130 --> 09:48.430
Sólo por ejemplo, tengo un poco de código extra aquí.

09:48.430 --> 09:55.060
Así que la parte resaltada aquí está mostrando que cada comando viene junto con cualquier dato que sea relevante.

09:55.390 --> 10:01.870
Así que cuando el inicio de sesión se ha completado, tenemos los datos del usuario y podemos mostrarlos a la interfaz de usuario si queremos,

10:02.350 --> 10:10.330
sólo para demostrar una alternativa completa a ese enfoque desde cualquier ámbito, incluida la vista, nosotros

10:10.330 --> 10:14.350
podemos pedir al contexto, Hey, ve a buscarme este modelo en particular.

10:14.350 --> 10:20.950
Obtendrá ese modelo si existe y podemos hacer lo que queramos, incluyendo el registro de depuración de los que

10:20.950 --> 10:21.700
valores.

10:21.700 --> 10:25.240
Así que este es otro ejemplo de la flexibilidad.

10:25.240 --> 10:31.450
La convención aquí es que probablemente es mejor que envíes mensajes junto con el comando.

10:31.450 --> 10:37.480
Así que hay menos acoplamiento, hay menos conocimiento de esta preocupación sobre la estructura de otra preocupación.

10:37.480 --> 10:43.510
El código resaltado aquí está sugiriendo que, hey, la vista sabe qué datos mirar en qué modelo,

10:43.510 --> 10:45.790
lo que podría considerarse una extralimitación.

10:45.790 --> 10:52.900
Pero dependiendo del caso de uso que tengas y también dependiendo de cómo esté estructurada tu interfaz de usuario, puede hacer perfectamente

10:52.900 --> 10:57.730
sentido que tu vista vaya a modelos particulares para renderizar esos datos.

10:57.730 --> 11:00.820
No queremos que la vista afecte directamente a los datos del modelo.

11:00.820 --> 11:02.470
Eso sería una mala práctica.

11:02.470 --> 11:04.180
Aquí termina la clase View.

11:04.180 --> 11:09.010
Ahora, antes de seguir adelante, quiero tomar un momento y mirar en el gestor de comandos y el comando

11:09.010 --> 11:12.550
estructura porque no hemos mirado que en el código de ejemplo anterior antes.

11:12.850 --> 11:19.450
Así que recuerda aquí en la misma clase de arriba en el inicializar, estamos añadiendo oyentes de comandos.

11:19.450 --> 11:22.060
Echemos un vistazo a lo que hace exactamente.

11:22.060 --> 11:24.540
Empezaremos mirando el contexto para revisarlo.

11:24.550 --> 11:29.800
Así que recuerde que la clase de contexto es importante porque tiene el localizador de modelo y el gestor de comandos

11:30.100 --> 11:32.830
Relevante para esta discusión es el gestor de comandos.

11:32.830 --> 11:37.450
Puedes pensar en el gestor de comandos como una lista de diferentes comandos que han sido registrados.

11:37.450 --> 11:44.530
Así que su API le permite añadir en la escucha de los comandos e invocar cualquier comando para permitir la flexibilidad.

11:44.530 --> 11:49.960
El comando debe ser un comando AI, pero fíjate que ese comando I es principalmente una interfaz de marcador.

11:49.960 --> 11:54.070
No tenemos ninguna implementación garantizada dependiendo de las necesidades que tengas.

11:54.070 --> 12:01.510
Puede que quieras tener una implementación alternativa aquí que requiera algún tipo de funcionalidad de ejecutar y deshacer.

12:01.510 --> 12:08.470
Pero para el caso de uso base que tengo en estos ejemplos, sólo lo estoy pasando como un objeto tonto

12:08.470 --> 12:09.400
de parámetros.

12:09.400 --> 12:14.470
Echemos un vistazo a uno de los ejemplos que utilizo en el caso del registro en presentado.

12:14.830 --> 12:16.270
Veamos la estructura.

12:16.270 --> 12:22.360
Podemos ver que el comando log in submitted como es requerido implementa la interfaz del comando I

12:22.360 --> 12:25.660
en cuanto a la implementación dentro de su costumbre a sus propias necesidades.

12:25.660 --> 12:31.060
Así que todo lo que realmente hace es tener un constructor que toma exactamente los datos que necesitamos en este tipo de operación

12:31.060 --> 12:32.730
y los mantiene aquí localmente.

12:32.740 --> 12:34.780
En un momento veremos donde se invoca.

12:34.780 --> 12:39.790
Pero recuerda, es la vista la que está a la escucha de este comando y cada vez que se inicie sesión se enviará el comando

12:39.790 --> 12:45.610
responde actualizando la UI y usando los datos del usuario que vemos aquí

12:45.610 --> 12:47.200
para ayudar a rellenar la interfaz de usuario.

12:47.230 --> 12:48.910
Eso es todo para la vista de inicio de sesión.

12:48.910 --> 12:52.780
Así que de vuelta aquí en la mini clase de login de alto nivel, hemos visto la vista.

12:52.780 --> 12:54.910
Ahora finalmente veremos el controlador.

12:54.910 --> 12:56.380
Esta es la última pieza del puzzle.

12:56.380 --> 13:02.680
El controlador de inicio de sesión extiende el controlador base y como en cualquier caso, usando los mini MVCs, extendiendo

13:02.680 --> 13:04.030
la base es opcional.

13:04.030 --> 13:08.620
Aquí estamos consiguiendo algo de funcionalidad libre, de la que hablé en ejemplos de código anteriores, así que voy a

13:08.620 --> 13:09.690
saltaré eso por ahora.

13:09.700 --> 13:13.030
Dentro de la inicialización, el controlador tiene referencias.

13:13.030 --> 13:15.390
Ahora a las otras preocupaciones mayores.

13:15.400 --> 13:21.790
Fíjate en lo que hacemos aquí, estamos a la escucha de cualquiera de los eventos que nos interesan.

13:21.790 --> 13:26.020
Escuchamos el modelo, escuchamos la vista y escuchamos el servicio.

13:26.350 --> 13:28.870
Puedes empezar a ver que el controlador es el pegamento.

13:28.870 --> 13:34.330
Es la persona intermedia que se sienta entre estas diferentes capas, escucha los eventos de una, y como

13:34.330 --> 13:37.150
veremos en un momento, es capaz de enviar la comunicación hacia fuera.

13:37.150 --> 13:38.560
Aquí tenemos un ejemplo perfecto.

13:38.560 --> 13:43.750
Estamos escuchando a The View iniciar sesión, y cuando eso sucede, invocamos un comando.

13:43.750 --> 13:49.840
Así que imagina una especie de escucha con dos tazas y una cadena larga, un tipo de comunicación muy acoplada.

13:49.840 --> 13:54.820
Aquí el controlador está escuchando directamente a la vista para que ocurra un evento específico.

13:54.820 --> 13:56.140
Eso es lo que vemos aquí.

13:56.140 --> 14:00.070
Luego va a traducir eso a un tipo de estación de radio mucho más amplia.

14:00.130 --> 14:02.180
¿Difusión cuando envía el comando?

14:02.200 --> 14:03.010
Absolutamente.

14:03.010 --> 14:08.230
Cualquier preocupación en todo este proyecto que tenga acceso al mismo contexto, que los cuatro de nuestros niveles

14:08.230 --> 14:14.170
tienen acceso al mismo contexto, que sería capaz de suscribirse y escuchar este registro en el comando enviado

14:14.170 --> 14:15.460
que se dispara aquí.

14:15.460 --> 14:19.240
Y ese ámbito consumidor no sabe necesariamente qué ámbito lo envió.

14:19.240 --> 14:22.870
Y pensamos en eso como una buena práctica que es la comunicación desacoplada.

14:22.870 --> 14:27.970
De nuevo, invocamos ese comando y le decimos al servicio que inicie el proceso de login.

14:27.970 --> 14:35.590
Cada vez que ocurre el cierre de sesión, traducimos ese evento de vista a un comando Cuando el servicio está completo

14:35.590 --> 14:42.010
y ha iniciado sesión con éxito, podemos actualizar el modelo directamente, lo cual es una buena práctica.

14:42.010 --> 14:45.010
Los controladores pueden leer y escribir en el modelo.

14:45.010 --> 14:47.020
Y finalmente enviamos un comando.

14:47.020 --> 14:51.310
Ahora tienes muchas formas diferentes de estructurar estas comunicaciones.

14:51.310 --> 14:58.000
Por ejemplo, aquí, en lugar de actualizar directamente el modelo y enviar el comando, podríamos, en

14:58.000 --> 15:05.410
teoría, sólo actualizar el modelo y cualquier preocupación que quiere saber cuando el modelo se actualiza directamente

15:05.410 --> 15:07.720
suscribirse al modelo que sea factible.

15:07.720 --> 15:13.870
Otra alternativa es, en lugar de que este controlador afecte directamente al modelo estableciendo valores,

15:13.870 --> 15:20.260
podríamos sólo enviar el comando, y alguna otra preocupación sería responsable de escuchar a ese comando

15:20.260 --> 15:21.640
y actualizar el modelo.

15:21.640 --> 15:26.890
Ahora, para un proyecto simple donde tenemos un modelo y un controlador, lo que estoy mostrando aquí es probablemente

15:26.890 --> 15:33.610
más apropiado, pero en un proyecto mucho más grande, puede tener un controlador y el par de modelos para diferentes

15:33.610 --> 15:35.440
áreas de la aplicación.

15:35.440 --> 15:42.100
Así que un controlador podría decir, Hey, sé que cuando recibo este mensaje en particular, sólo voy a decirle a

15:42.100 --> 15:46.660
con un comando a las otras preocupaciones cómo deben reaccionar.

15:46.660 --> 15:52.450
Esto te permite desacoplar incluso la lógica del controlador en múltiples controladores.

15:52.450 --> 15:56.530
Y finalmente, cada vez que el modelo cambia, enviamos un comando.

15:56.530 --> 15:58.210
Eso es todo para esta demo completa.

15:58.210 --> 16:00.280
Echemos otro vistazo a la aplicación en ejecución.

16:00.280 --> 16:01.150
Aquí estamos.

16:01.150 --> 16:04.150
Finalmente, echaremos otro vistazo al ejemplo en ejecución.

16:16.350 --> 16:18.240
Usaré la contraseña correcta aquí.

16:22.220 --> 16:23.720
Y tenemos éxito.

16:24.610 --> 16:25.990
Eso es todo para esta demostración.
