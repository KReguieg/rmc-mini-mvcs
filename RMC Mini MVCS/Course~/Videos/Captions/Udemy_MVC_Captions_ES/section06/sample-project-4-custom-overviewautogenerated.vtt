WEBVTT

00:00.120 --> 00:03.570
El proyecto de muestra personalizado de la mini NBC.

00:03.570 --> 00:05.010
Enhorabuena.

00:05.010 --> 00:09.180
Habéis completado con éxito toda la teoría de este curso juntos.

00:09.180 --> 00:11.010
Hemos repasado la introducción del curso.

00:11.010 --> 00:14.850
Hemos visto una visión general de la unidad, incluyendo la estructura de la unidad.

00:14.850 --> 00:22.770
Hemos visto el diseño de software desde un alto nivel cubriendo principios de diseño, patrones de diseño, diagramación UML,

00:22.770 --> 00:24.840
así como las propias arquitecturas.

00:24.840 --> 00:29.340
Y luego, juntos, profundizamos en la arquitectura MINI y VCs para Unity.

00:29.340 --> 00:35.460
Pongamos en práctica toda esta teoría y creemos un nuevo proyecto desde cero.

00:35.460 --> 00:41.190
Ahora, con cada proyecto de ejemplo que hemos cubierto y con este nuevo también, seguimos pelando hacia atrás

00:41.190 --> 00:46.770
más capas en los conceptos MVCs y pensar críticamente acerca de cómo estamos aplicando.

00:46.770 --> 00:48.600
A medida que avanzamos en la siguiente sección.

00:48.600 --> 00:55.170
Piensa por ti mismo en qué aspectos de la arquitectura y de este marco te sientes más cómodo

00:55.170 --> 00:55.410
¿con qué?

00:55.420 --> 01:00.150
¿Empiezas a ver los beneficios a largo plazo cuando aplicas la arquitectura a tus proyectos?

01:00.150 --> 01:02.660
¿Qué partes del marco de trabajo quieres explorar más?

01:02.670 --> 01:06.390
Considera también qué aspectos pueden no funcionar para tus necesidades.

01:06.390 --> 01:12.120
¿Qué puedes hacer para obtener los resultados que deseas en un proyecto en el que los principios de diseño, patrones

01:12.120 --> 01:14.580
y otros conceptos siguen sin estar claros?

01:14.580 --> 01:19.440
Bueno, hasta este punto hemos visto varios ejemplos de MVC en acción.

01:19.440 --> 01:22.270
En cada caso, hemos revisado algo que ya existía.

01:22.290 --> 01:24.510
Ahora crearemos un nuevo proyecto desde cero.

01:24.510 --> 01:26.550
Este es el proceso de alto nivel que haremos juntos.

01:26.550 --> 01:29.370
Bien, ¿cuál es nuestro concepto y cuáles son los requisitos funcionales?

01:29.370 --> 01:30.690
¿Qué tiene que hacer?

01:30.720 --> 01:32.490
¿Cuál es la experiencia del usuario?

01:32.490 --> 01:35.550
¿Qué ven y qué tipo de datos utilizan?

01:35.550 --> 01:38.620
¿Qué aspectos arquitectónicos necesitaremos?

01:38.640 --> 01:42.960
Servicio modelo vista controlador, quizás múltiples.

01:42.960 --> 01:47.730
¿Y para cuáles de esas preocupaciones podemos usar la funcionalidad base y para cuáles necesitamos?

01:47.730 --> 01:49.260
¿Alguna funcionalidad personalizada?

01:49.260 --> 01:54.690
Así que vamos a hacer una simple aplicación de matemáticas, una calculadora utilizando muchos MVC.

01:54.690 --> 01:56.070
Aquí están los requisitos.

01:56.340 --> 01:59.370
Tendremos algunos campos de texto de entrada en la pantalla.

01:59.880 --> 02:06.750
El usuario escribirá dos números enteros y luego hará clic en un botón para sumarlos matemáticamente

02:06.750 --> 02:07.650
y mostrar el resultado.

02:07.650 --> 02:09.930
Entonces, ¿cómo desglosamos esto en preocupaciones?

02:09.930 --> 02:11.430
Bueno, el modelo almacena los datos.

02:11.430 --> 02:14.220
¿Qué tipo de datos necesitamos para que esto suceda?

02:14.220 --> 02:19.590
Bueno, empezando por la vista y pensando en los datos de esa manera, sabemos que tenemos algo de texto

02:19.590 --> 02:22.620
campos de los usuarios que entran y tenemos que almacenarlos de alguna manera.

02:22.620 --> 02:28.290
Así que vamos a tener un número entero para el primer campo de texto, un número entero para el segundo, y un número entero para el

02:28.290 --> 02:28.860
resultado.

02:28.860 --> 02:35.400
En la vista, tendremos algún tipo de texto para A, para B, y también para mostrar el resultado en el controlador,

02:35.400 --> 02:41.460
que va a manejar la lógica necesitaría algo para hacer la operación de adición, así como una manera de

02:41.460 --> 02:43.290
borrar o reiniciar la aplicación.

02:43.290 --> 02:49.290
Y mientras que en ejemplos anteriores hemos utilizado una capa de servicio para cargar algunos datos externos, no necesitamos que

02:49.290 --> 02:51.480
para este ejemplo, así que no tendremos un servicio.

02:51.480 --> 02:55.020
¿Qué funcionalidad base utilizaremos aquí?

02:55.020 --> 03:00.240
Aquí estamos pensando para qué asuntos queremos funcionalidad estándar y para cuáles queremos

03:00.240 --> 03:01.290
¿funcionalidad personalizada?

03:01.290 --> 03:05.400
Bueno, como suele ser el caso para el modelo, queremos alguna funcionalidad básica.

03:05.400 --> 03:08.610
Normalmente no hay necesidad de desviarse del modelo base.

03:08.610 --> 03:11.580
Así que aquí vamos a extender el modelo base para la vista.

03:11.580 --> 03:16.230
Implementaremos la interfaz de la vista y extenderemos el comportamiento mono.

03:16.230 --> 03:18.110
Ya hemos visto este patrón antes.

03:18.120 --> 03:20.400
Cada vez que quieras usar la UI de Unity.

03:20.400 --> 03:23.340
La UI de Unity juega muy bien con los comportamientos mono.

03:23.340 --> 03:28.470
Así que vamos a apoyarnos en eso y vamos a utilizar un comportamiento mono para nuestra vista del controlador.

03:28.470 --> 03:32.970
Si bien existe una clase base de controlador que funciona mejor cuando queremos uno.

03:32.970 --> 03:38.340
Cada uno de un modelo vista controlador y servicio aquí porque no necesitamos el servicio.

03:38.340 --> 03:43.890
Tenemos algunas opciones de cómo avanzar, pero simplemente implementaremos el controlador AI y crearemos

03:43.890 --> 03:46.560
funcionalidad personalizada que no utilice el servicio.

03:46.560 --> 03:50.790
Y de nuevo, en la capa de servicio, no usaremos un servicio, así que nos saltaremos esa parte.

03:50.790 --> 03:53.700
Esto es porque la aplicación no pide datos externos.

03:53.700 --> 03:59.430
Así que en esta etapa de la lluvia de ideas, es un buen momento para pensar en la diagramación, utilizando UML.

03:59.460 --> 04:05.430
Esto te ayuda a pensar dónde se encuentran las dependencias, qué interfaces se implementarán, cuáles...

04:05.430 --> 04:10.320
clases se extenderían, tanto si estás trabajando en un proyecto tú solo o junto con el equipo,

04:10.320 --> 04:14.310
UML es una gran manera de comunicar y enfocar el desarrollo.

04:14.310 --> 04:20.100
Así que tomando esas mismas lluvias de ideas que hemos tenido en los últimos pasos, simplemente lo articulamos visualmente.

04:20.100 --> 04:25.530
Tendremos una mini clase de calculadora que represente toda la estructura en su interior.

04:25.530 --> 04:30.060
Tendremos un modelo de calculadora, un controlador de calculadora y la vista de calculadora.

04:30.060 --> 04:33.270
A lo largo del curso ha habido varias tareas de desafío de codificación.

04:33.270 --> 04:38.070
Si estás listo para el último desafío de codificación, puedes pausar el vídeo aquí.

04:38.070 --> 04:43.950
Utiliza sólo la información de la que hemos hablado en esta sección y empieza a codificar desde cero una vez hayas completado

04:43.950 --> 04:49.110
la tarea o si te encuentras atascado, puedes volver a esto y ver cómo hemos resuelto

04:49.110 --> 04:49.650
juntos.

04:49.650 --> 04:50.850
Veámoslo en acción.

04:50.850 --> 04:57.840
Voy a mostrar desde el principio la obtención de la unidad, la instalación, la creación de un nuevo proyecto, añadiendo

04:57.840 --> 04:59.910
el mini y el framework de VC y.

04:59.960 --> 05:03.470
Haciendo codificación en vivo para esta calculadora Proyecto de ejemplo.

05:03.470 --> 05:08.690
Este proyecto de ejemplo se sentirá un poco diferente a los que hemos hecho antes porque estoy codificando

05:08.690 --> 05:14.030
sobre la marcha, así que habrá menos edición y si tenemos suerte, voy a cometer algunos errores en el camino, que

05:14.030 --> 05:15.100
podemos resolver juntos.

05:15.110 --> 05:16.280
Empecemos.
