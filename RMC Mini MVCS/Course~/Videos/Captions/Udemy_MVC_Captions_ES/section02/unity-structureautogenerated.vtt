WEBVTT

00:00.720 --> 00:02.340
La estructura de la unidad.

00:02.340 --> 00:05.260
Este curso se ha dividido en diferentes vías de aprendizaje.

00:05.280 --> 00:10.770
En teoría, vamos a dar un paso atrás y ver algunos de los fundamentos de software y diseño de juegos.

00:10.770 --> 00:17.070
Al hablar de la ED, nos fijaremos en Unity, la herramienta ED en sí, que es lo que nosotros como desarrolladores

00:17.070 --> 00:19.170
abrimos y usamos como nuestro software.

00:19.170 --> 00:24.450
Y en las secciones de código, veremos el lenguaje de programación C-sharp y cómo se aplica a unity game

00:24.450 --> 00:25.230
desarrollo.

00:25.290 --> 00:26.910
Empecemos con la teoría.

00:26.910 --> 00:34.200
El ciclo de vida del desarrollo de software incluye muchas etapas, que nos llevan desde una idea hasta un producto acabado.

00:34.200 --> 00:40.470
Esto incluye los requisitos, el análisis, la planificación del proyecto, el diseño del concepto, etc.

00:40.470 --> 00:43.710
el desarrollo, las pruebas y la implantación.

00:43.710 --> 00:51.180
Aunque Unity es una potente herramienta en muchas de estas etapas, nos centraremos en el uso de Unity en el desarrollo,

00:51.180 --> 00:53.370
pruebas y despliegue.

00:53.370 --> 00:55.350
Dentro del mundo de unity.

00:55.350 --> 01:02.970
Los conceptos se estructuran de la siguiente manera Dentro de un proyecto tienes una o más escenas dentro de cada escena.

01:02.970 --> 01:06.570
Tienes objetos de juego con componentes adjuntos.

01:06.570 --> 01:14.100
Esos componentes pueden manejar cosas como el renderizador de malla, el colisionador, audio, cuerpo rígido para la física,

01:14.100 --> 01:17.520
sistemas de partículas, y por supuesto scripts personalizados.

01:17.520 --> 01:21.960
Objeto de juego es una pieza fundamental del rompecabezas dentro de la unidad.

01:21.960 --> 01:28.950
Eso es todo lo que es visual y no visual en el que colgamos nuestros componentes personalizados y Unity's

01:28.950 --> 01:30.520
de Unity.

01:30.540 --> 01:33.750
Echa un vistazo a esta captura de pantalla del juego como ejemplo.

01:34.440 --> 01:39.870
Aquí tenemos una escena de juego que se divide en varios prefabricados diferentes.

01:39.870 --> 01:46.070
Puedes pensar en un prefabricado como un objeto de juego con uno o más componentes que se almacena para su reutilización.

01:46.080 --> 01:51.540
Por ejemplo, aquí vemos varias monedas, cada una con una posición y rotación únicas.

01:51.540 --> 01:59.070
Sin embargo, la moneda tiene algunas características comunes, así tal vez la funcionalidad, detección de colisiones, cómo

01:59.070 --> 02:06.180
se renderiza y esas características comunes se mantienen en el prefab al organizar tu proyecto y decidir

02:06.180 --> 02:07.290
la estructura.

02:08.080 --> 02:14.100
Los equipos a menudo eligen entre escenas y prefabricados para la organización de alto nivel.

02:14.110 --> 02:17.830
El objeto de juego es el concepto fundamental dentro de cualquier escena.

02:17.830 --> 02:23.470
Y aunque puede haber muchos componentes diferentes en un objeto de juego, el componente de transformación es siempre

02:23.470 --> 02:30.250
presente el componente de transformación almacena y manipula aspectos de cómo ese objeto se sitúa en el mundo.

02:30.250 --> 02:34.750
Tanto si el objeto tiene gráficos como si no, tiene un objeto de transformación.

02:34.750 --> 02:38.710
El código que utilizamos es el lenguaje de instrucciones del software.

02:38.710 --> 02:43.480
Las raíces históricas de Unity están relacionadas con el proyecto mono.

02:43.480 --> 02:47.140
Se trataba de una versión de código abierto del framework DOT net.

02:47.350 --> 02:53.860
Todavía verás el término mono usado un poco a través de la API de Unity, incluyendo el comportamiento mono.

02:53.860 --> 02:57.490
Mientras que en el pasado Unity ofrecía varios lenguajes de programación diferentes.

02:57.490 --> 03:03.760
C-sharp es la única opción de programación ahora, y aunque Unity soporta C-sharp, no depende de

03:03.760 --> 03:04.920
el framework DOT net.

03:04.930 --> 03:12.370
La versión de Unity de C-sharp es bastante robusta y cuenta con un montón de datos, conceptos y estructuras diferentes.

03:12.370 --> 03:18.550
El principal namespace que usamos dentro de Unity es el motor de Unity para el código en tiempo de ejecución.

03:18.550 --> 03:26.560
El editor de Unity para el código en tiempo de edición y el namespace System, que incluye un montón de funcionalidades diferentes

03:26.560 --> 03:32.290
no específicamente relacionadas con unity, pero bastante útiles, incluyendo matemáticas, librerías, etc.

03:32.290 --> 03:36.610
Aquí hay un ejemplo de un script personalizado en C-sharp para su uso en unity.

03:36.610 --> 03:39.280
Empezando por arriba, vemos las sentencias using.

03:39.280 --> 03:43.990
Estos traen los espacios de nombres que tenemos que utilizar en este archivo de clase en particular.

03:44.590 --> 03:50.950
Luego vemos un espacio de nombres que nos ayuda a declarar y organizar dónde se encuentra este código en nuestro proyecto.

03:50.950 --> 03:55.810
A continuación, declaramos la clase pública o interfaz que define este tipo.

03:55.810 --> 03:59.200
Fíjate que aquí estamos extendiendo o heredando el comportamiento monarca.

03:59.200 --> 04:04.630
Ahora, desde este ámbito, podemos acceder a toda la funcionalidad del comportamiento monarca también.

04:04.630 --> 04:07.360
Algunas características específicas de la unidad a destacar aquí.

04:07.360 --> 04:11.470
La capacidad de serializar campos utilizando el atributo de campo serializado.

04:11.470 --> 04:18.310
Esto puede tomar un valor público o privado y mostrarlo en el inspector de la unidad para que mientras

04:18.310 --> 04:21.570
el juego en vivo se está reproduciendo, podemos modificar esa configuración.

04:21.580 --> 04:24.730
Esto ayuda en el diseño de prototipos y jugabilidad.

04:24.730 --> 04:30.040
El comportamiento del monitor viene con muchos eventos clave que puedes aprovechar nombrando uno de sus métodos.

04:30.040 --> 04:30.670
Despierto.

04:30.670 --> 04:36.460
Capturas el evento de cuando ese objeto se despierta por primera vez en el mundo.

04:36.460 --> 04:39.160
Esto ocurre sólo una vez después.

04:39.160 --> 04:40.930
Aquí se llama al método start.

04:40.930 --> 04:46.210
Es bueno establecer cualquier dependencia con cualquier otro objeto y luego el método update es llamado cada

04:46.210 --> 04:47.500
fotograma a partir de entonces.

04:47.500 --> 04:52.210
Este es un gran lugar para hacer la entrada, la lógica y la actualización de gráficos.

04:52.930 --> 04:58.690
Estos son sólo algunos de los eventos o métodos que puede aprovechar, pero sin duda estos

04:58.690 --> 05:00.970
son algunas de las gracias más importantes.
