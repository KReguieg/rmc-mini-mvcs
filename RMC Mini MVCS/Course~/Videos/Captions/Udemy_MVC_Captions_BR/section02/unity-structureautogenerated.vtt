WEBVTT

00:00.720 --> 00:02.340
A estrutura da unidade.

00:02.340 --> 00:05.260
Este curso foi dividido em diferentes trilhas de aprendizagem.

00:05.280 --> 00:10.770
Em teoria, daremos um passo atrás e examinaremos alguns dos fundamentos do software e do design de jogos.

00:10.770 --> 00:17.070
Ao falar sobre o ED, analisaremos o Unity, a ferramenta de ED em si, que é o que nós, como desenvolvedores

00:17.070 --> 00:19.170
abrimos e usamos como nosso software.

00:19.170 --> 00:24.450
E nas seções de código, veremos a linguagem de programação C-sharp e como ela se aplica ao jogo unity

00:24.450 --> 00:25.230
desenvolvimento de jogos.

00:25.290 --> 00:26.910
Vamos começar com a teoria.

00:26.910 --> 00:34.200
O ciclo de vida do desenvolvimento de software inclui muitos estágios, levando-nos de uma ideia a um produto acabado.

00:34.200 --> 00:40.470
Isso inclui requisitos, análise, planejamento do projeto, concepção do conceito e assim por diante

00:40.470 --> 00:43.710
ao desenvolvimento, teste e implementação.

00:43.710 --> 00:51.180
Embora o unity seja uma ferramenta poderosa em muitos desses estágios, vamos nos concentrar no uso do unity no desenvolvimento,

00:51.180 --> 00:53.370
fases de teste e implantação.

00:53.370 --> 00:55.350
Por dentro do mundo do unity.

00:55.350 --> 01:02.970
Os conceitos são estruturados da seguinte forma Em um projeto, você tem uma ou mais cenas dentro de cada cena.

01:02.970 --> 01:06.570
Você tem objetos de jogo com componentes anexados.

01:06.570 --> 01:14.100
Esses componentes podem lidar com coisas como o renderizador de malha, o colisor, o áudio, o corpo rígido para a física,

01:14.100 --> 01:17.520
sistemas de partículas e, é claro, scripts personalizados.

01:17.520 --> 01:21.960
O objeto de jogo é uma peça fundamental do quebra-cabeça da unidade.

01:21.960 --> 01:28.950
É tudo o que é visual e não visual, no qual penduramos nossos componentes personalizados e o sistema Unity.

01:28.950 --> 01:30.520
componentes embutidos também.

01:30.540 --> 01:33.750
Dê uma olhada nesta captura de tela de jogo como exemplo.

01:34.440 --> 01:39.870
Aqui temos uma cena de jogo que está dividida em vários prefabs diferentes.

01:39.870 --> 01:46.070
Você pode pensar em um prefab como um objeto de jogo com um ou mais componentes que é armazenado para reutilização.

01:46.080 --> 01:51.540
Por exemplo, vemos várias moedas aqui, cada uma com uma posição e rotação exclusivas.

01:51.540 --> 01:59.070
No entanto, a moeda também tem algumas características comuns, talvez funcionalidade, detecção de colisão, como

01:59.070 --> 02:06.180
ela é renderizada e esses recursos comuns são mantidos no prefab ao organizar seu projeto e decidir

02:06.180 --> 02:07.290
sobre a estrutura.

02:08.080 --> 02:14.100
As equipes geralmente escolhem entre cenas e pré-fabricados para organização de alto nível.

02:14.110 --> 02:17.830
O objeto de jogo é o conceito fundamental em qualquer cena.

02:17.830 --> 02:23.470
E embora possa haver muitos componentes diferentes em um objeto de jogo, o componente de transformação é sempre

02:23.470 --> 02:30.250
presente, o componente de transformação armazena e manipula aspectos de como o objeto se situa no mundo.

02:30.250 --> 02:34.750
Quer o objeto tenha gráficos ou não, ele tem um objeto de transformação.

02:34.750 --> 02:38.710
O código que usamos é a linguagem de instruções do software.

02:38.710 --> 02:43.480
As raízes históricas do Unity estão relacionadas ao projeto mono.

02:43.480 --> 02:47.140
Esta era uma versão de código aberto da estrutura DOT net.

02:47.350 --> 02:53.860
Você ainda verá o termo mono usado um pouco na API do Unity, incluindo o comportamento mono.

02:53.860 --> 02:57.490
No passado, o Unity oferecia várias linguagens de programação diferentes.

02:57.490 --> 03:03.760
C-sharp é a única opção de programação agora, e embora o Unity suporte C-sharp, ele não depende de

03:03.760 --> 03:04.920
do framework DOT net.

03:04.930 --> 03:12.370
A versão de C-sharp do Unity é bastante robusta e apresenta muitos dados, conceitos e estruturas diferentes.

03:12.370 --> 03:18.550
Os principais namespaces que usamos dentro do Unity são o mecanismo Unity para o código de tempo de execução.

03:18.550 --> 03:26.560
O editor Unity para editar código de tempo e o espaço de nomes System, que inclui muitas funcionalidades diferentes

03:26.560 --> 03:32.290
não especificamente relacionadas à unidade, mas bastante úteis, incluindo matemática, bibliotecas, etc.

03:32.290 --> 03:36.610
Aqui está um exemplo de um script personalizado em C-sharp para uso na unidade.

03:36.610 --> 03:39.280
Começando do topo, vemos as instruções de uso.

03:39.280 --> 03:43.990
Elas trazem os namespaces que precisamos usar nesse arquivo de classe específico.

03:44.590 --> 03:50.950
Em seguida, vemos um namespace que nos ajuda a declarar e organizar onde esse código se encontra em nosso projeto.

03:50.950 --> 03:55.810
Em seguida, declaramos a classe ou interface pública que define esse tipo.

03:55.810 --> 03:59.200
Observe que aqui estamos estendendo ou herdando o comportamento do monarch.

03:59.200 --> 04:04.630
Agora, de dentro desse escopo, podemos acessar todas as funcionalidades do comportamento monarca também.

04:04.630 --> 04:07.360
Alguns recursos específicos da unidade são dignos de nota aqui.

04:07.360 --> 04:11.470
A capacidade de serializar o campo usando o atributo de campo serializado.

04:11.470 --> 04:18.310
Isso pode pegar um valor público ou privado e renderizá-lo no inspetor de unidade para que, enquanto

04:18.310 --> 04:21.570
o jogo ao vivo esteja sendo jogado, podemos ajustar essa configuração.

04:21.580 --> 04:24.730
Isso ajuda na criação de protótipos e no design da jogabilidade.

04:24.730 --> 04:30.040
O comportamento do monitor vem com muitos eventos importantes que você pode acessar nomeando um dos seus métodos.

04:30.040 --> 04:30.670
Desperto.

04:30.670 --> 04:36.460
Você captura o evento de quando esse objeto é acordado pela primeira vez no mundo.

04:36.460 --> 04:39.160
Isso acontece apenas uma vez depois.

04:39.160 --> 04:40.930
O método start é chamado aqui.

04:40.930 --> 04:46.210
É bom configurar quaisquer dependências com quaisquer outros objetos e então o método update é chamado a cada

04:46.210 --> 04:47.500
quadro depois disso.

04:47.500 --> 04:52.210
Este é um ótimo lugar para fazer entrada, lógica e atualização de gráficos.

04:52.930 --> 04:58.690
Esses são apenas alguns dos eventos ou substituições de métodos dos quais você pode tirar proveito, mas certamente estes

04:58.690 --> 05:00.970
são alguns dos agradecimentos mais importantes.
